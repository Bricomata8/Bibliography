Adaptive access protocol for heavily congested
M2M networks
Meriam Bouzouita∗, Yassine Hadjadj-Aoul†, Nawel Zangar‡, and Sami Tabbane§ ∗†University of Rennes 1, France ∗‡§Mediatron, SUP’COM, Tunisia
Email: ∗mariem.bouzouita@supcom.tn, †yhadjadj@irisa.fr, ‡nawel.zangar@insat.rnu.tn, §Sami.Tabbane@insat.rnu.tn

Abstract—Machine-to-Machine (M2M) communications are expected to be one of the major drivers of future cellular networks, due to a plethora of services provided to operators and consumers. This leads to an explosively growth of simultaneous M2M arrivals, and then a bursty random access attempts that causes a severe random access congestion. One of the key solutions to deal with such congestion is the Access Class Barring (ACB) scheme. However, this scheme presents many limits when dealing with baseline congestions. Indeed, in such conditions, it induces a synchronization of the terminals willing to connect, as we demonstrated in the paper, which results in poor performances. Thus, we proposed, in this paper, a new method to estimate accurately the number of random access attempts in a way to measure efﬁciently the congestion level. Then, we proposed a novel implementation of the ACB process that mainly consists of dynamically adapting the ACB factor according to the network’s overload conditions. Simulation results show that the proposed algorithm outperforms the existing solutions by improving signiﬁcantly the access’s success probability while minimizing radio resources’ underutilization. Keywords: MTC, M2M, Random Access, ACB, congestion, dynamic ACB factor.
I. INTRODUCTION
Machine-to-Machine (M2M) communications, with their capability of providing various types of applications and services [3], are already considered to be a crucial technology for 4G LTE-Advanced systems. M2M communications are, also, expected to become a key enabler for the ﬁfth generation (5G) of communications systems [4] [2]. Indeed, one of the most important challenges for Network Operators is to support more efﬁciently the Internet of things (IoT), which comprises M2M communications.
In contrast to Human-to-Human (H2H) scenarios, M2M scenarios require a set of challenges related to the support of a rapid increase number of M2M devices. In fact, M2M communications are expected to grow more and more during the forecast period between 2014 and 2019, reaching 10.5 billion connections by 2019 (up from 3.3 billion in 2014) [5]. Therefore, this numerous number of M2M devices may arrive simultaneously and ask for network connection establishment as a way to ensure data transmission between the eNodeB and each equipment [2].
To achieve that purpose, every device should ﬁrst perform the RACH (Random access channel) procedure [6] [7]. It initially selects one of the available preambles’ sequences. If the preamble is chosen by only that single device, the

device can carry on with the RA (Random access) procedure. Otherwise, i.e. if two or more devices choose the same preamble sequence; a preamble collision is detected. Consequently, when the number of M2M devices becomes higher, this has a tremendous potential to generate a heavier random access trafﬁc and then results in a high preambles’ congestion.
To address this congestion issue, we propose, in this paper, a novel access protocol that adapts dynamically the access of M2M devices according to network’s congestion’s level. Then, we propose a new approach to estimate the RA attempts under the developed dynamic access algorithm.
The remainder of this article is organized as follows. In section 2, we describe the general architecture of the ACB mechanism followed by the RA process as introduced by the 3GPP. Section 3 is dedicated to expose the limitations related to our last contribution. Section 4 portrays our new adaptive access proposed protocol and the estimation algorithm. Section 5 is dedicated to the simulation setup and the discussion of the obtained results. Finally, the paper concludes in Section 6 with a summary recapping the main advantages and achievements of the proposed access protocol.
II. RELATED WORKS
To alleviate the congestion problem and consequently, make the next cellular networks more suitable to ensure the efﬁcient support of M2M services, the 3GPP standard introduces several overload resolution mechanisms [8] [9]. In literature, many resolution schemes were proposed based on the Access class barring (ACB) [10] method, as it helps reducing radio resources wastage caused when rejecting accesses from devices. Therefore, it guarantees resources’ saving by dissuading some M2M devices from starting the RA.
The ACB principle deﬁnes a probability p called ACBfactor and a time-duration called T barring. When a new M2M RA attempt comes, the device goes to a ﬁrst state x1 and then starts the ACB check. It generates a random number q between 0 and 1. If q is less than p, M2M device passes successfully the ACB check and can, then start the RA procedure. Otherwise, it goes to a waiting state x1,L where it will be blocked during a T barring duration before retrying a new ACB check. T barring is given by the following equation:
Tbarring = (0.7 + 0.6 ∗ qb) ∗ ac-BarringTime

where qb represents a random number in the interval [0, 1] generated by the device after a failed ACB check, and ac-
BarringTime represents a ﬁxed duration broadcast by eNodeB. Formerly the T barring was expired, the M2M equipment returns to x1 state and retries the ACB check [10].
Once the ACB check is successfully ﬁnished, M2M device goes to another state x2 and then attempts the RA. It chooses one preamble from the total pool sequences denoted N available during one RACH opportunity i. If this preamble is not chosen by any other equipment, eNodeB indicates a successful
preamble transmission, and consequently, the device passes
correctly the ﬁrst RA step. If not, RA attempt fails and the M2M equipment goes to a second waiting state x2,L during a back off time. When the latter is ceased, the device returns to state x2 and can reattempt the RA in the next RACH opportunity while the maximum number of preamble re-transmissions denoted Rmax is not reached [6]. The whole system explained previously, is depicted in Fig. 1.

λ

x1

(arrival)

px1 (AC Bsuccess )

x2 NS(x2) (RAsuccess)

(awake1)

(sleep1) (awake2)

(sleep2)

ACB checks. So, it will be interesting to design a brand new mechanism combined with an ACB scheme as a way to adapt dynamically the ACB factor to the congestion level. This may insure a number x2 around xr2e,fmax and as a result a maximum RA success probability.
Many research works investigated the dynamic aspect of ACB factor generation according to collision status. In [12], authors developed a Markov-Chain based trafﬁc-load estimation scheme according to the collision levels. Then, they propose a spectrum of functions to control the barring factor and vary it with the estimated trafﬁc load. In [13], with the fact that ACB and enhanced access barring (EAB) schemes both lack a contention detection method to decide when to activate it and how to adjust it properly, the authors proposed a contextaware dynamic resource allocation mechanism based on twophases method: phase 1 for the estimation of random access attempts, and phase 2 for resource allocation. The authors in [14], proposed an estimation based adaptive ACB scheme to improve the scalability of M2M networks. To reach that, they ﬁrst designed a new estimation method of the networks’ loads and then proposed a function to adapt dynamically the ACB probability to network load conditions.
In our last contribution, we have proposed a novel method adapting dynamically, in real-time, the ACB factor according to the contention’s level.
We will, in the following, detail the limitations of such a contribution and then expose our new proposal algorithm in order to correct such limitations.

x1,L

x2,L

Fig. 1: System model

The predictable number of successful preambles NS, during one RACH opportunity i is given as follows [11]:

NS(i) = x2

1

−

1 N

x2 −1

− x2e

x2 − N

1

(1)

where x2 depicted the total number of devices present at state X2 in order to attempt RA during a RACH opportunity i. The expected number of failed preambles NF can be derived given
the following equation [11]:

NF (i) = N

−

− x2e

x2 − N

1

−

N

− e

x2 N

(2)

It can be easily checked that NS is maximized when the number x2 is equal to the total number of preambles N available during one RACH opportunity. We will, in the following denote xr2e,fmax the number x2 maximizing the number of successful preambles’ transmissions. Resultantly, when the number of x2 becomes higher, the number of RACH preambles fails increases and causes a heavier RACH congestion. This is
due to RA reattempts but also to new arrivals after successful

III. CONTEXT
In a last contribution [15], we have proposed a dynamic approach to generate the appropriate ACB factor and adapt it dynamically according to overload situations. This is achieved using a Proportional Integral Derivative (PID) [16] controller that makes the number of M2M devices attempting the RA procedure converge to the optimal xr2e,fmax. The simulation results showed the efﬁciency of the PID controller in reducing RA collision probability as it avoids above the system overload and the radio resources’ under-utilization.
However, in case of heavily congested M2M networks, this approach becomes insufﬁcient to deal with such overloaded situations.
Simulation tests show that even if a PID regulator is applied, there are many situations, i.e. when the network load becomes heavier, where eNodeB is facing a synchronization problem. The latter is shown in Fig. 2. In fact, this leads to a rapid increase of the number x2 synchronously coming at state x2 (Fig. 2 (a)) and as a result the number of successful preambles transmissions intensively decrease. Such synchronized scenario has a higher potential to create a bursty and disruptive congestion. That’s why, in some RACH opportunities, zero devices succeed the RA process (Fig. 2 (b)), as if it is a problem of compatibility between PID controller and the large number of M2M arrivals attempting ACB process.

300

(a)
300
x2

(b)

RAsuccessf ul

200 200

leave the system after reaching the maximum RA preambles’ re-transmissions, grows rapidly due to network load increase.

Number of RA attempts Number of successful RA

100

100

120

# of abandons

0

0

100

0

20

40

60

80

0

20

40

60

80

Time(s)

Time(s)

Fig. 2: Number of successful RA vs Number of RA attempts

80

60

We can also observe, from Fig. 3, that the obtained perfor-

40

mance results (i.e. number of successful RA attempts) degrade

when the network loads increases.

20

0 20 21 22 23 24 25 26 27 28

Load(×104)

30

Fig. 5: Number of RA abandons vs Load

Number of successful RA

20

As a way to deal with such limitations, we propose a

new approach that combines between PID controller and an

improved dynamic method. The latter will be described in the

10

following section.

Underutilization resources rate

0 20 21 22 23 24 25 26 27 28 Load(×104)
Fig. 3: Number of successful RA vs Load
Another way to prove the inefﬁciency of the PID approach to deal with extremely congested networks, can be achieved by comparing the evolution of resources’ underutilization rate for various network loads. It can be easily seen, as shown in Fig. 4, that the resources’ underutilization rate increases intensively when the network loads increases. This rate becomes intolerable ( 1) when the network load reaches 25 ×104.
1
0.8
0.6
0.4
0.2
0 20 21 22 23 24 25 26 27 28 Load(×104)
Fig. 4: Resource’s under-utilization rate vs Load
From Fig. 5, we can also observe that when the network’s load is higher, the number of abandons, i.e. the devices that

IV. PROPOSAL
A. DACB: Dynamic ACB algorithm
In this subsection, we will describe in details the proposed algorithm illustrated in the following block. Our algorithm consists of two phases performed at each RACH opportunity. In the following, xr2e,fmax denotes the same ﬁxed set point mentioned previously, and xr2ef denotes a variable set point that will be used later.
In the ﬁrst phase of DACB algorithm, eNodeB adjusts dynamically the set point xr2ef according to the overload situation. It uses the Exponentially Weighted Moving Average (EWMA) values to check whether the overload level is high or not. If the congestion situations are heavy (line 6), eNodeB decreases xr2ef as a way to forbid more devices from attempting access in the subsequent step. Otherwise, i.e. in case of relaxed overload conditions (line 9), eNodeB increases xr2ef in order to allow more accesses in the following step. We consider only values within the interval [0; xr2e,fmax] by applying line 11: min max xr2ef, 0 , xr2e,fmax .
Once the dynamic adjustment’s set point is performed, eNodeB executes the phase 2 to generate the ACB factor at step n. If the EWMA is less than xr2e,fmax at step n, Pacb in the next step, is computed using equation in line 14, otherwise, eNodeB applied a PID controller to make the total number of M2M devices x2, contending for RA, converges to the optimal value xr2ef determined at step n. As Pacb is a probability, we apply: min (max (Pacb, 0) , 1) (line 18).
Both the dynamic adjustment of the set point and the ACB factor generation are repeated in the following step (i.e. next RACH opportunity).

Algorithm 1 DACB

1: n ← 1

2: xr2e,fmax ← N 3: 0 < θ < 1, α > 1, 0 < β < 1

4: Dynamic setpoint:

5: moy(n) ← (1 − θ)moy(n − 1) + θx2(n) 6: if moy(n) > αxr2e,fmax then 7: xr2ef(n + 1) ← xr2ef(n) − 1 8: else

9: if moy(n) < βxr2e,fmax then

10:

xr2ef(n + 1) ← xr2ef(n) + 1

11: xr2ef(n + 1) ← min max xr2ef(n + 1), 0 , xr2e,fmax 12: ACB probability:

13: if moy(n) ≤ xr2e,fmax then

14:

Pacb(n + 1)

←

xr2ef (n+1) x1 (n)

15: else

16: 17:

e(n + 1) ← xr2ef(n + 1) − x2(n) Pacb(n+1) ← Kpe(n+1)+Ki

n+1 k=0

e(k)

+

Kd(e(n

+

1) − e(n))

18: Pacb(n + 1) ← min (max (Pacb(n + 1), 0) , 1) 19: n ← n + 1
20: goto Dynamic set point

V. PERFORMANCE EVALUATIONS
A. Simulation parameters
Having described in details our proposed algorithm, we direct now our focus to its performance using a discrete event simulator. Our simulator is developed under C and models the whole system described in section 2. During simulations, Poisson distribution is chosen as the MTC trafﬁc model where inter-arrivals are exponentially distributed. We also adopt a RACH conﬁguration where one RACH opportunity occurs every 10 ms with 54 preambles for each opportunity.
The simulations’ parameters are summarized in Table I. When a RACH trial is declared unsuccessful, MTC device can retry the RA after a back off time chosen uniformly between 0 and the backoff parameter [6] ﬁxed in the following table.

TABLE I: Simulation parameters

Parameters
Simulation time N Rmax Backoff parameter ac-BarringTime Total number of M2M devices

Values
100s 54 10 20ms 4s 28 ×104

B. RAES: RA attempts estimation algorithm
As eNodeB cannot have the information about the exact number of devices present in state x2, we propose, in the following, to estimate it. Our estimation approach is illustrated
in algorithm 2. First, eNodeB estimates the number of RACH attempts x2 and then concludes the total number of ACB attempts x1 at step n. During one RACH opportunity n, eNodeB can get the number of successful preambles NS(n) and collided ones NF (n). Given that the number of successful preambles is also equal to the expected number of devices ac-
complishing the RA process, and given that a failed preamble
is chosen by at least two MTC devices, we can approximate x2 using equation in line 6. By line 7, eNodeB computes the EWMA values of xˆ2 at each step n. Then, it estimates the error e(n) that reﬂects the distance between the measured xˆ2(n) and xr2e,fmax (line 8). The estimation x˜2(n) is given by line 9.
Algorithm 2 RAES
1: n ← 1 2: NS , NF 3: 0 < θ < 1 4: 0 < δ < 1 5: x2 estimation: 6: xˆ2(n) ← NS(n) + 2NF (n) 7: moy(n) ← (1 − θ)moy(n − 1) + θxˆ2(n) 8: e(n) ← e(n − 1) + δ(xr2e,fmax − xˆ2(n)) 9: x˜2(n) ← moy(n) + e(n) 10: n ← n + 1 11: goto x2 estimation

B. Simulation results
In this subsection, we ﬁrst evaluate the performances of
the proposed algorithm. To illustrate the effect of the DACB
algorithm, we compare its performance against those obtained
with a PID-based only method and a basic ACB method (ﬁxed p = 0.3), for distinct network loads and different values of α and β. This comparison is made in terms of the following metrics: probability density function (PDF) of the total number
of RA attempts, number of RA abandons, number of RA re-
transmissions, success probability, collision probability, idle
probability of RA preambles and ﬁnally the average access
delay. Here, we deﬁne the random access delay required by
one device as the duration from the ﬁrst RA attempt until
the RA successful preamble transmission. Then, the average
random access delay will be the ratio of the whole random
access delay during one RACH opportunity to the total number
of successful M2M devices in this opportunity.
Fig. 6 illustrates the evolution of the number of instantaneous and ewma values of RA attempts against the xr2e,fmax, when a DACB is applied. We can easily observe that even if the instant values oscillate between 40 and 70, the average ones remain very close to xr2e,fmax which is one of the objectives of dynamic ACB generation as it helps to maximize
the success access probability and minimize the resources’
underutilization.
In Fig. 7 (a), we plot the PDFs of the number of RA attempts (i.e. x2) against that of xr2e,fmax. We note that even we change the parameters α and β of DACB algorithm, the PDFs are maximized around xr2e,fmax, which proves the effectiveness of DACB. However, from Fig. 7 (b), we also observe that x2 are spread far from xr2e,fmax. For example, when only a PID is applied, PDFs are maximized when x2 = 0.

# of RA attempts # of RA abandons

x2

30

70

ewma xm 2,raexf

DACB(28 × 104M 2M ) DACB(27 × 104M 2M )

DACB(26 × 104M 2M )

60

DACB(25 × 104M 2M )

20

P IDonly

ACBordinary

50

40

10

30

0

20

40

60

80

100

00

20

40

60

80

100

Time(s)

Time(s)

Fig. 6: Number of RA attempts vs Setpoint

Fig. 8: Number of RA abandons

Probability density function Probability density function
Collision probability(%) Collision probability(%) Collision probability(%)

0.3 0.2 0.1

(a)
DACB(α = 1.1, β = 0.9) DACB(α = 1.25, β = 0.75)
xm 2,raexf

0.3 0.2 0.1

(b)

P IDonly ACBordinary

DAC B 100

80

60

40

20

0

25

26

27

28

Load(×104)

P IDonly 100

80

60

40

20

0

25

26

27

28

Load(×104)

AC Bordinary 100

80

60

40

20

0

25

26

27

28

Load(×104)

00

100

200

300

400

x2

00

100

200

300

400

x2

Fig. 9: Collision probability

Fig. 7: Probability density function
Another way to test the performance improvements achieved by DACB can be reached by comparing the number of abandons for different network loads. Let’s see the results obtained in Fig. 8. We ﬁrst observe very little numbers of abandons (i.e. near to zero) and a greatly small ﬂuctuation of these numbers even if the number of M2M devices increase. Whereas, in case of only PID-based method the number of abandons increases when the networks become more heavily congested (i.e. from 60s). However, the number of abandons becomes intolerable from the beginning if an ordinary ACB scheme is applied.
From ﬁgure Fig. 9, we ﬁrst note a very small ﬂuctuation of collision probabilities between different network loads in case of DACB scheme. In fact, this is due to dynamic adjustment of the set point according to congestion level.Then, we can observe that collision probability is smaller when only a PID scheme is applied and even in case of very congested networks (i.e. 28 × 104 M2M). This is due to the synchronization problem observed in section 3. Another important observation is that collision phenomenon becomes exacerbated if we consider an ordinary ACB scheme.
On the other hand, we show the idle probability of pream-

bles in Fig. 10. It can be easily seen that idle probability remains acceptable ( 40%), when a DACB is applied, even if the network loads increases, which leads to a maximum resources’ utilization. However, idle probability becomes intolerable ( 100%) if an only PID based scheme is applied. This is in complete conformance with the synchronization problems discussed in section 3. We can also observe that idle probability decreases ( 0%) if an ordinary ACB scheme is considered. This is due to a large number of RA attempts (as seen in Fig. 7 (b)) and then the high collision probabilities obtained in Fig. 9.

Idle probability(%) Idle probability(%) Idle probability(%)

DAC B 100

80

60

40

20

0

25

26

27

28

Load(×104)

P IDonly 100

80

60

40

20

0

25

26

27

28

Load(×104)

AC Bordinary 100

80

60

40

20

0

25

26

27

28

Load(×104)

Fig. 10: Idle probability

We can now, from Fig. 11, notice the evolution of success access probability. We ﬁrst observe that success probability is at its maximum ( 35%), with DACB algorithm, even if

Success probability(%) Success probability(%) Success probability(%)
Instant number of RA attempts

M2M loads increases. Whereas, it decreases in case of only PID based scheme because of the synchronization problem discussed previously in section 3. Similar degradation results are obtained with an ordinary ACB scheme.

DAC B 60

40

20

0

25

26

27

28

Load(×104)

P IDonly 60

40

20

0

25

26

27

28

Load(×104)

AC Bordinary 60

40

20

0

25

26

27

28

Load(×104)

Fig. 11: Success probability

one. The estimation simulation results are described in Fig. 14. There are some ﬂuctuations between real values and predicted values, which remain acceptable.

(a)

(b)

80

80

x2,real x2,estimated

x2,real x2,estimated

60

60

Average number of RA attempts per second

40

40

20 0

20

40

60

80

100

Time(s)

20 0

20

40

60

80

100

Time(s)

Fig. 12 shows the average number of RA preambles’ re-
transmissions. From the ﬁgure, we note that the mean number of re-transmissions is about 2.5 (<< Rmax) when DACB scheme is adopted. However, this number exceeds 7 for PIDbased method. Another important performance parameter is

# of RA retransmissions # of RA retransmissions

DAC B 10

8

6

4

2

0

25

26

27

28

Load(×104)

P IDonly 10

8

6

4

2

0

25

26

27

28

Load(×104)

Fig. 12: Number of RA re-transmissions

the average random access delay illustrated in Fig. 13. From
Fig. 13 (a), we observe that the average delays for different loads are not much different and don’t exceed 60ms. On the other hand (in Fig. 13 (b)), we easily note that, with a PID-
only strategy, delays are not tolerable. Nevertheless, even if the network is in relaxed conditions (i.e. 25 × 104 M2M), the average delay is higher than 100ms.

RA delay(ms) RA delay(ms)

DAC B 200

150

100

50

0

25

26

27

28

Load(×104)

P IDonly 200

150

100

50

0

25

26

27

28

Load(×104)

Fig. 14: RA attempts estimation
VI. CONCLUSIONS
In this paper, we addressed the problem of heavy congested M2M networks, which exhibit a risk of synchronized access of M2M devices, as showed in the paper.
A direct consequence of devices’ synchronization is that an incremental increase of the number of M2M devices leads to either a signiﬁcant reduction of the number of successful RA and resources’ under-utilization, or to a congestion collapse, even when using an efﬁcient ACB mechanism.
To cope with this problem, we have proposed the DACB mechanism, a new access control strategy for M2M random accesses. DACB represents a novel implementation of ACB method that consists in: (i) an accurate estimation of the network load, (ii) a dynamic adjustment of the model’s parameters depending on the RA congestion level (e.g. the number of RA attempts that maximize the success access probability), and (iii) calculating the ACB probability according to the expected network’s overload situations.
The simulation results demonstrated the efﬁciency of the DACB algorithm in terms of reduced congestion probability and maximized success access probability, compared to existing approaches. In fact, DACB outperforms clearly both the classical ACB method and the PID-based one, which is known to be very efﬁcient. Additionally, the results showed a minimized number of RA abandons as well as reduced number of RA preambles’ re-transmissions, which is one of the most important factors impacting the M2M energy consumption. Furthermore, results proved the efﬁciency of the proposed estimation method, as we obtained estimated values near to the actual ones.
We direct, as future works, our research to M2M energy aspects. Indeed, it will be very interesting to know how much DACB can improve the MTC device’s battery consumption.

Fig. 13: Average random access delay

REFERENCES

To evaluate the performances of the estimation scheme, we

[1] 3GPP TR 23.888, Technical Speciﬁcation Group Services and System Aspects; System Improvements for Machine-Type Communications, V.11.0.0,

compare the actual number of RA attempts and the estimated

Septembre 2012.

[2] A. Biral, M. Centenaro, A. Zanella, L. Vangelista, M. Zorzi, The challenges of M2M massive access in wireless cellular networks, Digital Communications and Networks, Volume 1, Issue 1, Pages 1-19, 2015.
[3] Shaﬁq, M.Z., and al., A First Look at Cellular Machine-to-Machine Trafﬁc: Large Scale Measurement and Characterization, ACM SIGMETRICS Performance Evaluation Review, vol. 40, no. 1, 2012.
[4] R. Ratasuk, A. Prasad, L. Zexian, A. Ghosh, M. Uusitalo, Recent advancements in M2M communications in 4G networks and evolution towards 5G, Intelligence in Next Generation Networks (ICIN), 2015 18th International Conference on , vol., no., pp.52,57, 2015.
[5] Cisco VNI blog post, 2015 Cisco VNI Complete Forecast Update: Key Trends Include Mobility, M2M, and Multimedia Content.
[6] 3GPP TS 36.321, LTE; Evolved Universal Terrestrial Radio Access (EUTRA); Medium Access Control (MAC) protocol speciﬁcation, V.11.3.0 Release 11, July 2013.
[7] German Corrales Madueno, Nuno K. Pratas, Cedomir Stefanovic, Petar Popovski, Massive M2M Access with Reliability Guarantees in LTE Systems, IEEE ICC, 2015.
[8] 3GPP TR 37.868, RAN Improvements for Machine-type Communications, V.11.0.0, March 2013.
[9] A. Ksentini, Y. Hadjadj-Aoul, T. Taleb, Cellular-based machine-tomachine: overload control,” IEEE Network, vol.26, no.6, pp.54,60, November 2012.
[10] 3GPP TS 36.331 : Evolved Universal Terrestrial Radio Access (EUTRA); Radio Resource Control (RRC); Protocol speciﬁcation V.12.5.0 Release 10, April 2015.
[11] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Rubino G and Tabbane S, Multiple Access Class Barring factors Algorithm for M2M communications in LTE-Advanced Networks, ACM/MsWIM, 2015.
[12] Hongliang He, Qinghe Du, Houbing Song, Wanyu Li, Yichen Wang, and Pinyi Ren, Trafﬁc-aware ACB scheme for massive access in machine-tomachine networks, IEEE ICC, 2015. 12
[13] Y. Pang, G. Lin and H. Wei, Context-aware Dynamic Resource Allocation for Cellular M2M Communications, Internet of things journal, 2015. 13
[14] Hongliang He, Pinyi Ren, Qinghe Du, Li Sun, Estimation Based Adaptive ACB Scheme for M2M Communications, Wireless Algorithms, Systems, and Applications book, pp 165-174, 2015.
[15] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Tabbane S and Viho C, A random access model for M2M communications in LTE-advanced mobile networks, Modeling and Simulation of Computer Networks and Systems, Elsevier, 2015.
[16] Astrom K.J., Hagglund T., Advanced PID Control, ISA-The Instrumentation, Systems, and Automation Society, ISBN 1556179421, 2006.

