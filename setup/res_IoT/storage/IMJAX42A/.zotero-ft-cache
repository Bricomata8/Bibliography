Dynamic adaptive access barring scheme for heavily congested M2M networks

Meriam Bouzouita

Yassine Hadjadj-Aoul

Nawel Zangar

University of Rennes 1, France University of Rennes 1, France Mediatron, SUP’COM, Tunisia

Mediatron, SUP’COM, Tunisia

yhadjadj@irisa.fr

mariem.bouzouita@supcom.tn

nawel.zangar@insat.rnu.tn

Gerardo Rubino

Sami Tabbane

INRIA Rennes, France

Mediatron, SUP’COM, Tunisia

Gerardo.Rubino@inria.fr Sami.Tabbane@insat.rnu.tn

ABSTRACT
The next mobile generation is planned to create a networked society, in which Machine-to-machine (M2M) communications are expected to play a key role in a plethora of domains and applications. The massive deployment of such devices may overwhelm the cellular network by imposing strong constraints on the Radio Access Network (RAN) because of the radio resources’ scarcity. As the base station cannot accurately get the exact number of M2M arrivals, it cannot really predict the overload status, which limits any control action. Consequently, a better estimation of this number would eﬃciently help to overcome the risk of congestion. In this paper, we proposed a novel ﬂuid model for M2M communications, which allows gaining an enhanced understanding of the dynamics of such systems. The provided analysis of the model was used to devise a new method to estimate accurately the number of M2M devices willing to connect as well as the number of random access attempts.We proposed, then, a novel implementation of the ACB process, which dynamically computes the ACB factor according to the network’s overload conditions while includes a corrective action adapting the controller action based on the mismatch existing between the computed and the targeted mean load. Compared to existing approaches, the simulation results show that the proposed algorithms allow improving considerably the estimation of the number of M2M devices’ arrivals, while outperforming existing techniques in terms of the number of abandons, the success and the collision probabilities, and the average access delay.
Keywords: M2M, Random access, ﬂuid model, Congestion avoidance.
1. INTRODUCTION
The next mobile generation, is planned to create a networked and smart society in which the Internet of Things
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee. Request permissions from permissions@acm.org. MSWiM’16 November 13-17, 2016, Malta. Copyright 2016 ACM 978-1-4503-3762-5/15/11 ...$15.00.

(IoT) will certainly play an important role [1]. Furthermore, the success of the forthcoming 5G standard is closely related to the eﬃcient support of such devices, and particularly machine-to-machine (M2M) communications, which represent a key component of the IoT paradigm[2][3].
M2M communications, which will probably reach 2 billion units by 2020 [4], are expected to generate an enormous amount of traﬃc from various types of applications and services, such as smart grid, smart metering, intelligent transportation system, environmental monitoring, public safety, eHealth, etc [5]. This induces a diversity in M2M applications’ requirements and traﬃc patterns, which make the handling of such devices even more complex. In fact, depending on their deployments, some applications are delay sensitive (e.g. eHealth, emergency situations) whilst others have strict requirements for low power consumption.
Owing to the massive deployment of M2M communications, in the near future, M2M devices may overwhelm the cellular network by causing congestion at both the Radio Access Network (RAN) and the Core Network (CN). Nonetheless, the RAN constitutes the most claiming part because of the radio resources’ scarcity. In this way, new network access approaches are required to anticipate the congestion and the system overload by managing more eﬃciently the simultaneous Random Access (RA) of M2M devices, and hence tackling their explosive growth. This constitutes our main focus in this paper.
The congestion control problem due to competing M2M devices was considered very early as one of the priorities of the 3GPP. Indeed, the 3GPP standardizing body proposed many solutions to tackle such problem, including the Access Class Barring (ACB) concept [6], which is considered as one of the most eﬃcient ways to tackle these types of congestion [7]. These works have been precursors of many other highly eﬀective solutions, which succeeded in avoiding the congestion of the access network [8], [9]. However, these proposals present many limits when dealing with baseline congestion. Indeed, in such a condition, these techniques fail to avoid a synchronized access of M2M devices, which may results in some cases to a congestion collapse. Substantively, the base station cannot accurately estimate the number of M2M devices willing to connect and, hence, cannot predict the overload status. Consequently, a better estimation of this number would eﬃciently help to treat the congestion trouble.
The main issue addressed in this article is related to improving channel access for M2M communications in LTE-A

networks and beyond. To face the identiﬁed challenges, we

From a large set of research’s interests, a particular fo-

proposed a mechanism to better exploit channel utilization, a

cus was given to the dynamic determination of the ACB

novel access protocol that adapts dynamically the access at- factor according to the collision level [6]. However, most

tempts of M2M devices according to the network congestion’s

of the proposed schemes turn out to be ineﬃcient in case

level. Hence, we propose a new approach to estimate the

of heavily congested M2M networks. In fact, in such a

RA attempts under the developed dynamic access algorithm, situation, the eNodeB cannot determine exactly the num-

based on M2M new arrivals and backlogged equipment’s

ber of devices attempting the ACB check nor the number

estimation. A corrective action to the Proportional Inte- of devices attempting the random access. This may lead

gral Derivative (PID)[10][11] controller was added to better

to an inadequate action of the proposed schemes (i.e. too

mismatch the estimated and the targeted payload.

small or too high ACB barring factor), which may end up

The remainder of this paper is organized as follows. Sec- with a congestion collapse or resources’ under-utilization. In

tion 2 gives an overview of the congestion issue in M2M

this way, many methods were proposed in the literature to

networks followed by a brief description of the ACB mech- estimate accurately the number of devices attempting the ac-

anism. Section 3 is dedicated to describe a ﬂuid model for

cess [15][16][17][18]. The main idea behind these approaches

M2M networks and to study the steady-state performance

is to estimate the number of contending devices based on

of such dynamic system. Section 4 portrays our new adap- the average status of the preambles. The resulted estimation

tive access protocol in addition to the proposed estimation

is then used to adjust properly the ACB factor or even to

algorithm. Section 5 is dedicated to the simulation setup

deactivate it as proposed in [16].

and the analysis of our proposition. Finally, conclusions

In the present paper, we propose a new comprehensive

are presented in Section 6 with a summary recapping the

approach to adapt dynamically the ACB factor using an

main advantages and achievements of the proposed access

adaptive version of the PID [10][11] controller and a more

protocol.

accurate estimation of the number of random access attempts

thanks to a continuous observation of the system’s input (i.e.

2.

OVERVIEW OF THE CONGESTION PROB-

ACB factor) and the estimated outputs. In the following, we will propose a model of the access

LEM IN M2M NETWORKS

scheme described previously.

Alleviating congestion situations is a major concern in view

of the expected massive deployment of M2M devices in the future 5G standard. Indeed, the 3GPP stepped up its eﬀorts

3. A MODEL FOR M2M NETWORKS

to introduce several overload resolution mechanisms targeting diﬀerent types of congestion in order to tackle the explosive

3.1 A simple ﬂuid model

growth of simultaneous M2M connections [12]. Hence, several PRACH overload resolution methods were deﬁned to improve the support of such devices in LTE-Advanced networks [7].
To meet the performance requirements under excessive loads while avoiding useless connections’ attempts of M2M devices, the ACB technique was adopted to deal with the associated challenges.
Using the ACB mechanism [6], the M2M devices start the RA process with a probability p, called the ACB factor, which should reﬂect the congestion situation. The devices that failed to access are backlogged during a random time, called the Tbarring, before they can retry again the ACB check. The Tbarring is given by the following equation:

Having described brieﬂy how M2M devices access the mobile networks, we now direct our focus on modeling the whole system using a simple ﬂuid model, described above.
Note that, for the sake of simpliﬁcation, the model represented in Fig. 1 does not consider the case where the M2M devices reach the maximal number of attempts. This phenomenon should be avoided in a properly dimensioned or controlled system. Indeed, an eﬃcient controller should minimize the number of re-attempts, whatever the number of terminals, to maximize the resources utilization. This can be clearly observed that the proposed approaches presents only few abandons, in the performance evaluation section1.

Tbarring = (0.7 + 0.6 × q) × ac-BarringTime
where q represents a random number, in the interval [0, 1], generated by the device after a failed ACB check, and the ac-BarringTime represents a ﬁxed duration broadcasted by the eNodeB.
Each device having succeeded in the ACB process may attempt the RA by selecting randomly one preamble from the total number of available preambles N , which is a constant belonging to the interval [4, 64] [13]. If this preamble is not chosen by any other equipment, the eNodeB indicates a successful preamble transmission, and consequently, the device passes correctly the ﬁrst RA step. Otherwise, the RA attempt fails and the M2M equipment goes to a waiting state during a backoﬀ time [14]. When the latter expires, the device reattempts the RA.
Note that, when reaching the maximum number of attempts Rmax, the device abandons the transmission [14]. It may restart the access later from the beginning.

λ

x1

px1

x2

qNx2 −1 x2

µ1 x1,L

(1 − p)x1 µ2x2,L

1 − qNx2−1 x2

x1,L

x2,L

Figure 1: System model

The following quantities are used to capture the M2M devices behavior:
1This will be a part of a future work to consider the dynamics related to M2M devices abandoning the system.

x1(t) the number of backlogged M2M devices at time t;

x1,L(t) the number of blocked M2M devices after failed ACB check at time t;

x2(t) the number of M2M devices passing the ACB check and waiting to attempt the RA at time t;

x2,L(t) the number of blocked M2M devices after failed RA attempts at time t;

λ

the arrival rate of M2M devices;

µ1

the rate of ACB re-attempts;

µ2

the rate of RA re-attempts;

p

the ACB factor.

When attempting the random access, the M2M devices contend for the N available preambles. In each RACH opportunity, these preambles are split into successful (i.e. chosen by only one device), collided (i.e. chosen by two or more devices) and idle (i.e. selected by none of the devices) preambles. In the following, we recall the average values of these quantities that we determined in [8]. These quantities will be used in the proposed model and algorithms.
Let’s deﬁne qN = 1 − 1/N . The average number of successful preambles NS, during the RACH opportunities is given as follows:

NS = qNx2−1x2

(1)

The average number of idle preambles is given by the following equation:

NI = N qNx2

(2)

From (1) and (2), we obtain the expected number of failed preambles NF :

NF = N − (NS + NI ) .

(3)

Since the number of units considered in these systems is relatively high, we will use a ﬂuid model (continuous state variables), that has the beneﬁt of simplicity. In the sequel we will describe the dynamics that deﬁne the evolution of the four state variables x1, x1,L, x2 and x2,L (all functions of time) based on the model described in Fig. 1.
The system’s dynamics is described by the following system of diﬀerential equations:

dx1 dt

= λ − x1 + µ1x1,L,

dx2 dt

= px1 + µ2x2,L − x2,

dx1,L dt

= (1 − p)x1 − µ1x1,L,

dx2,L = dt

1 − qNx2−1 x2 − µ2x2,L.

The considered parameters are the following: N with 4 ≤ N ≤ 64, λ > 0, p with 0 < p < 1, µ1 > 0, µ2 > 0 along with the obvious constraint that x1(t), x1,L(t), x2(t) and x2,L(t) should be non-negative.

3.2 Steady-state performance analysis
To study the steady-state performance of our system, we replace the derivatives by 0. We obtain the equations for

ﬁnding the stationary points of the dynamical system:

0 = λ − x¯1 + µ1x¯1,L,

(4)

0 = px¯1 + µ2x¯2,L − x¯2,

(5)

0 = (1 − p)x¯1 − µ1x¯1,L,

(6)

0 = 1 − qNx¯2−1 x¯2 − µ2x¯2,L.

(7)

From (4) and (6), we obtain

λ

x¯1

=

. p

Replacing the value of x¯1 in (4), we have

1−p λ

x¯1,L =

p

. µ1

From (5), µ2x¯2,L = x¯2 − px¯1, and from (7), µ2x¯2,L = 1 − qNx¯2−1 x¯2. Eliminating µ2x¯2,L and using the obtained expression of x¯1, we have

λ x¯2 − p p =

1 − qNx¯2−1

x¯2,

leading to the equation

x¯2qNx¯2−1 = λ.

(8)

The analysis of this nonlinear equation is a bit out of the
focus of the paper, but it is straightforward. We provide a
short summary here following a direct approach, avoiding
the classical use of the Lambert W function deﬁned on any complex number z by W (z) = w ⇐⇒ z = wew [19].
Deﬁne the function f by means of f (x) = xqx−1 for x ≥ 0,
where 0 < q < 1. We have f (0) = f (∞) = 0 and f (x) = qx−1(1 + x ln q), giving a maximum at x = x∗ = −1/ ln q,
whose value is M = −1/(eq ln q). This already gives us the
stability condition of the “right side” of the model (the “left
side”, variables x1 and x1,L, is always stable): λ ≤ M , if we use a generic q in the model, or λ ≤ −1/(eqN ln qN ) for our speciﬁc value qN = 1 − 1/N . If λ < M then we have two solutions to the equation, say ra and rb, with ra < x∗ < rb, where ra leads to stability and rb to instability. Knowing that 0 < ra < x∗ allows to easily ﬁnd ra numerically, for instance using a Newton scheme.

4. DYNAMIC ACB FOR HEAVILY OVERLOADED NETWORKS
In this section, we proposed a comprehensive solution, which consists in the two following phases. The ﬁrst phase allows estimating accurately the states’ space variables (i.e. x1 and x2) based on the mathematical model developed in the previous section. These variables are used, then, in the second phase to calculate dynamically the ACB factor using an adapted PID controller for an optimized resources management.
In contrast with existing approaches, the enhancements we suggest, in this paper, allow a more accurate estimation of the number of M2M devices attempting the random access through an iterative convergence of the estimates to the real values for an improved resources’ management.
4.1 An accurate estimation of the states’ space variables
In realistic use cases, the eNodeB is unaware of the devices present in the states x1 and x2, as no connection is established

with them yet. To remedy this situation, we propose, in the
following, a methodology allowing to estimate the number of
devices in these two states (see Alg. 1 for more details).
For the sake of simplicity we are referring here by NS, NI and NF to the average values calculated during 1 second (i.e. 100 RACH opportunities). The values NS∗, NI∗, and NF∗ represent the values obtained for the optimal x2 (i.e. x∗2).

Algorithm 1 States’ estimation

1: global: xˆ1, xˆ2, x¯2, x∗2, NS , NS∗, NF , NI , NI∗, Pacb 2:

3: function x2Estimate(n)

4: require: δ, η, α1 ∈ [0, 1], α2 > 1

5: x2,min[n] ← NS [n] + 2NF [n]

6: if NI [n] = 0 then

7:

x2,idle[n]

←

ln(

NI [n] N

)

ln qN

8:

x˜2[n] ← max(x2,min[n], x2,idle[n])

9: else

10:

if NS[n] > 20 then

11:

NS[n] = 19

12:

x2,success [n]

←

W (qN ln qN NS [n]) ln qN

13:

x˜2[n] ← max(x2,min[n], x2,success[n])

14: e[n] ← e[n − 1] + δ(x∗2 − x˜2[n])

15: x¯2 ← (1 − η)x¯2 + ηx˜2[n]

16: if NS > NS∗ then

17:

NS = NS∗

18: 19:

correction ← −N NI,min ← α1NI∗

NS −NS∗ NS∗

20:

NI,max ← α2NI∗

21: if NI ≤ NI,min then

22:

return xˆ2[n] ← x¯2 + e[n] + correction

23: else

24:

if NI ≥ NI,max then

25:

return xˆ2[n] ← x¯2 + e[n] − correction

26:

else

27:

return xˆ2[n] ← x¯2 + e[n]

28:

29: function x1Estimate(n) 30: require: = 10−6

31: if Pacb[n−1] < then

32:

return xˆ1[n] = xˆ1[n − 1]

33:

xˆ1[n] ←

xˆ2[n]−(xˆ2[n−1]−NS [n]) Pacb [n−1]

34: return xˆ1[n] > 0?xˆ1[n] : xˆ1[n − 1]

During each RACH opportunity n, the eNodeB calculates the number of successful preambles NS[n], the idle ones NI [n] and the collided ones NF [n]. Given that the number of successful preambles is also equal to the expected number of devices accomplishing the RA process, and given that a failed preamble is chosen by at least two M2M devices, one can deduce the minimal x2 value (i.e. x2,min), as expressed in line 5. In presence of at least one idle preamble (i.e. NI = 0), the x2 estimate, denoted by x2,idle, is obtained using the solution of equation (2). Otherwise, it is estimated (i.e. x2,success) using the solution of equation (1) with the constraint that NS[n] <= 19 in order to guarantee a real solution of the obtained Lambert W function [19], which is analyzed in the previous section (see 3.2). This will allow calculating the value of x˜2 and its moving average x¯2. Therefore, the mismatch existing between x˜2 and the optimal value x∗2 can

be computed to correct the value of xˆ2. Note that a corrective action is added when the average
number of idle preambles NI during the last second is bigger or smaller than predeﬁned threshold.
Once x2 estimation is accomplished, the eNodeB can use xˆ2 and NS to estimate x1 according to the code in line 33.
4.2 Adaptive ACB calculation
In this subsection, we will describe in details the proposed adaptive ACB algorithm, named DACB, which is performed at each RACH opportunity and illustrated in Alg. 2.

Algorithm 2 Dynamic ACB calculation (DACB)

1: global: xˆ1, xˆ2, x¯2, xr2ef, x∗2 2:

3: function refUpdate(n) 4: require: θ, β ∈ [0, 1], α > 1

5: x¯2 ← (1 − θ)x¯2 + θxˆ2[n]

6: if x¯2 > αx∗2 then

7:

xr2ef[n] ← xr2ef[n − 1] − 1

8: else

9:

if x¯2 < βx∗2 then

10:

xr2ef[n] ← xr2ef[n − 1] + 1

11: xr2ef[n] ← min max xr2ef[n], 0 , x∗2

12:

13: procedure DACB
14: n ← 1 15: x∗2 ← N 16: loop:

17: xˆ2[n] ← x2Estimate(n)

18: xˆ1[n] ← x1Estimate(n)

19: refUpdate(n)

20: if (x¯2[n] ≤ x∗2) and (xˆ1[n] = NaN) then

21:

Pacb[n]

←

xr2ef [n] xˆ1 [n]

22: else

23:

e[n] ← xr2ef[n] − xˆ2[n]

n

24:

Pacb[n] ← kpe[n] + ki e[k] + kd(e[n] − e[n − 1])

k=0

25: Pacb[n] ← min (max (Pacb[n], 0) , 1) 26: n ← n + 1

27: goto loop

In the ﬁrst phase of the DACB algorithm, the eNodeB adjusts dynamically the set point xr2ef according to the overload situation. The main idea here is to compute the moving
average value of the estimate xˆ2 and to check if the value is bigger than the optimal value x∗2 (i.e. too much M2M devices in the state x2) or smaller than it (i.e. too few M2M devices in the state x2). To provide more stability, an action is taken only when the average is bigger or small than predeﬁned
thresholds. Thus, when the average value is considered as too
big with a risk of congestion, the controller action reinforced by reducing the targeted objective xr2ef, which enables blocking more devices from attempting the random access in the
subsequent step. Besides, when the average value is consid-
ered as too small with a risk of resources’ under-utilization,
the controller action is relaxed by increasing the targeted
objective, which enables accepting more devices. Note that we consider only values within the interval [0; x∗2].
Once the dynamic targeted load determined, the eNodeB
executes the second phase to generate the ACB factor at

step n. If the average of x2 is less than x∗2 at step n, Pacb in the next step, is computed using equation in line 21, based
on the estimation of xˆ1. Otherwise, the eNodeB applies a PID controller to make the total number of M2M devices x2, contending for RA, converges to the optimal value xr2ef determined at step n. As Pacb is a probability, we apply: min (max (Pacb, 0) , 1) in (line 25).
Both the dynamic adjustment of the set point and the
ACB factor generation are repeated in the following step (i.e.
next RACH opportunity).

5. PERFORMANCE EVALUATIONS

5.1 Simulations’ parameters
In this section, we evaluate the proposed solutions and highlight their technical beneﬁts. In order to evaluate the accuracy of the estimations’ and the eﬃciency of the dynamic ACB calculation’s algorithm, we built a discrete events’ simulator in C, which was validated in a previous study [8]. The developed simulator models the whole system described in section 3. Besides, we added the possibility for an M2M device to abandon the connection after reaching a maximal number of attempts Rmax.
We assume that there is one eNodeB and that M2M devices are activated according to a Poisson traﬃc model where interarrivals are exponentially distributed. We also adopt an RACH conﬁguration where one RACH opportunity occurs every 10ms with 54 preambles at each opportunity. The simulations’ parameters are summarized in Table 1. When an RACH trial is declared unsuccessful, MTC device can retry the RA after a backoﬀ time chosen uniformly between 0 and the backoﬀ parameter ﬁxed in the following table [14].

Table 1: Basic simulation parameters

Parameter
Simulation duration Number of preambles N x∗2 Rmax Backoﬀ parameter ac-BarringTime

Value
30s 54 54 10 20ms 4s

In the following, we performed a series of experiments. In the ﬁrst experiment, we evaluated both the estimation accuracy of the number of contending devices and the performance of the proposed adaptive controller as a function of the time. In the second set of experiments, we analyzed the accuracy of the estimation and the eﬃciency of the proposals for various rates.
5.2 Experiment 1
5.2.1 Controller efﬁciency
In Figure. 2, we represent the instantaneous and the mean number of RA attempts, as calculated in the previous section. In the simulation, we used an arrival rate following a Poisson process with an average arrival corresponding to 28 M2M devices per RACH opportunity (i.e. 10ms). It can be seen that even if the instantaneous values present large ﬂuctuations between 0 and 210, the average values remain close to the targeted value x∗2 = 54. The obtained average

along all the simulation is equal to x¯2 = 57.17. Let’s recall that having a number of devices around the optimal value guarantee an optimized usage of resources.

x2

200

x¯2 x∗2

150

# of RA attempts

100

50

0

0

5

10 15 20 25 30

Time(s)

Figure 2: Number of RA attempts as a function of time

Figure 3 illustrates the evolution of the targeted number of M2M devices in state x2 (i.e. xr2ef) as a function of time. It can be easily seen that the set-point varies dynamically depending upon the overload situations, which demonstrates the robustness of DACB algorithm. Indeed, at the beginning of the simulation the number of devices in x2 is moderated, which keep the targeted value high. However, when the accumulated number of devices starts to be very important, the set-points decreases. Thus, it corresponds to the peak number of devices in Fig. 2, the smallest value of the setpoint, as it can be seen in Fig. 3.

Targeted # of M2M devices

50

xr2ef

40

30

20

10

0

0

5

10 15 20 25 30

Time(s)

Figure 3: Targeted number of M2M devices as a function of time
Another way to test the eﬃciency of our proposed algorithm can be reached by computing the number of devices withdrawal (i.e. after reaching the maximum number of RA re-transmissions Rmax). As illustrated in Figure 4, we can

easily remark that the number of abandons is very small. It correspond, indeed, to an average number of 0.23 abandons per second, which was one of the objectives of our proposed solution. It can be noted that the number is at its maximum when the number of devices is very huge (see Fig. 2).
# of Abandons
15
10

ﬁgure that the behaviour of our estimation scheme clearly outperforms MCSA-OE scheme [20]. In fact, we obtained an average deviation of 9.95% against 30.85% in case of MCSA-OE, which presents more oscillations and many peaks exceeding 50%.

(a)

250

DACB

200

150

Estimation’s error for x2 (%)

# of abandons

5

100

0

0

5

10 15 20 25 30

Time(s)

Figure 4: RA abandons

5.2.2 Estimation accuracy
Fig. 5 shows the gap existing between the real number x1 of devices attempting the ACB and the estimated one xˆ1. It can be seen that the estimation error is sometimes large even it presents an average value equal approximately to 23.72%, which can be considered as reasonable as no existing work, in our knowledge, proposes this estimation. Note that the estimation error is smaller than the estimation error for x2 when predicted in [20].

100

DACB

80

Estimation’s error for x1 (%)

60

40

20

0

0

5

10 15 20 25 30

Time(s)

Figure 5: Estimation error of the number of ACB attempts as a function of time
Fig. 6 shows the estimation error between the number x2 and the estimated one xˆ2. We can easily remark from the

50

0 0
250 200

5

10 15 20 25 30

Time(s)

(b)

MCSA-OE

Estimation’s error for x2 (%)

150

100

50

0

0

5

10 15 20 25 30

Time(s)

Figure 6: Estimation error of the number of RA attempts as a function of time

5.3 Experiment 2
5.3.1 Controller efﬁciency for various loads
To show the behaviour of our proposed DACB algorithm, we compare, in this sub-section, its performance with the PID controller for various network’s loads [10]. Let’s recall that the average load is represented here for a period of 10ms. We consider the following performance’s metrics: the average number of abandons, the average number of successful RA attempts and the average access delay. Here, we deﬁne the random access delay as the duration from the ﬁrst RA attempt until a successful access. The obtained average

Average number of successful RA attempts

values and the conﬁdence intervals were computed for 50

experiments for each load value.

DACB

Fig. 7 depicts the average number of abandons for diﬀerent

PID

network loads. In relaxed network conditions, the results

obtained with the PID controller are comparable to our

15

approach (i.e. DACB ) and remain acceptable. Indeed, in

such conditions there is no impact of the proposed adaptation

mechanism, and the two approaches have the same behavior.

When considering DACB, we note that this number remains

10

very close to 0 even if the network’s load increases, which

proves the eﬀectiveness and the stability of DACB. It can

also be seen that the number of abandons increases rapidly

when applying the PID controller.

5

Average number of abandons

DACB

6

PID

4

2

0 18 20 22 24 26 28 λ(#/10ms)
Figure 8: Evolution of the number of successful RA attempts vs λ
80
DACB PID
60

Average RA delay (ms)

0 18 20 22 24 26 28
λ(#/10ms)
Figure 7: Evolution of the number of abandons vs λ
Another way to test the performance improvements achieved by DACB can be reached by comparing the numbers of successful RA attempts in function of network loads. The obtained results are depicted in Fig. 8. We ﬁrst observe a very small variation, with DACB, of these numbers even if the number of M2M devices increases (≥ 16). Whereas, in case of the PID controller, the number of successful RA attempts decreases gradually and becomes intolerable (around 5 devices per RACH opportunity), when the network is undergoing a heavy congestion. Nevertheless, this number remains acceptable when the network is in relaxed conditions.
Another important performance parameter is the average random access delay illustrated in Fig. 9. If DACB method is applied, we observe that the average delays for diﬀerent loads are not much diﬀerent and don’t exceed 45ms. Whereas, with the PID controller, we can easily observe that the delays reach 80ms when the network is in heavily congested situations. This is a direct consequence of the important number of connections’ reattempts, which is also reﬂected by the number of abandons as it can be seen in Fig. 7.
5.3.2 Estimation accuracy for various loads
We compare, in this sub-section, the accuracy of the proposed scheme with the MCSA-OE algorithm [20] for various network’s loads.
Fig. 10 depicts the evolution of the estimation error for various loads. It can be clearly seen that when the network’s load increases, the average estimation error decreases and

40
20
0 18 20 22 24 26 28 λ(#/10ms)
Figure 9: Evolution of RA delay vs λ
then we obtain a more accurate estimation. In fact, when the network is more congested, x2 tends to reach stable values and then the estimation’s error is reduced. Nevertheless, the obtained average deviation remains very small near to 0 when a DACB algorithm is considered. However, this ﬂuctuation varies between 20% and 50% in case of MCSA-OE scheme.
Note that the error bars are obtained for 95% conﬁdence intervals, which show the accuracy of the obtained values.
6. CONCLUSIONS
In this paper, we have addressed the issue of heavily congested M2M networks, where a risk of congestion collapse appears. This congestion is mainly related to the estimation’s ﬂuctuations of the number of M2M arrivals. Indeed, even if an eﬃcient overload’s resolution controller is applied, its performance jointly depends on its estimation’s accuracy.
To treat more eﬃciently this trouble and improve the network’s performances, we have proposed a new access

x2 estimation’s average gap (%)

60
DACB MCSA − OE
40
20
0 18 20 22 24 26 28 λ(#/10ms)
Figure 10: Evolution of the estimation error of x2 vs λ
control strategy for M2M random accesses. We ﬁrst presented a simple ﬂuid model for M2M devices’ ac-
cesses. Then, based on this mathematical model, we designed a novel implementation of the ACB scheme, which combines three steps performed every RA opportunity: (i) an accurate estimation of the network status, (ii) a dynamic adjustment of the model’s parameters depending on the RA congestion level (e.g. the number of RA attempts that maximize the success access probability) and (iii) ﬁnally a dynamic ACB probability’s calculation according to the expected network’s overload situations.
The simulation results demonstrated the eﬃciency of our proposition as it allows reducing the congestion probability while maximizing the success access probability compared to existing approaches. In fact, our proposition outperforms clearly both the classical ACB method and the PID controller. Additionally, the results showed a reduced random access delay and also a reduced number of RA preambles’ re-transmissions which is one of the most important factors impacting the M2M energy consumption. Furthermore, results proved the eﬃciency of the proposed estimation method, as we obtained estimated values near to the actual ones.
As future works, we plan to direct our research to M2M energy aspects where it will be interesting to know the eﬃciency of our proposal regarding the improvement of M2M device’s battery consumption.
7. REFERENCES
[1] M. R. Palattella et al., ”Internet of Things in the 5G Era: Enablers, Architecture, and Business Models,” in IEEE Journal on Selected Areas in Communications, vol. 34, no. 3, pp. 510-527, March 2016.
[2] A. Biral, M. Centenaro, A. Zanella, L. Vangelista, M. Zorzi, The challenges of M2M massive access in wireless cellular networks, Digital Communications and Networks, Volume 1, Issue 1, Pages 1-19, 2015.
[3] R. Ratasuk, A. Prasad, L. Zexian, A. Ghosh, M. Uusitalo, Recent advancements in M2M communications in 4G networks and evolution towards 5G, Intelligence in Next Generation Networks (ICIN), 2015 18th International Conference on , vol., no., pp.52,57, 2015.

[4] Cisco VNI blog post, 2015 Cisco VNI Complete Forecast Update: Key Trends Include Mobility, M2M, and Multimedia Content.
[5] Shaﬁq, M.Z., and al., A First Look at Cellular Machine-to-Machine Traﬃc: Large Scale Measurement and Characterization, ACM SIGMETRICS Performance Evaluation Review, vol. 40, no. 1, 2012.
[6] 3GPP TS 36.331 : Evolved Universal Terrestrial Radio Access (E-UTRA); Radio Resource Control (RRC); Protocol speciﬁcation V.12.5.0 Release 10, April 2015.
[7] A. Ksentini, Y. Hadjadj-Aoul, T. Taleb, Cellular-based machine-to-machine: overload control,” IEEE Network, vol.26, no.6, pp.54,60, November 2012.
[8] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Rubino G and Tabbane S, Multiple Access Class Barring factors Algorithm for M2M communications in LTE-Advanced Networks, ACM/MSWIM, 2015.
[9] Arouk O., Ksentini A. and Taleb T., Group Paging-based Energy Saving for Massive MTC Accesses in LTE and Beyond Networks, IEEE Journal on Selected Areas in Communications, 2016.
[10] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Tabbane S and Viho C, A random access model for M2M communications in LTE-advanced mobile networks, Modeling and Simulation of Computer Networks and Systems, Elsevier, 2015.
[11] Astrom K.J., Hagglund T., Advanced PID Control, ISA-The Instrumentation, Systems, and Automation Society, ISBN 1556179421, 2006.
[12] 3GPP TR 37.868, RAN Improvements for Machine-type Communications, V.11.0.0, March 2013.
[13] 3GPP TS 36.331, Evolved Universal Terrestrial Radio Access (E-UTRA); Radio Resource Control (RRC), Protocol speciﬁcation V.12.5.0 Release 10, April 2015.
[14] 3GPP TS 36.321, LTE; Evolved Universal Terrestrial Radio Access (E-UTRA); Medium Access Control (MAC) protocol speciﬁcation, V.11.3.0 Release 11, July 2013.
[15] Hongliang He, Qinghe Du, Houbing Song, Wanyu Li, Yichen Wang, and Pinyi Ren, Traﬃc-aware ACB scheme for massive access in machine-to-machine networks, IEEE ICC, 2015.
[16] Y. Pang, G. Lin and H. Wei, Context-aware Dynamic Resource Allocation for Cellular M2M Communications, Internet of things journal, 2015.
[17] Hongliang He, Pinyi Ren, Qinghe Du, Li Sun, Estimation Based Adaptive ACB Scheme for M2M Communications, Wireless Algorithms, Systems, and Applications book, pp 165-174, 2015.
[18] German Corrales Madueno, Nuno K. Pratas, Cedomir Stefanovic, Petar Popovski, Massive M2M Access with Reliability Guarantees in LTE Systems, IEEE ICC, 2015.
[19] Corless, R., Gonnet, G., Hare, D., Jeﬀrey, D. and Knuth, D., On the Lambert W function, Advances in Computational Mathematics (Berlin, New York: Springer-Verlag) 5: 329–359, 1996.
[20] Arouk O. and Ksentini A., Multi-Channel Slotted Aloha Optimization for Machine-Type-Communication, ACM/MSWiM, 2014.

