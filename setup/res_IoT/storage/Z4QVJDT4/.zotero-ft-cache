http://1248.io
Interoperability on the Internet of Things
IfM 2pm Thu 7 Nov 2013

Today
• My background • M2M and IoT today • Lessons from TSB IoT Interop Demonstrator
– HyperCat: machine-discoverable APIs
• 1248 work in progress • Concluding thoughts

My background

Smart Energy Analytics

Smart Heating

Smart Appliances

Smart Home

Information
Analysis on how I & when I use energy to help understand my bill and advice on how to save.

• Heating • Cooling • Hot water

Remote Control • Appliances

• Lights • Locks • Security • Cameras

3

1248.io

M2M a precursor to IoT From vertical silos to horizontal IoT

SUPPLY CHAIN CONNECTED HOME TRANSPORT SERVICES
DRUG TRIALS SMART METERS

old
each provider delivered entire vertical

SUPPLY CHAIN CONNECTED TRAHNOSMPOE RT
SERVICES DRUG TRIALS
…

new
each provider delivers horizontal slice
UX ANALYTICS STORAGE SKYHOOKS DATA CAPTURE

TSB IoT Interoperability Demonstrator
• £6m project, 1 year • Goal: Break down the vertical M2M silos! • ~40 entities, most already with vertical end-to-end platforms
1248.io, Aimes Grid Services, AlertMe, Amey, ARM, Avanti, BalfourBeatty, BRE, British Telecom, Carillion, Critical Software, Ctrl-Shift, EDF, Enlight, ExplorerHQ, Flexeye, Guildford Borough Council, IBM, Intel, Intellisense.io, Intouch, LivingPlanIT, London City Airport, Merseyside Transport, Milligan Retail, Neul, Open Data Institute, Placr, SH&BA, Stakeholder Design, Traak, UK Highways Agency, Westminster City Council, Xively and the Universities of Birmingham, Cambridge, Lancaster, Surrey, UCL & Open University
• 8 clusters with diverse use-cases:
– Airports – Transport logistics – Schools and Campuses – Homes – Streets
Q1: Work out what problem we all share Q2: Implement Q3: Interop Q4: Serendipity

Everyone’s system architecture

You need data from several data services

All services support the same open standards https:

But each is organised differently
/customers/building/room/temperature /users/hubs/devices/ /localauthority/street/post

So for each service you have to…
• Read the documentation • Write code specific to that service

Everyone wants an ecosystem
If each application is specific to each service we call it “vertical-integration”.
To grow, we need to go “horizontal” and build an ecosystem where
all applications work with all services

…but Humans Don’t Scale
But adapting 10 Applications x 10 services = 100 pieces of code to write
(and imagine 1,000,000 Applications…)

Problem: Services not machine-browsable
An application cannot automatically discover a new service’s resources … so a human has to write code every time to enable it to do that.
I don’t know where to start

HyperCat: Makes services machine-browsable
What have you got?
This: X/Y/Z

HyperCat makes life easier for everyone
• Developers
– More data, quicker
• Service and Data providers
– More customers
• End-customers
– More choice
• Ecosystems and markets
– Removes barriers

HyperCat Developer 101

Where to get started
• Very simple spec (6 pages)
– http://www.openiot.org/apis
• Build on the open standards you already use
– HTTPS, RESTful, JSON
• Growing set of Catalogues to test against • Growing set of Tools for Client & Services
– Online, and as Code Libraries – See http://wiki.1248.io

How to use HyperCat
• GET http(s)://cat • Returns a catalogue:
– Tagged with metadata – Containing zero or more Resource items
• Each Resource item:
– Has an HREF pointer to the resource – Is tagged with metadata, so you can tell what it is
• The only defined metadata tag is for the catalogue itself
– Catalogues can contain catalogues
• Security model & basic search

HyperCat is not a panacea
• Applications and Services still have to agree on high level semantics
– i.e. if a service provides temperatures in °C then the application needs to understand °C
• What HyperCat does is enable an application to find those things that it does understand, in any service
– e.g. “show me all the resources which are in °C”

IoT work in progress…
All the things we kicked out of scope! • Data formats: (JSON certainly, and…)
– JSON-LD – SenML
• Ontologies (general, and more & more specific) • Registration • Standard Licenses • Key management • Monetisation models • “run-anywhere” Rules
– Rollups, triggers. Message-passing paradigm. Database-agnostic.

geras
1248 work in progress

geras

Geras

geras

• A live and historical streaming data service for IoT devices and hubs
• Built for scale (C* & RabbitMQ) • Interfaces:
– MQTT (streaming pubsub) – HTTP(S) – Supports pure HTML5 apps
• MQTT over Websockets • JSONP

Management Dash (live data) geras

Charts, rollups, windowing geras
• “Weekly minimum this month” • “Yearly average” • “Daily sum” • etc.

Data format is SenML geras
• Streaming JSON, in and out

Feeding data in
HTTP(S) POST (bulk SenML)
curl -XPOST -u "APIKEY:" https://geras.1248.io/series/foo --header "Content-Type: application/json“ -d@data.json
MQTT publish raw values
mosquitto_pub -v -u APIKEY -h geras.1248.io -t /foo/temperature -m "22.5"

geras

Reading data out
HTTP(S) GET (SenML)
curl -XGET -u "APIKEY:" https://geras.1248.io/series/foo/temperature? rollup=min&interval=1d

geras

curl -XGET -u "APIKEY:" https://geras.1248.io/series/foo?recursive

MQTT subscribe (SenML)
mosquitto_sub -v -u APIKEY -h geras.1248.io -t /foo/#

Discovery

geras

• Per-user HyperCat (SenML resources)
curl -XGET -u "APIKEY:" https://geras.1248.io/cat

• Public HyperCat of user shares
– Everything discoverable, optional keys for resources
curl -XGET http://geras.1248.io/publiccat

Metadata search and storage geras
• Per-stream searchable JSON properties
curl -XPOST -u "APIKEY:" -d@tags.json https://geras.1248.io/tags/foo/temperature
curl -XGET -u "APIKEY:“ https://geras.1248.io/tags/foo/temperature
curl -XGET -u "APIKEY:“ https://geras.1248.io/tagsearch?manufacturer=acme

Streaming graph UI (MQTT) geras

Sign-up as a beta tester! geras
https://geras.1248.io

Thoughts

ARM’s acquisition of Sensinode
(personal view)
• “Symmetry-breaking” • Sensinode literally wrote the book (& RFCs):
– 6LoWPAN (IPv6 over 802.15.4 radio) – CoAP (binary HTTP over UDP for constrained
environs) – DTLS (SSL for UDP, ECC/RSA + AES) – LWM2M (OMA device management standard,
bootstrap, registration, upgrade, telemetry)

From edge to centre

They’re the same thing. One day, almost all Open Data will come from IoT

Billions of tiny sensors

Very large databases

“Open”
Not (necessarily): • Free • Public
Means: • My service works with your service • We can swap providers without a lot of effort • Requires less trust

We may think we’re “the” service

But our true value is to the graph

http://1248.io
Interoperability on the Internet of Things

