Advanced Map Matching Technologies and Techniques for Pedestrian/Wheelchair Navigation
by Ming Ren B.E., Shenyang University of Technology, 1993 M.E., Chinese Institute of Academy, 1998
Submitted to the Graduate Faculty of School of Information Sciences in partial fulfillment
of the requirements for the degree of Doctor of Philosophy
University of Pittsburgh 2012

UNIVERSITY OF PITTSBURGH SCHOOL OF INFORMATION SCIENCES
This dissertation was presented by
Ming Ren It was defended on March. 16, 2012 and approved by Dr. Daqing He, Associate Professor, School of Information Sciences Dr. Paul Munro, Associate Professor, School of Information Sciences Dr. Prashant Krishnamurthy, Associate Professor, School of Information Sciences Dr. Linda Van Roosmalen, Adjunct Professor, School of Health and Rehabilitation Sciences Dissertation Advisor: Dr. Hassan Karimi, Associate Professor, School of Information Sciences
ii

Copyright © by Ming Ren 2012
iii

Advanced Map Matching Technologies and Techniques for Pedestrian/Wheelchair Navigation
Ming Ren, PhD University of Pittsburgh, 2012
Due to the constantly increasing technical advantages of mobile devices (such as smartphones), pedestrian/wheelchair navigation recently has achieved a high level of interest as one of smartphones’ potential mobile applications. While vehicle navigation systems have already reached a certain level of maturity, pedestrian/wheelchair navigation services are still in their infancy. By comparing vehicle navigation systems, a set of map matching requirements and challenges unique in pedestrian/wheelchair navigation is identified. To provide navigation assistance to pedestrians and wheelchair users, there is a need for the design and development of new map matching techniques.
The main goal of this research is to investigate and develop advanced map matching technologies and techniques particular for pedestrian/wheelchair navigation services. As the first step in map matching, an adaptive candidate segment selection algorithm is developed to efficiently find candidate segments. Furthermore, to narrow down the search for the correct segment, advanced mathematical models are applied. GPS-based chain-code map matching, Hidden Markov Model (HMM) map matching, and fuzzy-logic map matching algorithms are developed to estimate real-time location of users in pedestrian/wheelchair navigation systems/services. Nevertheless, GPS signal is not always available in areas with high-rise
iv

buildings and even when there is a signal, the accuracy may not be high enough for localization of pedestrians and wheelchair users on sidewalks. To overcome these shortcomings of GPS, multi-sensor integrated map matching algorithms are investigated and developed in this research. These algorithms include a movement pattern recognition algorithm, using accelerometer and compass data, and a vision-based positioning algorithm to fill in signal gaps in GPS positioning.
Experiments are conducted to evaluate the developed algorithms using real field test data (GPS coordinates and other sensors data). The experimental results show that the developed algorithms and the integrated sensors, i.e., a monocular visual odometry, a GPS, an accelerometer, and a compass, can provide high-quality and uninterrupted localization services in pedestrian/wheelchair navigation systems/services. The map matching techniques developed in this work can be applied to various pedestrian/wheelchair navigation applications, such as tracking senior citizens and children, or tourist service systems, and can be further utilized in building walking robots and automatic wheelchair navigation systems.
v

TABLE OF CONTENTS

TABLE OF CONTENTS ....................................................................................................... VI

LIST OF TABLES ...................................................................................................................X

LIST OF FIGURES ..............................................................................................................XII

PREFACE .......................................................................................................................... XVII

1.0

INTRODUCTION................................................................................................... 18

1.1

PROBLEM STATEMENT.............................................................................20

1.2

OVERVIEW OF MAP MATCHING IN PEDESTRIAN/WHEELCHAIR

NAVIGATION SYSTEMS/SERVICES.........................................................................23

1.3

MAP MATCHING CHALLENGES FOR PEDESTRIAN/WHEELCHAIR

NAVIGATION ................................................................................................................25

1.4

GOAL AND OBJECTIVES ...........................................................................29

1.5

CONTRIBUTIONS......................................................................................... 30

1.6

ORGANIZATION ..........................................................................................31

2.0

BACKGROUND AND RELATED WORK...........................................................32

2.1

SIDEWALK NETWORKS ............................................................................33

2.2

GEO-POSITIONING TECHNOLOGIES AND TECHNIQUES .................34

2.3

MAP MATCHING TECHNIQUES IN NAVIGATION SYSTEMS ............39

2.4

COMPUTER VISION IN NAVIGATION SYSTEMS..................................43

vi

2.5

MOBILE TECHNOLOGY IN NAVIGATION APPLICATIONS...............48

3.0

ADAPTIVE CANDIDATE SEGMENTS SELECTION ALGORITHM .............49

3.1

RELATED WORKS.......................................................................................50

3.2

SPATIAL NETWORK DATA REPRESENTATION...................................52

3.2.1 Hierarchical Clustering Tree......................................................................52

3.2.2 Clustering Road Segments..........................................................................53

3.3

ADAPTIVE SEARCHING ALGORITHM ...................................................56

3.3.1 A Binary Tree Structure from the Clustering Tree...................................56

3.3.2 Searching Algorithm...................................................................................58

3.3.3 Adaptive Search Window Set .....................................................................59

3.3.4 Adaptive Search Window Update ..............................................................60

3.4

PERFORMANCE ANALYSIS ......................................................................61

3.4.1 Datasets .......................................................................................................61

3.4.2 Construction Cost .......................................................................................61

3.4.3 Searching Cost ............................................................................................64

3.5

SUMMARY ..................................................................................................... 67

4.0

GPS-BASED MAP MATCHING TECHNIQUES ................................................68

4.1

CHAIN-CODE-BASED MAP MATCHING .................................................69

4.1.1 Eight-Direction Chain Code .......................................................................70

4.1.2 Chain-Code-based Map Matching Technique ...........................................73

4.1.3 Map Matching Process ...............................................................................78

4.1.4 Validation ....................................................................................................81

4.2

HMM-BASED MAP MATCHING ALGORITHM ......................................89

vii

4.2.1 Hidden Markov Model ...............................................................................90

4.2.2 A Hidden Markov Model for Map Matching ............................................92

4.2.3 HMM-based Map Matching Process..........................................................98

4.2.4 VALIDATION ..........................................................................................100

4.3

FUZZY-LOGIC-BASED MAP MATCHING ALGORITHM....................105

4.3.1 Fuzzy Logic Map Matching......................................................................105

4.3.2 Fuzzy Logic Map Matching Process ........................................................111

4.3.3 Validation ..................................................................................................115

4.4

COMPARISON............................................................................................. 119

5.0

MULTI-SENSOR INTEGRATED MAP MATCHING ALGORITHMS ..........124

5.1

CLIENT/SERVER ARCHITECTURES FOR MAP MATCHING............125

5.1.1 Lightweight Client/Heavyweight Server Architecture ............................125

5.1.2 Heavyweight Client/Lightweight Server Architecture ............................126

5.2

MOVEMENT PATTERN RECOGNITION ASSISTED MAP MATCHING

FOR PEDESTRIAN/WHEELCHAIR NAVIGATION...............................................128

5.2.1 Movement Pattern Recognition................................................................131

5.2.2 Movement Pattern Recognition Assisted Map Matching........................136

5.2.3 Experiments ..............................................................................................142

5.3

MULTI-SENSOR MAP MATCHING USING MONOCULAR VISUAL

ODOMETRY TECHNIQUE FOR PEDESTRIAN/WHHELCHAIR NAVIGATION

…………………………………………………………………………………152

5.3.1 Multi-Sensor Map Matching Algorithm Using Monocular Visual

Odometry ..............................................................................................................154

viii

5.3.2 Accelerometer-Assisted Monocular Visual Odometry for Motion

Estimation .............................................................................................................156

5.3.3 Integrated Map Matching.........................................................................170

5.3.4 Experiments and Analysis ........................................................................172

6.0

SUMMARY, CONCLUSIONS, CONTRIBUTIONS AND FUTURE RESEARCH

………………………………………………………………………………………186

6.1

SUMMARY ................................................................................................... 186

6.2

CONCLUSIONS ...........................................................................................187

6.3

CONTRIBUTION ......................................................................................... 189

6.4

FUTURE RESEARCH .................................................................................191

REFERENCES ...................................................................................................................... 193

ix

LIST OF TABLES
Table 2.1 Outdoor geo-positioning technologies potential for integration with GPS ..................35 Table 2.2. Comparison among performances of various map matching algorithms for vehicle navigation (after table in Quddus, 2007)....................................................................................42 Table 3.1. Tree features of three road networks .........................................................................63 Table 3.2. Statistics of the searching cost ..................................................................................66 Table 4.1. RBF neural network structure ...................................................................................84 Table 4.2. Map matching evaluation using RBF neural network ................................................84 Table 4.3. Linear-model map matching results ..........................................................................85 Table 4.4. Comparing the linear model and the non-linear model .............................................89 Table 4.5. Performance results ................................................................................................104 Table 4.6. Parameters of the fuzzy logic map matching ...........................................................107 Table 4.7. Rules of the fuzzy logic map matching ...................................................................108 Table 4.8. Performances of Experiments .................................................................................119 Table 4.9. Accuracy of GPS-based map matching algorithms for pedestrian/wheelchair navigation ...............................................................................................................................122 Table 4.10. Time performance of GPS-based map matching algorithms for pedestrian/wheelchair navigation ...............................................................................................................................122 Table 4.11. Overall comparison of three GPS-based map matching algorithms........................122
x

Table 5.1. Selected features.....................................................................................................135 Table 5.2. Classifier accuracy in identifying four different movement behaviors .....................145 Table 5.3. Confusion matrix of cross-validation on feature classification of movement behavior ............................................................................................................................................... 146 Table 5.4. Map matching performance (efficiency and accuracy) ............................................150 Table 5.5. Key points and matched points ...............................................................................176
xi

LIST OF FIGURES
Figure 1.1. Components of a navigation system.........................................................................19 Figure 1.2. Map matching process in pedestrian/wheelchair navigation systems ........................24 Figure 1.3. Sidewalk network (a) versus road network (b) in the same area ...............................26 Figure 1.4. No path in map database..........................................................................................27 Figure 1.5. Poor GPS signals (PDOP between 2.5 and 11.4)......................................................28 Figure 1.6. Comparison of GPS data from a professional GPS receiver (green) and a smartphone (red) ..........................................................................................................................................29 Figure 2.1. Example image with landmarks (Steinhoff et.al, 2007) ............................................44 Figure 3.1. An example of road network....................................................................................54 Figure 3.2. Corresponding matrix (20-by-20) ............................................................................55 Figure 3.3. Corresponding clustering tree ..................................................................................55 Figure 3.4. Data structure of a binary tree for segment clustering ..............................................57 Figure 3.5. A GPS point is located within the range of a Bounding Box ....................................57 Figure 3.6. The clustering tree of Pittsburgh campus .................................................................63 Figure 3.7. Query results changing with scenarios of moving object’s positions ........................65 Figure 3.8. A scenario on a large-scale map..............................................................................66 Figure 4.1. Perpendicular distance .............................................................................................68 Figure 4.2. 8-Direction chain code ............................................................................................70
xii

Figure 4.3. Digital map with GPS data ......................................................................................71 Figure 4.4. Example of chain-code-based map matching ...........................................................72 Figure 4.5. Linear model ...........................................................................................................74 Figure 4.6. Non-linear model ....................................................................................................75 Figure 4.7. RBF neural network for map matching evaluation ...................................................77 Figure 4.8. Flowchart of chain-code-based map-matching algorithm .........................................80 Figure 4.9. University of Pittsburgh’s campus ...........................................................................82 Figure 4.10. Training with RBF neural network ........................................................................83 Figure 4.11. Route 1 comparing map-matching result with GPS raw data on campus sidewalk map ...........................................................................................................................................86 Figure 4.12. Route 2 comparing map-matching result with GPS raw data on campus sidewalk map ...........................................................................................................................................87 Figure 4.13. Route 3 comparing map-matching result with GPS raw data on campus sidewalk map ...........................................................................................................................................88 Figure 4.14. Architecture of a HMM .........................................................................................91 Figure 4.15. The hidden Markov model for map matching ........................................................93 Figure 4.16. An example of GPS points overlaid on sidewalks on campus.................................97 Figure 4.17. An abstracted sidewalk network model..................................................................97 Figure 4.18. State transition matrix............................................................................................97 Figure 4.19. Map matching locations versus GPS positions .......................................................98 Figure 4.20. Flowchart of HMM-based map matching process ..................................................99 Figure 4.21. Route 1 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 101
xiii

Figure 4.22. Route 2 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 102 Figure 4.23. Route 3 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 103 Figure 4.24. Two inputs and the output in the fuzzy logic map matching .................................107 Figure 4.25. Examples of entering mode .................................................................................113 Figure 4.26. Flowchart of the fuzzy logic map matching process .............................................115 Figure 4.27. Route 1 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 116 Figure 4.28. Route 2 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 117 Figure 4.29. Route 3 comparing map-matching result with GPS raw data on campus sidewalk map ......................................................................................................................................... 118 Figure 4.30. Comparison among the three GPS-based map matching algorithms on one route.121 Figure 5.1. Lightweight client/ heavyweight server architecture for map matching ..................126 Figure 5.2. Heavyweight client/ lightweight server framework for map matching....................127 Figure 5.3. An example of GPS error in the scenario in which a user is stopped on a sidewalk. ............................................................................................................................................... 129 Figure 5.4. Overview of movement pattern recognition ...........................................................132 Figure 5.5. 3D accelerometer...................................................................................................133 Figure 5.6. Movement recognition decision tree ......................................................................136 Figure 5.7. Multi-sensor data integrated map matching...........................................................137
xiv

Figure 5.8. Accelerometer Data (acceleration in m2/s) Figure 5.9. Orientation Data (angle in degree) ....................................................................................................................................138 Figure 5.10. Timing diagram for synchronization ....................................................................139 Figure 5.11. Flowchart of the movement pattern-recognition-assisted map matching algorithm ............................................................................................................................................... 141 Figure 5.12. Motorola Backflip smartphone and the direction of its 3D accelerometer.............143 Figure 5.13. A sample of a log file recording GPS, accelerometer, and orientation data...........143 Figure 5.14. Route 1 comparing map matching result with GPS raw data ................................148 Figure 5.15. Route 2 comparing map matching result with GPS raw data ................................148 Figure 5.16. Route 3 comparing map matching result with GPS raw data ................................149 Figure 5.17. Flowchart of multi-sensor map matching algorithm using monocular visual odometry.................................................................................................................................155 Figure 5.18. Overview of visual odometry process ..................................................................156 Figure 5.19. Estimation of rotation matrix Ri−1,i and translational vector Ti−1,i in the motion between video frame Fri-1 and Fri ............................................................................................159 Figure 5.20. Frame-to-frame motion estimation.......................................................................166 Figure 5.21. Flowchart of vision-based positioning algorithm .................................................168 Figure 5.22. Scale adjustment.................................................................................................169 Figure 5.23. Flowchart of map matching approach ..................................................................171 Figure 5.24. A checkerboard to calibrate camera .....................................................................173 Figure 5.25. A sequence of images extracted from a video ......................................................174 Figure 5.26. SIFT features of a street view image ....................................................................175 Figure 5.27. Matched SIFT feature points ...............................................................................176
xv

Figure 5.28. Feature points in image 1 vs. Epipolar lines in image 2........................................177 Figure 5.29. Geo-positioning results by using visual odometry, top view (left) and street view (right) ...................................................................................................................................... 178 Figure 5.30. Map matching results overlaid on Google Maps ..................................................180 Figure 5.31. A sample log file to compare accuracy of GPS positions .....................................181 Figure 5.32. Comparison of GPS-based map matching results with multi-sensor map matching results .....................................................................................................................................184
xvi

PREFACE
I would like to express my deep gratitude to my advisor, Dr. Hassan Karimi, for all his support during my study to make my research meaningful. I greatly appreciate all the advice and suggestions from my dissertation committee members. I also would like to thank the faculty in the School of Information Sciences for their teaching and support.
I am happy to make friends during my study and thank my former and current colleagues at the Geoinformatics Laboratory for their help in my research. I specially thank Jon Walker for his help in my study.
I dedicate this dissertation to my parents to make them proud.
xvii

1.0 INTRODUCTION
Over the past two decades, due to the improved accuracy and increased affordability of the Global Positioning System (GPS), vehicle navigation systems have experienced a tremendous increase in demand. Vehicle navigation systems assist in keeping track of vehicles and finding desired paths to destinations. Motivated by the success of vehicle navigation systems and the ubiquity of GPS, building navigation systems and services for pedestrians and wheelchair users is the focus of this dissertation.
A navigation system consists of a map database, a user interface and several navigation functions including geo-positioning, map matching, routing and guidance. These components are briefly described below.
 Map Database. A map database contains the geometry, topology, and attributes of a map network (e.g., a road network or a sidewalk network).
 Geo-positioning. Geo-positioning is the process of measuring location updates of an object in real time. The measurement of positions can be through GPS or other sensors, such as Dead Reckoning (DR), which are subject to noise, interference from the environment, and other of errors.
 Map Matching. Map matching is the process of determining the current vehicle’s location on the road segment, using the geographic coordinates obtained by the geo-positioning component and the map database component. 18

 Routing and guidance. Routing computes user-preferred routes and guidance gives step-by-step instructions on how to travel on routes.
 User interface. A user interface accepts the user’s requests for directions. It responds with map-matched positions on the map and audible or displayed directions at the right time.
Figure 1.1 shows the interrelations among the components of a navigation system. Real-time position data are obtained through geo-positioning sensors, such as a GPS receiver. To accurately locate a vehicle, map matching determines the road segment on which the vehicle is and estimates a position on the segment. The user interface shows matched positions in real time. The routing component provides users with their desired routes to their destinations, taking user preferences into account.

Geo-Positioning

User Interface Map Matching

Routing, Planning& Guidance
Map DB

Figure 1.1. Components of a navigation system

Although vehicle navigation systems are currently the most popular, pedestrian/wheelchair navigation systems/services are gradually growing in prominence. With the progress of mobile technology, indoor/outdoor mobile systems (e.g., Nokia) are
19

being developed to provide location-based services, such as tour guidance for pedestrians (Fritz et al., 2006; Steinhoff et al., 2007). For wheelchair users, research has focused on developing “smart” wheelchairs that can provide navigation assistance mainly in indoor environments (Levine et al. 1999; Simpson et al. 2004). Outdoor wheelchair navigation systems/services are emerging as applications in their own right and are more challenging to develop than vehicle navigation systems are (Ding et. al. 2007). Inspired by the increasing demand for pedestrian/wheelchair navigation systems/services, this dissertation focuses on investigating and developing advanced map matching technologies and techniques to assist pedestrians and wheelchair users with mobility while outdoors.
1.1 PROBLEM STATEMENT
Vehicle navigation systems have been widely researched and developed over the past decades. However, with the rapid growth of the mobile device market, there is an increasing demand for pedestrian navigation services as mobile applications on mobile devices. As the populations of both disabled and senior citizens increase, there is a corresponding need to meet the travel demands of these groups so that they can maintain their quality of life. As a result, improvements in wheelchair navigation are required in order to provide wheelchair users with appropriate travel routes that can safely, accurately, and efficiently guide them to their destination. The backbone of these types of pedestrian/wheelchair services is a spatial database that represents the underlying
20

sidewalk network, which is used for tracking, routing, and guiding users to their destination.
Most of the commercially available pedestrian/wheelchair navigation systems/services were originally designed as vehicle navigation systems, and are now sold as with only minor modifications, such as the “Walking Navigation” feature on Google Maps for Mobile on Android, or extended pedestrian navigation functionality on some Nokia smartphones. These applications use road networks, like vehicle navigation systems, to provide navigation assistance to pedestrians and wheelchair users. However, road networks cannot provide pedestrians and wheelchair users with optimal services for several reasons. First, road networks typically include paths that are accessible to vehicles, but pedestrians and wheelchair users usually move or operate on sidewalks and do not travel on roads. Second, road networks do not contain information about footpaths, accessible areas for pedestrians, or connecting links to indoor environments. Third, map matching and routing on road networks do not provide the localization and routes that are of use for pedestrians and wheelchair users.
To provide appropriate navigation assistance to pedestrians/wheelchair users, pedestrian/wheelchair navigation services must support sidewalk networks (Kasemsuppakorn and Karimi, 2008). An analysis of the differences between pedestrian/wheelchair navigation and vehicle navigation reveals that map matching in pedestrian/wheelchair navigation services has unique requirements unfound in vehicle navigation systems.
First, while vehicle navigation systems track cars on roads, requiring road networks in the map database component, pedestrians/wheelchair navigation
21

systems/services track movement of users on sidewalks, requiring sidewalk networks. In general, sidewalk networks are much denser than road networks are in the same area, compounding the challenge of finding the correct sidewalk segment in the process of map matching.
Second, different from car driving, pedestrians walk or wheelchair users operate at lower speeds and their outdoor activities are usually closer to buildings. Under such circumstances, the Global Navigation Satellite System (GNSS), e.g., GPS, provides less accurate and reliable positioning information due to noise and multipath problem, compared to it received in vehicles. Further, in narrow streets (those with widths less than 10 m), GPS receivers (those available on mobile devices) have difficulty in determining the side of the street on which the user is travelling. Therefore, map matching has to deal with the positioning problem raised by GPS.
Third, pedestrians or wheelchairs are free to advance, stop and make turns at will on sidewalks. Since they have more flexibility than vehicles driven under traffic rules, people can always travel in both directions on sidewalks and in open areas, such as squares and parks. Rules for cars’ travelling on road that have been utilized as constraints in map matching for vehicle navigation must be replaced with new rules in map matching for pedestrian/wheelchair navigation according to pedestrian or wheelchair users movement behaviors.
Existing map matching techniques based on road networks in vehicle navigation systems do not take these characteristics unique to pedestrian/wheelchair navigation into account, thus they are not suitable for pedestrian/wheelchair navigation. For this, to provide appropriate navigation assistance, special designs and further customization of
22

map matching are required to meet the specific needs of both pedestrians and wheelchair users.
1.2 OVERVIEW OF MAP MATCHING IN PEDESTRIAN/WHEELCHAIR NAVIGATION SYSTEMS/SERVICES
In general, map matching algorithms integrate estimated locations, from positioning sensors such as GPS and DR, with a road network map to identify the correct link on which a vehicle is traveling and to determine the location of a vehicle on that link (Karimi et al. 2006; Quddus 2006; Ochieng et al. 2004). Map matching plays a crucial role in a navigation system whose logic is heavily dependent upon the characteristics of the underlying positioning sensors. The success of a navigation application mainly depends on the suitability of its positioning sensors and the map matching algorithm.
23

Sensor Data

Geo-Positioning

Analysis and

Topology, Links,

pre-processing Nodes

(Longitude, latitude)

Map Matching

Constraints

Digital Sidewalk Network Database

Link ID and Estimated Location
Link Identification and Position Estimation of the user on the Link

Historical Data

Figure 1.2. Map matching process in pedestrian/wheelchair navigation systems
Figure 1.2 highlights the map matching process in a pedestrian/wheelchair navigation system/service where a sidewalk map, instead of a road map, is used. The sidewalk network database includes sidewalk geometries, sidewalk topologies and relevant information for personal accessibility. Information such as sidewalk conditions (e.g., grade, steps, smoothness) and building properties (e.g., accessible entrance and elevators) are also needed. Geo-positioning data come from sensors, such as GPS, accelerometer, and compass sensors. Prior to map matching, a pre-processing task is performed on the sidewalk network database to prepare geometrical and topological information of sidewalk segments with appropriate attributes for map matching. The map
24

matching process incorporates geo-positioning data and pre-processed spatial data. Once a correct sidewalk segment is identified, each new positioning data is projected onto the segment to estimate a new position. Moreover, a user’s historical trajectory is used as a means to speed up the map matching process.
1.3 MAP MATCHING CHALLENGES FOR PEDESTRIAN/WHEELCHAIR NAVIGATION
Existing map matching algorithms are designed for vehicle navigation systems. Utilizing road networks, instead of sidewalk networks, for map matching does not appropriately address the navigation needs of pedestrians/wheelchair users. As shown in Figure 1.2, in addition to map data, geo-positioning techniques also play a role in map matching. Some existing map matching algorithms for vehicle navigation use other sensors, in addition to GPS, such as DR and gyroscope. Such sensors are not usually available in pedestrian/wheelchair navigation services. As a result, map matching algorithms that are based on the sensors that are only available on vehicles are not directly applicable for pedestrian/wheelchair navigation. Furthermore, existing solely-GPS-based map matching algorithms may work for pedestrian/wheelchair navigation only after considering those specific requirements discussed in Section 1.1. Analyzing the characteristics of pedestrian/wheelchair navigation and comparing them with those of vehicle navigation reveal the challenges that must be addressed in developing map matching algorithms for pedestrian/wheelchair navigation.
25

First, in a pedestrian/wheelchair navigation system/service, a sidewalk network is required, which exacerbates the map matching process. Since most roads in an urban area have sidewalks on both sides, a sidewalk network is much denser than its corresponding road network is. Determining the side of the road on which the pedestrian/wheelchair is moving by pedestrian/wheelchair navigation systems/services is a challenging task. Figure 1.3 compares the density of a sidewalk network and that of its corresponding road network.

a

b

Figure 1.3. Sidewalk network (a) versus road network (b) in the same area

Additionally, pedestrians and wheelchair users sometimes move on a random path rather than follow the sidewalk. This further compounds the map matching process. Figure 1.4 shows the trajectory of a user along a route with no corresponding sidewalk in the area’s map database.

26

A user moves on a random path without corresponding sidewalk in the database.
Figure 1.4. No path in map database
Second, GPS errors cause issues with change in location, time or weather, especially in dense urban areas, where high buildings, among other obstacles, block satellite signals. Since pedestrians and wheelchair users are on sidewalks close to buildings, the navigation system/service is more susceptible to GPS signal loss or signal degradation than vehicle navigation systems are. Figure 1.5 shows the problem caused by GPS errors in places with high-rise buildings. Position Dilution of Precision (PDOP), as a measure of overall uncertainty of a GPS position, represents quality of GPS signals. A PDOP value of 1 indicates a good satellite configuration and high-quality data; conversely, PDOP values above 8 are considered poor. The quality of the data decreases as the PDOP value increases. The PDOP of GPS positions, shown in Figure 1.5, ranges between 2.5 and 11.4 which are considered poor and very poor, respectively.
27

Figure 1.5. Poor GPS signals (PDOP between 2.5 and 11.4)
Moreover, GPS position fixes are less reliable at speeds of less than 3.0 m/s (Ochieng et al. 2004; Taylor et al. 2001), which are often the case with pedestrians and wheelchair users. At such a low speed, the uncertainty in positions could impede the derivation of heading based on displacement (Taylor et al. 2006).
Obviously, since geo-positioning only by GPS is insufficient to support navigation and tracking, there is a need for advanced map matching techniques and/or additional data from other sources. An alternative to geo-positioning by GPS is a multisensor map matching approach. Due to recent advances in computing and mobile device technologies, smartphones, like iPhones and Android phones, are growing in popularity. Sensors such as cameras, accelerometers, compasses, and gyroscopes in mobile phones can be employed by navigation systems. With these sensors, a multi-sensor map matching approach, using a smartphone as the platform, can provide a solution to seamless tracking in pedestrian/wheelchair navigation systems/services. However, consumer-grade GPS receivers built on smartphones cannot provide positioning data as good as professional-grade GPS receivers. Figure 1.6 shows a route collected both
28

through a professional-grade GPS receiver and through a consumer-grade GPS receiver on a smartphone. The green points represent data obtained through a professional-grade GPS receiver, and the red points are GPS data obtained through a smartphone.
Figure 1.6. Comparison of GPS data from a professional GPS receiver (green) and a smartphone (red)
In summary, map matching in pedestrian/wheelchair navigation systems/services is more complex and challenging than map matching in vehicle navigation systems is, primarily due to high density of sidewalk networks and poor GPS signals.
1.4 GOAL AND OBJECTIVES The overall goal of this research is to contribute to the realization of a fully functional pedestrian/wheelchair navigation system/service, by developing advanced map matching techniques and testing them on real sidewalk networks to validate their accuracy and performance. Such a navigation system/service will find applications in many areas including route guidance, tour guides, pedestrians/wheelchair user tracking and
29

monitoring, accident and emergency responses, and many more. To achieve this goal, the following objectives are set forth in this dissertation:
 To develop an efficient candidate segments selection algorithm.  To develop a number of map matching algorithms based on different techniques such
as fuzzy logic, chain code, temporal probabilistic reasoning, computer vision, and the integration of motion sensors with vision and GPS.  To validate the developed map matching algorithms using real-world field data.
1.5 CONTRIBUTIONS
This research contributes the following: 1. An adaptive candidate segments selection algorithm using a clustering technique; 2. A set of advanced GPS-based only map matching algorithms for pedestrian/wheelchair navigation systems/services; 3. Techniques based on accelerometer and compass data for recognizing a user’s movement pattern to assist map matching. 4. Advanced map matching techniques based on computer vision; 5. A multi-sensor map matching approach that provides seamless map matching services in a pedestrian/wheelchair navigation system/service. This is accomplished by integrating motion sensors, such as an accelerometer and a compass, with vision and GPS data.
30

1.6 ORGANIZATION
This dissertation is organized into six chapters. Chapter 1 states the motivation of this research, gives an overview of the challenges in this study, and states its goal, objectives and contributions.
Chapter 2 provides a background on pedestrian/wheelchair navigation systems/services. It also reviews the related literature on existing map matching techniques, computer vision techniques, relative geo-positioning techniques and mobile technology for navigation applications.
Chapter 3 presents an adaptive candidate segments selection algorithm to efficiently find a set of candidate segments as the first step in map matching.
Chapter 4 discusses three advanced map matching algorithms for pedestrian/wheelchair navigation systems/services: chain-code-based map matching algorithm, Hidden Markov Model (HMM)-based map matching algorithm, and fuzzy logic map matching algorithm.
Chapter 5 presents two multi-sensor map matching algorithms based on a smartphone client/server platform. A movement pattern, recognition assisted, map matching algorithm for improving efficiency and accuracy of map matching is discussed. Multi-sensor integrated map matching, using a monocular visual odometry technique to provide users with seamless positioning services, is presented.
Chapter 6 summarizes the research and its contributions, discusses conclusions, and provides recommendations for future research.
31

2.0 BACKGROUND AND RELATED WORK
The first vehicle navigation and positioning system was built by the electronics industry in 1975 (Krakiwsky, 1993). In the thirty years since then, the number of such systems has grown rapidly. Today, most of the leading car manufacturers have developed Global Navigation Satellite Systems (GNSS) based in-car navigation systems.
In general, a vehicle navigation system is a satellite navigation system designed for use in automobiles. It typically uses a navigation device to acquire position data and to locate the user on a road based on an embedded map database. Moreover, the system can provide users directions to other locations along the road network.
Similar to vehicle navigation systems, pedestrian navigation systems aim to provide continuous positioning and tracking of a mobile user with a certain positional accuracy and reliability. Not present in vehicle navigation systems, a very challenging task for pedestrian navigation is to navigate in urban environments with a mixed indoor and outdoor environment as pedestrians travel in spaces where existing location methods cannot work continuously in stand-alone mode (Retscher et al., 2006).
Research has also focused on high maneuverability and navigational intelligence for driving a wheelchair in domestic environments (Pires, 1997; Simpson et al., 2004). These wheelchairs are usually equipped with sensors to detect obstacles or environmental
32

markers for localization and navigation. While some work on outdoor wheelchair navigation using GPS and other sensors has been reported (Imamura et al. 2004, Wu et al. 2005), their contributions are on obstacle detection and autonomous navigation.
2.1 SIDEWALK NETWORKS
Sidewalk networks are required to provide connections among commercial, institutional, municipal, educational and recreational facilities in any geographic area. The sidewalk map database consists of geometrical, topological, and attribute information (Kasemsuppakorn and Karimi, 2007). Geometrical information contains the geospatial coordinates of sidewalk segments. Topological information represents the connectivity of sidewalk segments. Finally, attribute information in a sidewalk map contains the characteristics of sidewalk segments.
Sidewalks along roads normally have two sides. Compared to a road network, the sidewalk network in the same area must be generated with more geometrical and topological data; therefore, sidewalk networks are much denser than road networks. Moreover, since sidewalks are connected to entrances of buildings that pedestrians and wheelchair users need to access, accurate map matching on the correct side of a road segment is one of the most important tasks for map matching in pedestrians/wheelchair navigation. Due to the density of sidewalk networks, this is more complex than map matching on roads.
In addition to sidewalk segments along roads, any path that can be used by
33

pedestrians and wheelchair users should be included in the sidewalk map database. With this increased number of segments, branches and paths in the sidewalk network database, map matching algorithms have more challenges to overcome.
2.2 GEO-POSITIONING TECHNOLOGIES AND TECHNIQUES
The geo-positioning technologies used in vehicle navigation systems have undergone a major evolution over the last few years. Several geo-positioning techniques are being used in vehicle navigation systems or under research worldwide. These include GNSS, WiFi Positioning System (WPS), Cellular Positioning System (CPS) and Dead Reckoning (DR) (Rizos et al., 2005, LaMarca et al., 2008). For pedestrian navigation, in addition to sensors used in vehicle navigation systems, sensors such as a low-cost attitude sensor (digital compass) providing the orientation and heading of the person being navigated and a digital step counter or accelerometers for travel distance measurements can be employed (Retscher et al. 2006). Similarly, wheelchair navigation systems also use both absolute positioning techniques, like GPS, and relative positioning techniques, like DR, odometry and Inertial Navigation System (INS) (Anousaki et al., 2007; Venkatraman et al., 2009). Additionally, other sensors may also be utilized in outdoor wheelchair navigation, like ultra-sonar and laser, which are mainly used for avoiding obstacles, not for positioning.
Among all these geo-positioning technologies, satellite-positioning technologies (i.e., GNSS) are widely employed for outdoor navigation. GPS is the most popular GNSS. The achievable positional accuracies of GPS-based navigation systems range from a few
34

meters to 10 m in stand-alone mode and sub-meter to a few meters in differential mode, (e.g., Differential GPS or DGPS). However, GPS often suffers from availability and accuracy issues. Due to obstructions, a sufficient number of satellites may not be available for a short period of time. In urban areas, especially downtown areas, GPS signals could be very weak compared with those in rural areas. Accuracy of GPS data also can be influenced by weather and it may also fluctuate in the same location with over time.
Therefore, a solution to this problem is the addition of new sensors (i.e., multisensors) to bridge the absence of satellite signals. These additional sensors are critical for pedestrian/wheelchair navigation to obtain the necessary data for localization.
Possible outdoor geo-positioning technologies (see Rizos et al., 2005; Retscher et al., 2006), both absolute and relative, include GPS, WPS, CPS, Vision-based Positioning System (VPS), DR, and INS. The outdoor geo-positioning technologies that can be integrated with GPS are listed in Table 2.1.

Table 2.1 Outdoor geo-positioning technologies potential for integration with GPS

Outdoor geo-positioning
WPS (WiFi) CPS (Cellular) VPS (Vision-based)
DR (Odometry+INS)

Type

Accuracy

Absolute Absolute Absolute/Relative

High ±1 – 3 m
Low ± 50-100m
High

Relative

Low ±20 – 50 m per 1 km
35

Coverage limited good
middle distance –

WPS has grown rapidly in recent years and provides reasonable positional accuracies, but it suffers from limited signal coverage. WPS cannot locate targets when they are out of range of Wi-Fi signals. WPS accuracy also depends on Wi-Fi hotspot databases, which are built by fingerprinting wireless access points and must be constantly updated to keep up with Wi-Fi hotspot changes (LaMarca et al., 2008). Moreover, only a few commercial companies build databases of sufficient size to be used for Wi-Fi positioning. To build and maintain such a database requires considerable effort on the fingerprinting techniques which are not the focus of this dissertation; therefore, WPS is not chosen in this research.
In contrast to WPS, CPS has good signal coverage in urban areas, but it is less accurate. Kitching (2000) proposed integrating GPS and CPS at two levels: (a) at the measurement data level and (b) at the infrastructure level. Although the addition of cellular network Base Stations (BSs) can improve the horizontal accuracy of GPS positions, a number of infrastructure modifications are required to enable the cellular ranging measurements necessary in a positioning solution. Some commercial companies, like Qualcomm, are currently working on such integrations.
Integrating DR sensors, which are based on relative positioning techniques, is one alternative to overcome GPS errors in navigation systems/services. DR sensors, e.g., gyroscope and accelerometer, obtain the travelled distance from velocity and acceleration measurements and estimate direction of motion or heading and height difference.
A wheelchair's position can be estimated based on distances measured with odometer devices mounted on both wheels of the wheelchair. Accelerometers can provide relatively high position accuracy in a relatively short time. Due to its bias drift, the position error will grow over time. Another approach to measure a wheelchair’s movement is to use
36

wheel revolution counters (Lankton et al., 2005), which can determine the distance and time of travel by using seat occupancy sensor and tilt meter. A seat occupancy sensor reports when a user is seated in the wheelchair and the tilt meter measures the position of the wheelchair in angular degrees. However, in practice, problems such as wheel slippage and sidewalk surface condition contribute to poor accuracy. Also since localization of pedestrians or wheelchair users is based on horizontal distance, wheel revolution counters, which measure slope distance, are not considered in this dissertation.
For pedestrians, positioning data can come from accelerometer measurements based on an INS or from a step-counter and step-length estimator from a typical pedometer. Accelerometer measurements used for pedestrians have the same problem as in wheelchairs, i.e., positioning errors would be accumulated over time. Regarding pedestrian dead reckoning (PDR), the position accuracy in the pedometer/GPS integration relies mainly on estimations of the number of steps (counted by the accelerometer) and the length of the steps (calculated by the pedometer). For a pedometer to measure distance, the average step length of a user must be measured, which requires users to walk in a consistent pace. As PDR sensors are most effective when they are mounted on user’s feet, they are not suitable for wheelchair users. Considering these above issues of DR/INS for pedestrians and wheelchair users, DR/INS techniques are not chosen for pedestrian/wheelchair navigation in this dissertation.
On the other hand, accelerometers have been used as motion detectors (DeVaul &Dunn 2001), as well as, for body-position and posture sensing (Foerster, Smeja, & Fahrenberg 1999). Acceleration measurements from accelerometers can be used for activity recognition which is usually formulated as a signal processing and classification
37

problem (Ravi et al., 2005). Researchers in this area mainly focus on the identification of physical activities, such as walking, jogging, resting, standing, climbing, running, etc. Modeled from other research studies using accelerometer, compass, barometer, gyroscope, or combinations of them to identify pedestrian’s activities (i.e., walking, jogging and going upstairs or downstairs) (He et.al., 2009), this dissertation classifies user’s movement as patterns including no movement, walking, running and turning in order to identify the user’s movement behavior .
Computer vision is a growing research field (Koller et al., 1997; Chen and Shibasaki, 1999; Malis et al., 2002). Many “smart” wheelchairs use computer vision to help avoid obstacles and to explore indoor environments. Computer vision also can be used to compute distance and to estimate indoor and outdoor locations. Vision-based positioning (Henlich, 1997) is currently an active research topic (Chen and Shibasaki, 1999; Tardif et al., 2008). Feature extraction for positioning is not an easy task due to diversity of images and the wealth of information captured in images. Object recognition is one of the most difficult tasks in computer vision, which involves feature extraction, object clustering or classification and location/pose estimation, etc. However, compared to the aforementioned geo-positioning technologies, vision-based positioning technology has several advantages. First, vision-based positioning techniques are less influenced by the environment. This can help geo-positioning in areas without good GPS signals. Second, feature extraction using computer vision techniques in recent years has advanced and matured to guarantee high positional accuracy since feature extraction is critical in estimating motion in vision models. Finally, using a camera as a sensor for vision-based positioning is relatively inexpensive and practical. Realizing the advantages and
38

disadvantages of modern geo-positioning technologies and techniques, vision-based positioning is an attractive and emerging technology and thus, chosen for integration with GPS for map matching in this dissertation.
2.3 MAP MATCHING TECHNIQUES IN NAVIGATION SYSTEMS
Over the past two decades, many map matching algorithms have been proposed and evaluated in various scenarios. Most algorithms have been developed for vehicle navigation, a few for outdoor pedestrian navigation, but very few have focused on map matching for outdoor wheelchair navigation.
Current map matching algorithms can be divided into three main approaches, geometric map matching, topological map matching and advanced map matching (Quddus et al. 2007). Geometric map matching consists of point-to-point map matching, point-to-curve map matching and curve-to-curve map matching. Topological map matching utilizes both geometrical and topological data to make matching decisions. Advanced map matching applies models, such as probability theory, Kalman filter, and fuzzy logic, to either geometrical map matching or topological map matching, so the algorithm obtains better matching results with an increase in the complexity of the computations required.
In point-to-point map matching each newly obtained position is matched to the closest “node” or “shape point” of a road segment. While point-to-point map matching is both easy to implement and computationally fast, it is very sensitive to the geometry of
39

the road network. In point-to-curve map matching, each newly obtained position is matched to the closest “line segment” (curve) in the road network which is selected as the segment on which the vehicle is traveling. Although point-to-curve map matching can identify road segments more accurately than the point-to-point map matching, in dense networks, such as those for urban areas, it may not be able to produce good solutions. In curve-to-curve map matching, a vehicle’s trajectory (current travelling curve) is matched to road segments (network curves). Curve-to-curve map matching finds a matched road segment in three steps. In the first step, it constructs piecewise linear curves using candidate nodes through point-to-point map matching. In the second step, it constructs piecewise linear curves using the vehicle’s trajectory. In the third step, it calculates the distance between vehicle’s trajectory (step 2) and the curves corresponding to road segments (step 1). The road segment closest to the vehicle's trajectory is selected as the solution. Curve-to-curve map matching may not always produce a good solution because of outlier sensitivity and its reliance on point-to-point map matching (Ochieng et al. 2004).
Topological map matching (Meng et al. 2006; Quddus et al. 2003) takes into account both geometrical and topological information of the road network, as well as, history of GPS data. In topological map matching, the vehicle’s trajectory and topological features of the road (e.g., road turn, road curvature, and road connection) are matched. However, in some cases, topological map matching resorts to a post-processing mode to identify the correct road segment, and in other cases it can rely on a global matching strategy. Neither of these cases is suitable for real-time applications. Modifying the weighting scheme with additional criteria and parameters (i.e., vehicle’s speed, position relative to candidate road
40

segments, heading information (directly from GPS data), or position data obtained by integrating GPS and DR), will improve the performance of topological map matching.
Both geometrical and topological map matching algorithms are used as the basis for developing other advanced map matching algorithms. These advanced algorithms employ additional techniques to improve performance, such as a Kalman Filter or an Extended Kalman Filter, a flexible state-space model and a particle filter, and a fuzzy logic model (Quddus et al. 2007; Jagadeesh et al. 2004).
Quddus (2006, 2007) reported a comparison of performances of some map matching algorithms. These algorithms, as well as, two algorithms by Wu et al. (2007) and Liu et al. (2008) are presented in Table 2.2.
41

Table 2.2. Comparison among performances of various map matching algorithms for vehicle navigation (after table in Quddus, 2007)

Authors and year of publication
Kim et al. (2000) Kim and Kim (2001) White et al. (2000)
Pyo et al. (2001) Taylor et al. (2001) Bouju et al. (2002) Yang et al. (2003) Quddus et al. (2003) Syed and Cannon
(2004) Ochieng et al. (2004) Quddus et al. (2006b)

Navigation sensors
GPS GPS/DR
GPS GPS/DR GPS + Height
GPS GPS GPS/DR GPS/DR
GPS/DR GPS/DR

Test Environments
Suburban Urban and suburban
Suburban Urban and suburban
Suburban Suburban Suburban Urban and suburban Urban and suburban
Urban and suburban Urban and suburban

Correct Link Identification (%)
– – 85.8 88.8 – 91.7 96 88.6 92.8

Horizontal Accuracy (m)
10.6 (100%) 15m (100%)
– – 11.6 (95%) – – 18.1 (95%) –

98.1

9.1 (95%)

99.2

5.5 (95%)

Wu et al. (2007)

GPS

Urban

95.14

-

Liu et al. (2008)

GPS

Urban

99.4 in one case

-

The percentage of correct link identification ranges from 86% to 99%. The 2-D horizontal positional accuracy ranges from 18 m to 5.5 m (95%). It shows that many of these algorithms are based on utilizing multiple geo-positioning technologies in combination to obtain results with good accuracy. Quddus (2006) concluded that the fuzzy-logic map matching algorithm produces best results when GPS and DR are considered. It should be noted that since those map matching algorithms in Table 2 were tested on different areas with different road maps, the performance in accuracy is not
42

only a function of the geo-positioning technologies and the map matching algorithms they use, but also a function of the road networks used in the tests.
2.4 COMPUTER VISION IN NAVIGATION SYSTEMS
Previous work on vision-based navigation systems mainly consists of research on automatic driving systems (Castro et.al, 2001) and pedestrian navigation systems (Fritz et.al, 2006; Steinhoff et.al, 2007). Both systems use vision-based positioning techniques to provide either absolute or relative positioning. Absolute positioning computes the absolute position of an object by measuring distances from it to other known objects, like buildings, on the basis of recognizing known objects from images. Relative positioning calculates incremental positions by measuring movement or rotation/orientation step by step.
In pedestrian navigation systems, landmarks are used as references for absolute positioning. Given known locations of landmarks and estimated distances from users to those landmarks, pedestrian navigation systems can provide users with their absolute positions. For all known landmarks, locations of these landmarks are recorded in the database server in advance. An example scenario follows. A user on a tour captures pictures and sends them to the server. Once landmarks shown in the pictures are matched with the known landmarks in the server, the tour system can estimate the user’s location by retrieving the known landmark’s location in the database server and computing the distance from the user to the known landmarks. Figure 2.1 shows an example of user test case in a tour system from Steinhoff et.al (2007).
43

Figure 2.1. Example image with landmarks (Steinhoff et.al, 2007)
In this figure, the red points on the image are landmarks, which are used as reference points. When a user travels on a tour, his/her locations are computed and marked on the image, which are shown as query points. Steinhoff et.al (2007) concluded that the absolute positions obtained for the waypoints in the tour system were more accurate than GPS.
However, since mobile devices have limited computation capability and memory capacity, the tour system has to be built on a client/server network. In the client/server network, mobile devices communicate with the server using the wireless communication infrastructure. Using landmarks as distinctive features in the environment, images with landmarks are collected in advance and the extracted features, such as color or shape features, are stored in the server. On the client side, mobile users capture pictures and send them to the server. On the server side, the server responds to clients with their location by doing image retrieval. If a landmark in an image captured by a user is recognized, the server then can locate the user on the map near the known landmark’s
44

location. Further, the tour system can prompt the user through a set of directions to provide guidance on his/her tour.
By contrast, automatic driving systems are based on more sophisticated computer vision techniques. Computer vision is not only for positioning but also for avoiding obstacles and driving without people in control. Automatic driving systems use a relative positioning approach in their vision-based positioning. By tracking visual features observed from a moving camera, relative positioning uses the transformation relationship between an image coordinate system and a world coordinate system to estimate a vehicle’s location. To accomplish this, correspondence between image pairs or sequences must be obtained. Once an image set has been matched, bundle adjustment techniques can be used to compute the camera position, which is a surrogate for the vehicle’s position.
With the location of a starting point, the automatic driving system can also mark a vehicle by its absolute positions on a map by adding relative movements, which is called visual odometry in robotics (Levin et al., 2004, Olson et al., 2001). Tardif et al. (2008) presented a system for motion estimation of a vehicle using an omnidirectional camera which successfully performed high precision camera trajectory estimation in urban scenes with a large amount of clutter. The visual odometry algorithm in their paper mainly includes feature extraction and tracking, motion estimation, and structure computation. Other systems prefer to use two cameras as a pair to improve accuracy.
In both automatic driving systems and pedestrian navigation systems, feature extraction and object recognition are the key techniques. Global features and local features are two types of image features widely used in object recognition algorithms
45

(MOBIS 2005). Global features describe an image as a whole. They have the ability to generalize an entire object with a single feature vector. Local features, on the other hand, focus on image patches. They are computed at multiple points in an image and are consequently more robust to problems of occlusion and clutter (MOBIS 2005). Global features mainly consist of color, texture and shape. Color features capture the chrominance information in the image. For example, sky, ground, and vegetation can be classified by colors. Texture and shape represent illuminance. Textures are also often used as local features. For instance, local region features can be described by their scale and texture, e.g., the Scale-Invariant Feature Transform (SIFT) approach (Lowe, 1999). Boundaries of segmented regions or a boundary of an entire object are often used as shape features. Although global features are widely used in various applications, they are not suitable for applications with large changes of background, viewpoints, occlusion, resolution, lightening and environment (MOBIS 2005).
Lowe (2001) defined local features as having intermediate complexity, which means that they are distinctive enough to determine likely matches in a large database of features and are sufficiently local to be insensitive to clutter and occlusion. In general, local features extraction includes four steps:
1. Detect a set of local features in an image 2. Compute a description for each local feature 3. Use descriptors to find similar local structures in images for matching or an image
model for recognition 4. Verify object
46

Three basic types of local features each with several subtypes were identified in MOBIS (2005). These include interest points or “corners”, groups of line segments, and distinguished regions.
An “interest point” (Mikolajczyk et al., 2004) is a point in an image which has a welldefined position and can be robustly detected. An interest point can be a corner (Derpanis, 2004), an isolated point of local intensity maximum or minimum, line endings, or a point on a curve where the curvature is locally maximal. "Corner", "interest point" and “feature” are used somewhat interchangeably because corners are very stable features detectable even in the case of substantial viewpoint or photometric changes. They are also insensitive to clutter and occlusion. However, in order to gain distinctiveness of each individual corner feature, a small local neighborhood of the corner has to be considered (Mikolajczyk et al., 2004). Various computer vision algorithms have been proposed for feature extraction (Tuytelaars et al. 2008), such as Harris corner detector (Harris and Stephens, 1988), Harris-Affine (Mikolajczyk et.al., 2002, 2004) and Hessian-Affine detectors (Mikolajczyk et.al., 2002, 2004), SIFT(Lowe, 1999) and SURF(Bay, 2008).
Line segments are also often used as local image features. For example, Bay (2005) proposed line segments extracted by Canny edge detector. Shapiro (2002) presented a local feature called Consistent Line Cluster, defined as a collection of line segments grouped by colors, orientation and spatial features.
Distinguished regions are image elements (subsets of image pixels) that posses some distinguishing, stable property. Tuytelaars and Van Gool (2001) proposed Intensity Extrema-based Region Detector (IBR) that utilizes local extrema in the image intensity as anchor points. To improve the efficiency of this approach, Matas et al. (2002) presented
47

maximally stable extrema regions (MSER). Salient Regions and Scale-invariant Shape Features are other examples of the distinguished region approach. However, characteristics of objects in the images will ultimately determine what local features are chosen for matching or recognition.
Moreover, Deselaers et al. (2007) compared performances of a large variety of visual descriptors, both global and local features, which include Appearance-based Image Features, Color Histograms, Tamura Features, Global Texture Descriptor, Gabor Histogram, Gabor Vector, Invariant Feature Histograms, LF Patches, LF SIFT etc. One of their conclusions is that the global search of SIFT features extracted at Harris points performs best on the ZuBuD database (Shao 2003) which supports image-based building recognition.
2.5 MOBILE TECHNOLOGY IN NAVIGATION APPLICATIONS
Mobile phones have become a compelling platform for location-based services. Most current smart phones have a built-in global positioning system (GPS) receiver, cameras and low-cost MEMS motion sensors such as an accelerometer or a gyroscope, and/or a magnetometer. To achieve the goal that a pedestrian/wheelchair navigation system can continuously provide position and heading information on a digital map to guide users, the ubiquity, portability, good connectivity, the trend towards increased performance and inclusion of multi sensors of smart phones make them an ideal target device in this dissertation.
48

3.0 ADAPTIVE CANDIDATE SEGMENTS SELECTION ALGORITHM
Generally speaking, the first and most important step in map matching is to identify the correct segment on which an object is moving. Once the correct segment is determined, estimating the location of the object on that segment, though with a degree of uncertainty, is straightforward. Finding the correct segment requires that map matching algorithms identify a set of candidate segments based on a received GPS position and compare and analyze them to decide the most likely segment. Therefore, finding the set of candidate segments is imperative in map matching algorithms. This involves two types of situations. One is initializing a search range when the first position data is received and the other is updating the search window continuously for new positions. If the network is large, the search process is a time consuming operation. To identify the segment on which an object is moving not only demands correctness, but demands efficiency as well. Especially for a real-time navigation, the efficiency of finding the correct segment is even more important.
At this stage, our goal is to select a set of candidate segments close to the received GPS position. A widely used approach for determining the search window is to create a buffer centered at the GPS point and identify segments within this window as candidates. The search process is often based on an indexing technique which traverses a tree, for example an R- tree, down to its leaf nodes to find those segments within the coverage of
49

the search window. Since the topology of segments is very important to match GPS points, it is appropriate to consider those adjacent segments to GPS points as candidate segments. However, an indexing technique, like R- tree, does not consider topology of segments in constructing the tree. It is likely that adjacent segments are stored in different subtrees because the tree is constructed in a certain order (e.g., Hilbert order to build Hilbert R- tree). As a result, retrieval of candidate segments in a given network requires several passes through the R- tree. The searching complexity depends significantly on the distribution patterns of segments on the network. Furthermore, the same segment may be indexed more than once in the tree, requiring traversal of multiple paths. To avoid redundant searching in indexed spatial databases, in this chapter, we address the problem of efficiently finding candidate segments in spatial networks given GPS points of a moving object. The algorithm is a bottom-up approach that builds a segment-clustering tree to achieve both adaptability and efficiency in finding candidate segments.
3.1 RELATED WORKS
Current research on searching objects in spatial networks mainly employ indexing techniques with the goal of improving the efficiency of queries (Tele Atlas, 2008; Zhao et al, 2001). Spatial indexing for spatial and spatio-temporal queries has been an active research topic over the past decades. Since 1984 when R-tree by Guttman (1984) was presented, several indexing techniques have been developed for efficient spatial queries. Basic indexing techniques with variant structures such as R-tree, quadtree, B-tree, and
50

grid (Zhao, 1997) have been employed in different experiments focused on increased spatial query efficiency (Lin 2008; Chen et al. 2006; Kalashnikov et al. 2002).
R-tree was developed as an index structure for the efficient management of multidimensional and spatial data. Common operations performed on an R-tree include point location queries, range queries and nearest neighbor queries. In the map matching context, road or sidewalk segments can be represented as polygon objects and recorded on the leaf node level in an R-tree. Each leaf node holds two items for each data record. One is the bounding box of the object, and the other is information to place the object in the real world. Other nonleaf nodes of R-tree hold two items for each of its children: a bounding box of the child, and a pointer to the child.
A number of bulk loading approaches were developed to build R-trees (Bercken and Seeger, 2001). Top-down Greedy Split (TGS) and bottom-up approach are the two main methods (Alborzi. et al., 2007). A bottom-up approach builds an R-tree from leaf nodes level to upper level until it reaches the root node. In the lowest level, n data rectangles are sorted according to a predetermined sort order and m data rectangles are grouped in the upper level. The construction process is an iterative procedure from the bottom up to the root of R-tree. By contrast, a top-down approach first builds the higher levels of R-tree. The data rectangles are sorted according to a predetermined sort order and then split to build subtrees for the children recursively down to the final leaf nodes. Both approaches have to predetermine an order of objects stored in the tree. This causes a problem where the pre-ordered leaf nodes cannot represent adjacent objects in a spatial space appropriately. There is a lack of efficiency when spatially adjacent objects in Rtree are queried as a group, but were stored in multiple paths.
51

3.2 SPATIAL NETWORK DATA REPRESENTATION
3.2.1 Hierarchical Clustering Tree
Unlike indexing techniques, where objects are organized in a certain order, clustering techniques group objects by their characteristics. One important characteristic of spatial networks is the connectivity of segments that we use to cluster them.
In the family of clustering algorithms for different types of applications, the two most common branches are partitioning and hierarchical clustering algorithms (Huang, et al. 1998; Kotsiantis, 2004). Partitioning algorithms create a “flat” decomposition of a data set into a set of clusters. Examples of partitioning algorithms include k-means, kmedoids algorithms and density-based approaches. They generally need some input parameters that specify either the number of clusters that a user intends to find or a threshold for point density in clusters. However, it is difficult to determine what parameters are needed and what values they should have, as the parameters may not even exist.
In contrast, hierarchical clustering algorithms do not actually partition a data set into clusters but compute only a hierarchical representation of the data set reflecting its possible hierarchical clustering structure. Hierarchical clustering algorithms are more robust and less influenced by cluster shapes. Additionally, they are less sensitive to largely differing point densities of clusters, and they can represent nested clusters (Sander, Jörg et al. 2003). Since they partition without knowing the number of clusters (e.g., distribution of segments in a spatial network) ahead of time, hierarchical clustering
52

becomes an attractive alternative to spatial indexing techniques. The next section will describe clustering segments in a hierarchical clustering tree by using the average-linkage method.
3.2.2 Clustering Road Segments
In graph theory, a graph is formally represented by <V, E>, where V represents vertices in the graph and E represents edges in the graph. A general adjacency matrix in graph theory is A={aij}, where aij represents the weight (e.g., distance) between ith vertex and jth vertex. Consisting of intersections and segments, a spatial network can be represented as a graph where intersections are the vertices and segments are the edges. To better perform map matching for navigation applications, segments are clustered instead of intersections, because intersections only represent geometric information, whereas segments represent both geometrical and topological information.
To build the hierarchical-clustering tree of a spatial network, a new matrix A’ is introduced in this algorithm. Generalizing a spatial network as a non-directional graph clustered by distance, A’ becomes a symmetric matrix. To define A’, two matrices are first defined. One matrix represents the topology of a spatial network, denoted by T={ tij }, where tij is 0 if the ith and the jth vertices are on the same segment (this occurs when i and j represent the same vertex or i and j are the two vertices of a segment) and tij is 1 when the ith vertex is not directly connected to the jth vertex. The other matrix is an adjacency matrix A={aij}, which computes the Euclidian distance between any two vertices to represent the closeness of the intersections in geometric space. As a result, a new matrix A’= A.*T = { aij * tij } is defined to combine the two factors, geometrical
53

distance and topological relationship from matrices A and T. The weight of each element in the matrix A’ not only considers the distance between the vertices (i.e, intersections), but also considers the topology of the spatial network. Based on matrix A’, we build a hierarchical clustering tree from the bottom-up. Segments on the lowest level of this tree, as the smallest units in the structure, are grouped together based on the distance of each other and the clustering process is continued until the root of the tree is reached. For example, Figure 3.1 shows 10 segments, labeled by ID from 0 to 9. Every segment has two vertices, so 10 segments have twenty vertices, from 1 to 20. Matrix A’ therefore becomes a 20-by-20 matrix. Since it is symmetric, only it’s upper or lower triangluar (off diagonal) needs to be stored. The weights in the upper triangular and the lower triangular are all set as 0s shown in Figure 3.2.
Figure 3.1. An example of road network
54

Figure 3.2. Corresponding matrix (20-by-20)
Given the matrix A’, a hierarchical clustering tree is built using the averagelinkage clustering method. The average linkage clustering is based on measuring the proximity between two groups of objects. Here we use the average distance between all pairs of objects in cluster r and cluster s as the measurement. Its definition is as follows:
(1) Where nr is the number of objects in cluster r and ns is the number of objects in cluster s, and xri is the ith object in cluster r, and xsj is the jth object in cluster s.

Segment Number

9 126 08 37 45

Figure 3.3. Corresponding clustering tree
55

After applying the average-linkage clustering method, Figure 3.3 shows how the hierarchical clustering tree is built from the matrix A’ in Figure 3.2. The clustering process starts from the bottom where average distances of two vertices on the same segment as a cluster are set to zero in A’. Segments are grouped together in an order that clusters those with closer distances until all the clusters are grouped together and the root is reached. The root of the clustering tree represents the entire spatial network as one group.
3.3 ADAPTIVE SEARCHING ALGORITHM
Corresponding to the built clustering tree, a binary tree structure is generated and an adaptive searching algorithm is designed correspondingly. To support map matching, searching for segment candidates is conducted on the binary tree. The search starts from the entire spatial network and stops if a group of segments is found with the required criterion. Given the binary search tree and GPS points, instead of fixing a search window size for candidate segments, grouped segments are dynamically obtained with changes of the geometric and topological relationship between the GPS point and segments.
3.3.1 A Binary Tree Structure from the Clustering Tree
Since each group only joins one of the two members (one of which may be compound) in the clustering tree shown in Figure 3.3, the clustering tree is a binary tree. Therefore, the map matching process equates to finding the best-matched segment in all the candidate
56

segments indexed in the binary tree. Considering that segments have different positions, length and orientation, we use minimum bounding rectangles (MBR) (SAGAYARAJ et al., 2006) in the nodes of the tree. Similarly, each MBR in upper levels of the tree represents a group of segments. It is possible that sibling nodes have overlapping areas due to MBRs. The binary tree is constructed from bottom to top, so its root represents the bounding box of the entire spatial network. Figure 3.4 displays a small portion of the binary tree. Figure 3.5 indicates a scenario where a GPS point is located within the range of the MBR of a group of segments.

……

MBR Coordinate

left right

……

MBR Coordinate

left right

MBR Coordinate

left right

Figure 3.4. Data structure of a binary tree for segment clustering

Bounding Box

GPS point

Figure 3.5. A GPS point is located within the range of a Bounding Box
57

3.3.2 Searching Algorithm
As shown in Figure 3.4, the range of MBR is narrowed down from top to bottom. Therefore, in order to determine the search window for map matching, the binary tree is traversed from top to bottom and will stop at a group node when a halt criterion is met. The halt criterion is very important; it determines the map matching window size. The searching algorithm is as follows:
1. Input the binary tree and a GPS point. 2. Set a criterion to halt searching. 3. If the GPS point is included in the boundary of the current group node and the halt
criterion is not met, then search its sub-trees. Otherwise, search the sibling node. 4. If the halt criterion is met, then traverse all the leaf nodes of this sub-tree for the
candidate road segments. Since the candidate segments selection algorithm aims to find corresponding candidate segments given GPS positions, the halt criterion is determined by the relationship between the GPS point and the segment groups. We note a GPS point as p(x, y), and a bounding box as B(minx, miny, maxx, maxy). Next, c refers to the center of the bounding box. Distance(p, c) calculates the distance between the GPS point (p) and the center point (c) and Within(p, B) evaluates whether p is within the bounding box or not. Based on the notation, the criterion is defined as: IF Distance(p, c) < threshold and Within(p, B) THEN stop searching.
58

The threshold is related to the density of grouped road segments. To generalize the criterion, we set a threshold by testing on actual spatial networks. When the threshold is set relatively small, it would guarantee that the GPS point is close enough to the center of a selected group, in order to avoid misidentifying candidate segments by the GPS point located on the boundary of two clustered sub-groups.
3.3.3 Adaptive Search Window Set
In spatial indexing techniques, a search window for candidate segments is normally a fixed-size rectangle centered at a given GPS position. In order to retrieve those segments within the search window, searching algorithms need to go through the indexing tree several times. In contrast to such indexing techniques, a clustering tree provides an adaptive search window by clustering spatially closed segments into groups and only goes through the tree once. The output of the searching algorithm is a list of candidate segments.
The number of segments included in the list of candidate segments depends on three factors. One factor is the density of the spatial network. The second factor is the relevant dynamic position of GPS points in a clustered group. The third factor is the threshold in the halt criterion, which is set depending on GPS error range.
Similar to indexing techniques, nodes in the clustering tree have overlapping MBRs. It is possible that a GPS point is located within two overlapping MBRs. To justify which cluster should be selected based on its MBR, we compare distances between the GPS point and the center of each MBR. The one with a closer distance has a
59

higher possibility to be chosen as the selected cluster if the distance is less than the threshold. If a GPS point is located on the boundary of the two groups, then the search window will be adaptively adjusted to their parents, which is the higher-level clustered group. For instance, in Figure 3.5, if a GPS point is located on the corner of segment 2 and segment 6, the search window should cover the higher group that includes segments 9, 1, 2 and 6. In Figure 3.3, this group includes the group corresponding to the MBRs shown in Figure 3.5 and another group that contains only segment 6. This searching procedure starts from the root of the tree, as shown in Figure 3.3 and once the halt criterion is met, it will stop on the level which includes segments 9, 1, 2 and 6, rather than searching the lower level.
3.3.4 Adaptive Search Window Update
With an object moving, a map matching search window needs to follow its movement. The decision to update a search window or keep searching in the previous window depends on both the direction and speed of the object’s movement. With the previous candidate segments in memory, and by knowing the successive points to estimate the object’s movement, searching in the same segment group continues. However, with the object moving out of a known segment group, a new sub-tree has to be initiated. Under this circumstance, updating the search window just repeats the initial searching procedure.
60

3.4 PERFORMANCE ANALYSIS
To evaluate the candidate segments selection algorithm, we used two datasets, the University of Pittsburgh campus road map and the Allegheny County road map and built two clustering trees based on the maps. By simulating the movement of an object in different scenarios, the performance of the algorithm is analyzed in this section.
3.4.1 Datasets
We employed road maps in the Pittsburgh area from the US TIGER data files and collected some GPS positions on the campus of the University of Pittsburgh and tested our algorithm on different GPS locations, in order to evaluate it in various scenarios when an object was moving. Our algorithm was implemented using Matlab and tested on a PC machine with “Intel Core 2 2.13G HZ” CPU and 2GB memory.
3.4.2 Construction Cost
Memory usage and time complexity of constructing a clustering tree depend on the scale of a digital map. In order to save both space and time, our strategy was to split a largescale digital map into a set of sub-maps and then build its corresponding clustering tree for each sub-map, so the original map corresponds to a forest structure. Indexing each tree in the forest is straightforward. As shown in Figure 3.4, we need intermediate memory to build matrices to calculate average distance of clusters, and the matrix before
61

compression is n by n, so the memory usage is proportional to n2, where n is the number of intersections.
In this algorithm, average-link clustering merges the pair of clusters with the highest cohesion in each iteration. Based on this recursive computation of cohesion, the time complexity of average-link clustering is O(n2 log n). However, Murtagh (1992) compared various hierarchical clustering approaches in computational time complexity and concluded that O(n2) time implementations exist for most of the widely known hierarchical clustering methods, and some methods can perform close to O(n) expected time for hierarchical clustering. Therefore, the construction cost of our hierarchical clustering tree can be further reduced by more sophisticated techniques. In the current implementation, a recursive approach is used to construct the hierarchical clustering tree. Table 1 provides features of the constructed clustering tree corresponding to two different map scales. Constrained by memory limitation in Matab, experiments are limited by the size of spatial networks. In spite of this, our algorithm can be expanded to any large scale map by splitting it into sub-maps and organizing it as a forest structure rather than a large tree structure.
A balanced binary tree has depth, log2n, but hierarchical clustering trees that are built from spatial networks are not guarantee to be balanced. Therefore, maximum and minimum depths are recorded in analysis. Figure 3.6 shows the result of the tree construction by using the campus of the University of Pittsburgh as an example, which has the maximum depth of 14 and minimum depth of 10 as shown in the first row in Table 3.1.
62

Table 3.1. Tree features of three road networks

Road network
Pittsburgh campus Oakland area

Road segments (leaf nodes)
171
1643

Maximum depth of hierarchical clustering tree
14
20

Minimum depth of hierarchical clustering tree
10
10

Figure 3.6. The clustering tree of Pittsburgh campus
63

3.4.3 Searching Cost
In theory, if n is the number of segments, then the time complexity of searching on binary trees is O(log2n). However, two factors influence query efficiency. One is the density of a spatial network and the other is changes to a moving object from an intersection to its linked segments. Because geometry and topology of spatial networks decide the clustering tree, once a spatial network is built, the structure of a clustering tree corresponding to the spatial network is fixed based on the clustering method. Therefore, given a spatial network, we mainly consider the query cost influenced by the position of GPS points.
As a user moves on the sidewalk, the sidewalk segments change. As the user approaches an intersection or move on a relatively short segment, a search window will cover more candidate segments than when the user is moving on a long segment. Query efficiency is worst when a user moves on a boundary between two large-scale clusters. Figure 3.7 shows how candidate segments change with different positions when a user is moving. The red square in each figure shows the received GPS position and the red points on the map show the intersections of candidate segments as the result of searching the clustering tree. Furthermore, by testing the same points in a larger area, (e.g., in Oakland) which covers the University of Pittsburgh campus, it can be seen that the connectivity of the spatial network determines clustered candidate segments, as shown in Figure 3.8. Since the average-linkage clustering approach is based on the average difference of groups, and the same area has a constant spatial network structure, the searching algorithm produces results with certainty. Given a GPS point, an experiment, in
64

Figure 3.8, shows that selected candidates in the large-scale map are consistent with the search results in small-scale map shown in Figure 3.7.
Figure 3.7-1. On a relative long road segment Figure 3.7-2. Approaching to an intersection

Figure 3.7-3 On another intersection

Figure 3.7-4 Middle of a segment

Figure 3.7. Query results changing with scenarios of moving object’s positions

65

Figure 3.8. A scenario on a large-scale map

As discussed previously, in order to evaluate various map matching situations, experiments were conducted in three scenarios: approaching an intersection; moving on a relatively long segment; and moving around a boundary of two clusters. Table 3.2 shows the average searching cost for the three situations.

Table 3.2. Statistics of the searching cost

Road network

Maximum hierarchical
level

Median search depth

Pittsburgh

14

8

campus

Oakland

20

9

area

Median search depth
(Intersection)

Median search depth
(on-segment)

Median search depth (boundary)

7

10

5

6

10

6

66

3.5 SUMMARY This chapter presented a new algorithm to search for candidate segments given a GPS point for map matching. Rather than fixing a search window, this approach can provide an adaptive window based on obtained GPS positions and a chosen spatial network. Considering that the clustering technique can well present segment connectivity in a spatial network, a hierarchical clustering algorithm is developed to cluster segments. A binary tree is created after building the hierarchical clustering tree. Compared with multipass searching an object in indexing techniques, searching on the clustering tree of road segments requires only one pass. From the experiments, it is concluded that this approach can find candidate segments adaptively based on GPS positions and relative changes of relationship between GPS positions and clustered segments. The binary tree was designed to group segments and sped up the search time. As shown in Table 3.2, the algorithm can efficiently find road segments.
67

4.0 GPS-BASED MAP MATCHING TECHNIQUES

After a set of candidate segments is selected, how to find the correct segment is the key issue for map matching. Typically two main parameters, distance and direction deviation, are coupled to solve this problem.

Distance is defined as the length of the projected line from a GPS position to a link. Let C be the projection of P on a sidewalk segment AB. The distance is defined as equation 4.1 and visualized in Figure 4.1.

D (P, C)

if C Є [AB]

D (P, AB) =

(4.1)

Min {D (P, A), D (P, B)} elsewhere

Figure 4.1. Perpendicular distance
68

Direction deviation is to measure the angular difference between user’s trajectory and orientation of candidate segments. Direction of user’s trajectory is the measurement of the angle between two or more successive positions.
Based on these two parameters, three advanced map matching algorithms solely using GPS data are presented in this chapter.
4.1 CHAIN-CODE-BASED MAP MATCHING
In this section, a chain-code-based map matching algorithm is designed by considering the unique characteristics in pedestrian/wheelchair navigation. The chain-code-based map matching approach was chosen because instead of computing the precise angle to represent a trend of movement, which is traditionally used, a discrete eight-direction chain code can be considered in order to reduce noise from GPS due to random movements of pedestrians or wheelchair users. Moreover, when pedestrians or wheelchair users move on sidewalks at relatively low speed, GPS data is often plagued with errors that frequently produce inaccurate trajectories. To overcome this problem, the chain-code-based map matching algorithm considers the trajectory of the data rather than merely the current position as in the typical map matching algorithms. Coupled with distance information, map matching decisions are made by comparing the differences between trajectories representing the road segments and GPS tracking data.
Instead of using precise angular, chain codes are defined to represent the direction of sidewalk segments and trajectory of user’s movement. A directed straight line segment connecting two adjacent points is called a link, and a chain is defined as an ordered
69

sequence of links with possible interspersed codes. Chain encoding in this work is based on resolution of the direction to the adjacent links at the intersection.
Chain codes (also known as Freeman’s codes) are a common technique to represent a contour of an object in image processing (Freeman and Saghri 1974, Haron et al. 2005). The directions of contour boundaries are coded with integer values k = 0, 1, . . . , K − 1 in the counterclockwise direction starting from the direction of the positive x-axis. A curve or contour is thus a chain of directions. The number of directions K takes is 2(M+1) where M is a positive integer, such as 4, 8. The chain codes where K > 8 are called generalized chain codes, like 16 (Freeman 1978).
4.1.1 Eight-Direction Chain Code
Since the angle between any two adjacent links on most intersections is usually greater than 45°, we use an eight-direction Chain Code 0, 1, 2, 3, 4, 5, 6, 7 to represent eight direction interval on the counterclockwise direction as shown in Figure 4.2. With this definition, 0 corresponds to an angle between −22.5° to 22.5°, 1 corresponds to an angle between 22.5°to 67.5°, and 7 corresponds to angles between −67.5° to −22.5°.
Figure 4.2. 8-Direction chain code
70

Figure 4.3. Digital map with GPS data

Figure 4.3 shows an example of GPS data and the sidewalk segment on a digital map. In this example, the GPS tracking route has a chain code of 0, 0, 1, 7, 0, 0, and the chain code of the sidewalk link C-A-B is 0,0 and F-A-D is 2,2.
Moreover, in order to find the closet segment to GPS tracking points, we use the difference between sidewalk link chain codes and the trajectory chain code of a user (Dcc) to show the extent of consistency of direction among them. With this, Dcc is defined as follows: Δ = | Chain-Code (movement of a user) – Chain-Code (sidewalk segments) |

Dcc = Δ;

if Δ<4

(|Δ- 8|) mod 4; otherwise

(4.2)

With this definition, discrete chain codes take the place of precise angle values; discrete Dcc takes the place of angle differences. This representation not only eliminates noise within short-distance moving, but also is computationally fast for real-time navigation.

71

Furthermore, as mentioned earlier, GPS position fixes are less reliable at a speed of less than 3.0 m/s. In such cases, in order to reduce the uncertainty of the direction under wheelchair users’ control, the algorithm invokes a three-step Dcc between a user’s trajectory and sidewalk segments rather than only taking a one-step Dcc.
In Figure 4, P1, P2, … , P7 show the same GPS trajectory as the one in Figure 3. With a GPS data such as P2, Di (i = 1, 2, 3) could be calculated as the perpendicular distance to segments. When the first step is complete, the chain code from P2 to P3 is calculated, which is 0. Since heading directions are more meaningful than each-step directions, after two steps, the chain code from P2 to P4 is calculated, which is 1. Similarly, after three steps, the chain code from P2 to P5 is obtained as 0. Therefore, Dcc between P2P3 and CA is |0-0|; Dcc between P2P4 and CA is |1-0|, and Dcc between P2P5 and CA is |0-0|.
Figure 4.4. Example of chain-code-based map matching
72

4.1.2 Chain-Code-based Map Matching Technique
In this algorithm, distance and direction are coupled to find the best location of the user on the sidewalk. First, the algorithm uses perpendicular distances from GPS data to each sidewalk segment candidate and direction difference between user’s trajectory and each sidewalk segment to select a sidewalk segment. As shown in Figure 4.4, in order to identify which segment a GPS point, such as P2 in Figure 4.4, is most possibly mapped onto, both distance and direction movement are calculated to be weighted scores. All the segment candidates, close to P2, are a link set {“CA”, “DE”, “AD”}; the distances from P2 to these links are {D1, D2, D3}, three-step Dcc calculations between trajectory and these segment candidates are taken as described in the previous section. Next, among all the segment candidates, the sidewalk segment with the highest matching evaluation will be chosen. In this case, segment “CA” would be considered the best selection based on map matching evaluation, and as a consequence, P2 is determined to be projected to “CA”. Two approaches are proposed to make map matching decision: linear model and non-linear model.
4.1.2.1 Linear Model Distance and difference in direction are two determining factors to calculate matching results in order to identify correct segment. Linear model is built on the linear relationship between matching result (M) and evaluation parameters including Dcc and Distance. Figure 4.5 depicts the linear model.
73

Figure 4.5. Linear model

The linear evaluation equation used in this work is as follows:
3 Vij = Wij * Dij + ∑ Wijm * Dcc(Step[i+m], sidewalk segment[j])
m=1 Mij=1/Vij

(4.3) (4.4)

where i is the indexing number of GPS points, and j is the indexing number of segment

candidates. Dij is the distance from the ith GPS point to the jth segment; Dcc(Step[i+m],

sidewalk segment[j]) is the three-step Dcc with m going from 1 to 3; Wij is the weight of

Dij , and Wijm is the weight of Dcc. For the ith GPS point, Mij is used to calculate the total

weight assigned to the jth candidate link. The link with the highest Mij is selected as the

correct link for GPS point i. Therefore, the larger Mij, the smaller is Vij. In Equation (4.3),

the total weighting score can then be obtained by summing up the individual scores,

including weighting distance and three-step weighting Dcc as shown in Figure 4.5.

4.1.2.2 Non-Linear Model Based on its definition in Section 4.1.1, Dcc is a discrete value ranging from 0 to 4; whereas, the absolute value of distance is a continuous real number from 0 to a large
74

number. Non-linear model provides an alternative means to fit the non-linear relationship between the combination of these two input parameters and matching result to make map matching decision, which is depicted in Figure 4.6.
Figure 4.6. Non-linear model
In this non-linear model, evaluation estimation is a fitting curve procedure between response variable (matching result) and a list of input parameters (three-step Dcc and Distance). Among the most common nonlinear models, neural network is a widely used approach. This approach attempts to find a relationship, i.e., a function, between the inputs, and the provided output(s), in order for the network to find a correct answer for the new inputs when network is provided with unseen inputs. As one of various structures in neural network family, radial basis function (RBF) networks (Howlett et al. 2001) have static Gaussian function as the nonlinearity for the hidden layer processing elements, so the network could provide a good non-linear transformation in this map matching algorithm for each input vector, distance and three-step Dcc, to obtain non-linear map matching result (M). The Gaussian function responds only to a small region of the input
75

space where the Gaussian is centered. Therefore, in this map matching algorithm, the link which provides the highest output of Gaussian function, i.e., Mij, is chosen as the correct link for that positioning fix. 4.1.2.2.1 Radial Basis Functional Neural Network The structure of RBF networks usually has three layers. Each hidden unit in the network has two parameters: a center uj and a width σj associated with it. The output of each hidden unit depends only on the radial distance between the input vector and the center parameter for that hidden unit. The response of each hidden unit is scaled by its connecting weights Wkj to the output units and then summed to produce the overall network output:
(4.5) where the Gaussian activation function for RBF networks is given by:
(4.6) and x is the d dimensional input vector with elements xi, and uj is the vector determining the center of the basis function; yk(x) is the output of RBF neural network. There are two steps to train a RBF neural network: (1) determine the parameters of the basis functions through unsupervised training using only the input data set and (2) determine weights Wkj using both input and output data (hidden units are activated using an input pattern and the weights to the output layer are then modified to produce the desired output for the given input). Once all the parameters are produced by training in a RBF network, the neural network model could be used to compute the output based on new input data.
76

4.1.2.2.2 Design of RBF Neural Network In this research, the RBF Neural Network is designed as a supervised network. The input data has four features: distance and the three-step Dcc, so the input layer has four neurons, the output layer has one neuron which is used to evaluate the extent to which a GPS point is close to candidate segments. The first step is to train the neural network. The training data consists of many pairs of input and output. Many pairs of Distance and three-step Dcc are calculated as input vectors, and output values are designated as 0 or 1, depending on whether the calculated candidate segment is the correct link or not. Next, the trained neural network is used to perform the non-linear map matching evaluation. Given a 4-d input vector with distance and three-step Dcc, the segment with the smallest output value is the selected segment, where the output of evaluation, Mij, obtains the largest value. Based on the size of sample data in experiments, the hidden layer is designed as a 132-neuron layer. The structure of the RBF neural network for this map matching algorithm is shown in Figure 4.7.
Figure 4.7. RBF neural network for map matching evaluation
77

By definition in Equations (4.5) and (4.6), the corresponding non-linear evaluation equation used in this work is defined as follows:
(4.7)
(4.8)
where i is the indexing number of GPS points, and j is the indexing number of segment candidates. Xij is input, in which Dij represents distance from the ith GPS point to the jth segment, and Dcc(Step[i+m], sidewalk segment[j]) represents three-step Dcc with m going from 1 to 3. αk is the weight of the kth output value in hidden layer. β is the weight matrix of input vector in hidden layer. As the output, Mij is used to calculate the total weight assigned to the jth candidate link for the ith GPS point. The link with the smallest Vij is viewed as the correct link.
4.1.3 Map Matching Process
There are two main modes in the map matching process: (1) turning mode and (2) normal moving mode. In turning mode, the algorithm performs map matching for each GPS tracking point around intersections in order to identify a new segment. Once the user is located on a segment, the process enters normal moving mode, current and previous positions can be used as constraints for the next step in map matching based on the topology of sidewalk networks. Such constraints accelerate the matching process.
78

Once the correct sidewalk segment is determined, i.e., the first step of map matching, finding an estimate of the location of the user on that segment is straightforward.
The flowchart shown in Figure 4.8 describes the process of chain-code-based map matching, including pre-processing to initialize data structures, evaluation based on threestep Dcc and distance between sidewalk segments and trajectory made of GPS points, and a constraint on a selected sidewalk segment.
79

Figure 4.8. Flowchart of chain-code-based map-matching algorithm
80

4.1.4 Validation
To validate the chain-code-based map matching algorithm, the process of chain-codebased map matching is implemented and tested on a sidewalk network.
4.1.4.1 Test Environment The sidewalk data along with associated parameters on the University of Pittsburgh campus area were digitized and utilized by scale 1:2500. The sidewalk database, consisting of the sidewalk network, buildings, landmarks, and accessibility information, are built for wheelchair navigation in order to assist wheelchair users’ outdoor traveling (Karimi et. al 2006). In the following testing, GPS points in three routes were collected by walking and using a stand-alone GPS receiver, Trimble GeoExplorer 3, and map matched on the established sidewalk network. Fully considering the various types of sidewalks on the different areas, we used three selected routes to test map matching algorithms. Route 1 covered the most main sidewalks on campus; Route 2 included the sidewalks around tall buildings; Route 3 included a loop and some small paths.
A snapshot of the digitized sidewalk map overlaid with Google map shows the campus of the University of Pittsburgh in Figure 4.9. The computing platform used was a PC machine with “Intel Core 2 1.4G Hz” CPU. The software for the fuzzy logic map matching algorithm was written in JAVA in an open source GIS tool called Geotools (www.geotools.org).
81

Figure 4.9. University of Pittsburgh’s campus

4.1.4.2 Evaluation of Linear Map Matching Models

For evaluation purposes, we employed different forms of linear and non-linear models in matching evaluation.

As discussed in Section 3.3.1, the distance, three Dcc after step one, two, three are the four influencing factors in matching evaluation equation. Their linear relationship was formulated as Equation (4.9). After normalization for these four variables, four estimated weight parameters meet the condition as follows:

3 Wij + ∑ Wilm = 1
m=1

(4.9)

After testing different combinations, the four weight parameters are given as:

Wij = 0.5; Wij1 = 0.1; Wij2 = 0.2; Wij3 = 0.2;

(4.10)

82

4.1.4.3 Evaluation of Non-Linear Map Matching Models We used RBF neural network to build a non-linear evaluation model. As mentioned in Section 3.3.2, the RBF neural network considered in this work has a three-layer structure, including 4-d input layer, 132-d hidden layer and 1-d output layer. In the training stage, 132 pairs of parameters, with input vectors and output values, are calculated and normalized as a sample data set for training RBF neural network. Figure 4.10 shows the training performance.
Figure 4.10. Training with RBF neural network
The curve in Figure 10 shows that training is completed after several iterations, when error gets close to 0. This means that we could use this trained model to perform map matching evaluation.
Table 4.1 shows the trained network structure. Input vector is defined as a 4-d vector including distance, Dcc (after step1), Dcc (step2), and Dcc (step3). Output of the
83

trained neural network is the evaluation result. The candidate segment with the minimum output value is viewed as the matched segment. Table 4.2 shows different output values according to different input vectors for a GPS point and all relevant segment candidates. It could be drawn that the first pair of input parameters results in the smallest output value in the list, which means that the corresponding segment provides the closest match to the GPS data, and thus will be identified as a selected link for the GPS data.

Table 4.1. RBF neural network structure

Inputs size: 4

hidden layer size: 132

output layer Size: 1

Weights from input layer to Weights from hidden

hidden layer

layer to output layer

4*132

132 *1

Table 4.2. Map matching evaluation using RBF neural network

Input[0] Distance 0.0116309625 0.1534199589 0.0482950975 0.2902582818 0.4500096318 1.0987441382

Input[1] Dcc[ step1]
0 0 2 1 3 1

Input[2] Dcc[step2]
0 0 2 2 4 1

Input[3] Dcc[step3]
0 0 2 2 4 1

output
0.0068 0.3967 1.3588 13.221 542.71 874.33

4.1.4.4 Performance Analysis
Two groups of tests were conducted to evaluate the performance of the chain-code-based map matching algorithm.
First, linear map matching approaches were performed to compare results with 84

constraints and without constraints. The linear model is used to test the map matching algorithm on three routes. The map matching performances are presented in Table 4.3 where five statistic values are listed on the three chosen routes. The results of map matching with constraints, compared with GPS raw data, are shown in Figures 4.11 4.13.
Table 4.3. Linear-model map matching results
a. GPS data before map matching
85

b. The result of map matching with constraints using the linear model Figure 4.11. Route 1 comparing map-matching result with GPS raw data on campus sidewalk map
a. GPS data before map matching
86

b. The result of map matching with constraints using the linear model Figure 4.12. Route 2 comparing map-matching result with GPS raw data on campus sidewalk map
a. GPS data before map matching
87

b. The result of map matching with constraints using the linear model Figure 4.13. Route 3 comparing map-matching result with GPS raw data on campus sidewalk map
Second, linear models and non-linear models are separately applied to analyze their performances in making map matching decisions. As Table 4.4 shows, the result leads to the conclusion that linear evaluation is more advantageous to implement than non-linear evaluation in terms of time performance. Compared to the linear model, map matching results in the non-linear model showed slightly lower correct link identification. Therefore, in order to meet the need of real-time navigation, linear model is preferred model for map matching decision.
88

Table 4.4. Comparing the linear model and the non-linear model
In summary, experimental results show that most mismatched points in Route 3 occur when a user moved on paths with no corresponding segments on the digital map. In the case of Route 2, most mismatched points occur on sidewalks of narrow roads due to GPS errors, where two sides of some narrow roads cannot be distinguished since their distances are below GPS error range generally announced as 10m radiuses or over.
4.2 HMM-BASED MAP MATCHING ALGORITHM The Hidden Markov Model is a statistical model in which the system being modeled is assumed to be a Markov process with unknown parameters, and the challenge is to determine the hidden (unknown) parameters from the observable parameters (Wikipedia, Yariv 2002). The HMM has been used in temporal recognition applications such as text and speech recognition. We argue that map matching is also a temporal recognition application susceptible to a Markov process where the aim is to find actual paths and
89

actual locations, i.e., the hidden information, using GPS data as observed measurements. Map matching, as a time-series problem, resembles temporal pattern recognition applications, such as speech, handwriting, gesture recognition and bioinformatics, where the hidden Markov model is applied. With these characteristics, the HMM-based map matching approach , where finding the correct sidewalk segment out of all candidate sidewalk segments given a GPS trajectory, was chosen.
The Viterbi Algorithm (Forney 1973) is a recursive optimal solution to the problem of estimating the state sequence of a discrete-time finite-state Markov process. Many problems can be cast in this form. We applied the Viterbi algorithm to estimating the sidewalk segments based on observed GPS positions. The key innovation using HMM in this algorithm for wheelchair navigation is matching sidewalk segments based not only on the geometry of the location readings, but additionally on the topology of the segments.
4.2.1 Hidden Markov Model
The HMM is represented by a finite set of states, each of which is associated with a probability distribution. Transitions among the states are governed by a set of probabilities called transition probabilities. In a particular state an outcome or observation can be generated, according to the associated probability distribution. It is only the outcome, not the state, that is visible to an external observer and therefore states are ``hidden'' to the outside; hence the name Hidden Markov Model (Rabiner 1998).
The general architecture of a hidden Markov model is shown as Figure 4.14.
90

Figure 4.14. Architecture of a HMM

The architecture has two layers: {ot} represents the observable layer and ot

corresponds to an observation value at time t. {qt} represents the hidden layer, and qt, at

time t, comes from one state in a state space.

In order to model a hidden Markov process, the following elements are needed:

 The number of states in the model, n.

 The number of observations, m. If the observations are continuous then m is

infinite.

 A set of state transition probabilities. A={aij}

aij = pr { qt+1 = j | qt = i }, 1≤ i, j ≤ n

(4.11)

where qt denotes the state at time t.

 An observation probability distribution in each of the states, B={bj(k)}.

bj (k) = pr { ot = ok | qt = j }, 1≤ j ≤ n, 1≤ k ≤ m

(4.12)

where ot is the observation at time t and ok denotes the kth observation.

 The initial state distribution, π = {πi}, where,

πi = pr { q1 = i }, 1≤ i ≤ n

(4.13)

With these, λ = ( , A, B) can be used to denote an HMM with probability distributions.

91

4.2.2 A Hidden Markov Model for Map Matching
In a hidden Markov model, the state is not directly visible, but variables influenced by the state are visible. Each state has a probability distribution over the possible observations. Therefore, the sequence of observations provides some information about the sequence of states by means of a HMM (Olivier 2005).
Given the parameters of the model, the Viterbi algorithm can solve the problem of how to find the most likely sequence of hidden states that could have generated by using a given observed sequence. The Viterbi algorithm is a dynamic programming algorithm for finding the most likely sequence of hidden states, called the Viterbi path.
In map matching for wheelchair navigation, observed GPS points are the visible observation layer and correct sidewalk segments are the invisible state layer.
Let Pt {p1, p2, …, pm} denote the observation (i.e., a GPS data point) obtained every second t for 1 ≤ t ≤ m.
Let Rt { r1, r2, …, rn } denote the actual location (i.e., the correct sidewalk
segment) at time t. Suppose we obtain a series of GPS observations within the time period m, so we
could obtain m GPS points as an observation sequence from time t1 to time tm. In the state space, there are n states, which represent n candidate segments. The transition probability from any time i to the next time j represents the probability of a user’s moving from one segment to another segment. The model could be structured as shown in Figure 4.15. The goal is to find the sidewalk segment sequence that has maximum probability given the
92

observations. That is finding a sequence of actual locations, R1 . . .Rt, such that Pr(R1R2 . . .Rt|P1P2 . . .Pt) is maximized.
Figure 4.15. The hidden Markov model for map matching
Based on conditional probabilities from basic probability theory, for any sequence R1 . . .Rt of actual locations we have:
(4.14) Given the observations, the denominator of this expression is determined (the exact value is unknown, but that value only depends on the observations, not on the path R1 . . .Rt.). So the problem is equivalent to finding R1 . . .Rt such that Pr(R1R2 . . .RtP1P2 . . .Pt) is maximized.
93

From the basic identities of probability theory, for any events A,B,C we have, Pr(ABC) = Pr(A)Pr(B|A)Pr(C|AB). Let’s use this to decompose the complicated event:
R1R2 . . .RtP1P2 . . .Pt as a product ABC. We define A = R1 . . .Rt−1P1 . . .Pt−1, B = Rt, C = Pt,
By applying the above formula, we obtain: Pr(R1R2 . . .RtP1P2 . . .Pt)=Pr(R1R2 . . .Rt−1P1P2 . . .Pt−1)Pr(Rt|R1 . . .Rt−1P1 . . .Pt−1)Pr(Pt|R1 . . .Rt−1P1 . . .Pt−1Rt). Furthermore, we obtain: Pr(R1 . . .RtP1 . . .Pt) = Pr(R1 . . .Rt−1P1 . . .Pt−1)Pr(Rt-1 -> Rt )Pr(Rt -> Pt )

= Pr (R0)

.

(4.15)

We assume each probability in the state transition matrix and in the observation probability matrix in the HMM is time independent. Therefore, given prior probability Pr(R0), observation probability Pr(Pt | Rt) and state transition probability Pr(Rt |Rt-1), we can use the Viterbi algorithm to find the path through the states that maximizes the probability of a sequence of sidewalk segments. The Viterbi algorithm uses dynamic programming methods to efficiently accomplish this, so that the actual path consisting of a sequence of sidewalk segments can be identified.
In Equation (4.15), in order to apply the Viterbi algorithm, we need to know prior probability, observation probability and state transition probability in the HMM. Prior probability Pr(R0) is Pr(rj), when j=1,…,n, which is simply computed by 1/n as a uniform distribution reflecting the fact that we have no known bias about which is the correct sidewalk segment. Hence, how to compute observation probability and state transition probability becomes the key point.
94

First, we compute the observation probability, which is the probability of the measured location pi given rj. We can compute this with the Bayesian rule:

i=1,2…,m; j=1,2…,n

(4.16)

We presume that

, a prior probability in Equation (4.16), follows a uniform

distribution. Therefore, equation (4.16) could be further simplified as:

i=1,2…,m; j=1,2…,n

(4.17)

is the probability that is the correct sidewalk segment out of the candidate sidewalk segments given that measured location is Pi. We computed this by assuming that, for most of the GPS points, the closer a sidewalk segment is to the observed point, the higher the probabilities that it is the correct segment. This is borne out by our informal observations of nearest segment matching. Considering the relationship of distance and observation probability as an inverse proportion, we first compute the probability of the perpendicular distance from GPS point pi to the segment rj over the summation of the distances from pi to all the candidate segments, and then use reciprocal relation of the probability based on distances to approximate observation probability. This leads to:
=

=

(4.18)

In pedestrian/wheelchair navigation, users either move on the same segment, or they make a turn at a junction such as an intersection, exit, or entrance. Therefore, we need to compute the transition probability aij, which represents the probability of the user moving from one sidewalk segment corresponding to a measured point to another
95

sidewalk segment corresponding to another measured point. For this, in this algorithm we use topological relationship to compute the transition probability. We only consider three topological relationships: same segment, connected segment and unconnected segment. It is impossible for a wheelchair user to move from a segment to an unconnected segment in consecutive time windows. Therefore, the transition probability from time i to the next time j=i+1, aij would be zero where the two segments are not connected. If two sidewalk segments are connected, this transition probability should be higher than if two sidewalk segments are unconnected, since wheelchair users would travel on the same segment most of the time except at an intersection or junction. Thus, the transition probability of moving on the same segment has the highest value. By setting aij = e-rij, we create an exponential curve for this probability distribution, where rij corresponds to the topological relationship between two segments. By normalization, aij changes between 0 and 1. The next important step is to build a transition matrix { rij } and set the value for each element in this matrix. The following set of rules must be followed
(1) If two segments are connected, rij is set to 1; (2) If they are unconnected, then rij is set to ∞. (3) Otherwise, rij is 0, when two segments are same segment that is i=j.
Take our measured GPS points on campus as an example, shown in Figure 4.16. First, we model sidewalk segments as a set {r1, r2, …, r12} as Figure 4.17 shows. Next, we build a matrix {rij}, based on the topology of the segments in Figure 4.18. Figure 4.19 shows the map matching results by applying the Viterbi algorithm to the entire sequence of location measurements shown in Figure 4.16.
96

Figure 4.16. An example of GPS points overlaid on sidewalks on campus Figure 4.17. An abstracted sidewalk network model
Figure 4.18. State transition matrix
97

Figure 4.19. Map matching locations versus GPS positions
4.2.3 HMM-based Map Matching Process
For a hidden Markov model, two parameters, n and m, have to be initialized, where m is the size of an observation sequence and n is the state number in a state space. For map matching, the size of the observation sequence is the number of measured GPS points, and the state number is the number of candidate sidewalk segments close to the observed GPS points. In this algorithm, after setting these two values, we take several steps to complete the matching process.
First, a set of nearby candidate sidewalk segments is chosen based on the first GPS data observed in each sequence. Second, the transition matrix on the selected set of nearby candidate sidewalk segments is built (see Figure 4.18). This matrix not only shows the topology of segments but implies two moving modes, which are changing mode and continuing on same segment mode. In the case of continuing on same segment mode, where rij equals to 0, current and previous positions should be matched on the
98

same segment. Conversely, if rij is 1, then the wheelchair is moving in a changing mode, where current and previous positions are on two connected segments. Consequently, we could compute transition probabilities based on the transition matrix. Third, the perpendicular distance from each GPS point to each segment in the set of candidate sidewalk segments is computed, so that observation probabilities for each measured location are calculated. Last, the Viterbi algorithm to the observation probabilities and transition probabilities to compute the maximum probability sequence of sidewalk segments are applied. Once the most likely sidewalk segment is obtained, GPS points are projected to the segments and the map matching result is shown on the map.
Figure 4.20 is the flowchart of HMM-based map matching.
Figure 4.20. Flowchart of HMM-based map matching process
99

4.2.4 VALIDATION To validate the HMM-based map matching algorithm for pedestrian/wheelchair navigation, the same GPS data collection on three routes, the same sidewalk map and the testing environment that we described in section 4.1 are applied for evaluation of this algorithm. 4.2.4.1 Performance Analysis Three groups of data sets, collected on main campus of University of Pittsburgh by GPS receiver, were processed to validate the presented algorithm. the HMM-based map matching algorithm. For contrast, three-route GPS raw data with map matching results were overlapped on campus sidewalk map, shown in Figures 4.21, 4.22, and 4.23.
a. GPS raw data overlapped on campus sidewalk map
100

