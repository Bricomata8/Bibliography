201270137th13ItnhteIrnntaetrinoantaiolnCaolnCfoernefnecrenocne SoingSnaigl-nIaml-aIgmeaTgecThencohlongoylo&gyIanntedrnInete-Brnaeste-dBaSsyesdteSmyst(eSmITsIS)

Trust Inference using Implicit Inﬂuence for Item Recommendation

Bithika Pal Department of Industrial and Systems Engineering
Indian Institute of Technology Kharagpur, India
Email: bithikapal@iitkgp.ac.in

Mamata Jenamani Department of Industrial and Systems Engineering
Indian Institute of Technology Kharagpur, India
Email: mj@iem.iitkgp.ernet.in

Abstract—Trust plays a very important role in many existing ecommerce recommendation applications. Social or trust network among users provides an additional information along with the ratings for improving the user reliability on the recommendation. However, in real world, trust data is sparse in nature. So, many algorithms are built for inferring trust. In this paper, we propose a new trust inference method based on the implicit inﬂuence information available in the existing trust network. This approach uses the transitivity property of the trust for trust propagation and scale-free complex network property to limit the propagation length in the network. In this regard, we deﬁne a new terminology, degree of trustworthiness for a user, which adds the global inﬂuence in the inferred trust. This process improves the recommendation accuracy from the existing trustbased recommendation and neighborhood based collaborative ﬁltering. Due to the availability of users preference from trust network which is absent in rating data, it also alleviates the very well-known cold start users problem of a recommender system. We evaluate the proposed approach on two established real world datasets and report the obtained results.
Index Terms—Recommender system; Collaborative Filtering; Trust Network
I. INTRODUCTION
In today’s world of internet, mobile, and online activity, personalization comes in a very big picture when it is talked about recommendation and searching. Recommender system (RS) has a broad area of application such as, movie recommendation in netﬂix1, music recommendation in lastfm2, book recommendation in goodreads3, product recommendation in amazon4, friend recommendation in facebook or other social networking sites, news recommendation, etc. The goal of a recommender system is to choose the right item for the right person at the right time in a personalized way. In RS, Collaborative Filtering (CF) is an elementary technique which returns very promising result by only considering user-item rating or purchase history. Several algorithms in this regard [1] has been developed including neighborhood based approaches and model-based approaches. In case of neighborhood based approaches [2], new recommendations are determined by considering the similarity of users or items and then taking nearest
1www.netﬂix.com 2www.last.fm 3www.goodreads.com 4www.amazon.com

neighbors from them, whereas, model based method (latentfactor model) [3, 4] maps users and items into the same low dimensional latent space and predicts the recommendation. The big challenge of RS is sparsity of rating data [5]. Due to this reason, recent advances of recommender system work by not only taking rating data rather it incorporates more information, if available, to boost up the power of recommender system [5, 6]. Each kind of addition like social information, trust relation, the knowledge base of items or users helps to alleviate different type of problems that a recommender system faces [7, 8]. In this paper, we focus on a familiar problem of the recommender system, i.e. the existence of cold start users. To resolve that we have taken trust relation among users as extra information along with the rating or purchase history.
In case of RS, trust is identiﬁed in two ways either at individual level [7, 9] or trust on the whole system [10]. Individual level trust comes from when one user relies on other explicitly and how much this trust is quantiﬁed with some real value as the weight of trust. This framework generates directed weighted graph named “web-of-trust”, where users are the vertices and the directed edges signify which user trusts on whom with weights as trust values like in epinions5, ﬂimtrust, skiing recommendation, etc [11, 12]. The number of users trusting to a particular user with their trust weight leads to the reputation of the user in a trust-based system. Sometimes social network information is also used as trust data like in ﬂixster6. Explicit commence of trust to a particular user opens the door of recommending new items from its trusted user’s purchase list; this enhances proﬁtability and diversity by recommending less frequently sold items. The beneﬁts of RS to the seller side come from this “long-tail” of item distribution. Also, it helps to know the taste of new user in the system. However, due to the sparse nature of trust data, many trust inference approaches have been come up such as graph theoretic models [9, 11, 13]–[15], algebraic methods [16] and machine learning approaches [17, 18]. Graph theoretic model has a good performance in terms of reasoning and efﬁciency. Discovering new edges in trust graph enhances the scope of recommending more diverse items to the user. On the other
5www.epinions.com 6www.ﬂixster.com

978-1-5386-4283-2/17 $31.00 © 2017 IEEE

21

DOI 10.1109/SITIS.2017.15

hand, machine learning model gives better prediction level with the limitation of slower computational speed and a weak interpretation of inference. Here we have enhanced the graphtheoretic model of trust inference [7, 19, 20]. For inferring trust from one user to other, existing path based model considers the propagation property of trust through its connecting path and linear decaying effect of it. Also, this method uses trust inference at an individual level and has not considered the of the users in the whole system. To address this issue we have deﬁned a new factor degree-of-trustworthiness which will capture the reputation of the user in the system. The basic idea is to add this information which is coming implicitly from the topological structure of trust network as an inﬂuence to the identiﬁed path based inference.
The contribution of our work is three-fold:
1) we introduce a new trust inference mechanism considering the inﬂuence of users.
2) we evaluate our method using two real-world datasets, for trust-aware recommender system and compare the result with existing methods.
3) we analyze our proposed method in depth for cold start users problem.
Our paper is organized as follows. In Sec. II and III, we discuss about notations, deﬁnitions, preliminaries and related work. Then, we introduce, our proposed method and algorithms in Sec. IV. We explore the dataset in Sec. V, consecutively, evaluate our proposed approach in Sec. VI, and conclude our work in Sec. VII.

II. NOTATIONS AND DEFINITIONS
a) Recommender system: A recommender system is a tool or technique for predicting the rating of unknown items and offers top rated item list for a user according to their choice. The inputs for this system are set of n users U, set of m items I and rating matrix Rn×m ∈ Rn×m. The ith row R , denoted by rui , is a row vector and represents the rating provided by user ui. Each element of R, ri,j, can be deﬁned as follows:

ri,j =

x, blank,

if rating available otherwise

(1)

where x is real value in some ordinal scale. Binary rating
matrix gives the purchase history where ri,j = 1 if user ui has purchased item ij otherwise zero.
b) Trust network: Trust network is a directed graph Gt = (Ut, Et, ω) where vertex set Ut is set of users in trust network and edge set Et(Gt) = {< ui, uj > | ui, uj ∈ Ut, ui trust on uj}, and ω :< ui, uj >→ trust value as edge weight. For simplicity, we consider Ut(Gt) = U . Trust relation between two users is determined by the directed edge in Gt, where for any edge < ui, uj > ∈ Et, ui is called truster and uj is called trustee. The weight matrix of the trust graph is also termed as

trust-matrix Tn×n. Each element of T, ti,j can be deﬁned as follows:

ti,j =

x 0

if ui trust on uj and x ∈ R ∩ (0, 1] otherwise

(2)

All the symbols and notations used in this paper are described in below Table I.

TABLE I: Sympbols and Deﬁnitions used

Symbols
U, I
n, m
ui, ij Iui Uij Rn×m Sn×n Tn×n ri,j rˆi,j si,j ti,j Gt N (ui) Nij (ui) NGt (ui) r¯i di,j dmax or L
lk

Deﬁnition
Set of Users, Set of Items Number of Users i.e. |U |, Number of Items i.e. |I|
particular user, particular item
Set of items rated by user ui Set of users who have rated item ij
Rating matrix
Similarity Matrix from rating data
Weight matrix of Trust Network
Rating provided by user ui to item ij Predicted rating for user ui to item ij Similarity of user ui with user uj Trust from user ui to user uj Trust Network
Set of nearest neighbors of user ui Neighbors of user ui who all have rated item ij Open neighborhood of user ui in trust network Gt Mean rating of users ui Length of shortest path from ui to uj in Gt Maximum allowable trust propagation length Length of the kth path from ui to uj in Gt

III. PRELIMINARIES
A. Neighborhood Based Recommendation
Two major divisions in Neighborhood Based methods are User Based Collaborative Filtering (UBCF) and Item Based Collaborative Filtering (IBCF). As the name suggests, UBCF ﬁnds similarity among users for a user, say ui, chooses nearest neighbors N (ui) among similar users and predict rating ri,j for unrated items ij where ij ∈ I \ Iui . Whereas, in case of IBCF, rating ri,j is predicted by calculating similar items N (ij) of item ij where ij ∈ I \ Iui and rated by user ui. Here instead of going into their merits and demerits, we focus on UBCF as it is comparable with trust between users. For more details it can be referred to [1, 2].
1) Similarity Calculation: User-user similarity can be calculated as Pearson correlation coefﬁcient between rating vector of users from their co-rated items. Similarity among all users form the similarity matrix Sn×n, where each element si,j similarity between user ui and uj can be deﬁned by the following Equation 3.

si,j =

ik ∈|Iui ∩Iuj | (ri,k −r¯i)·(rj,k −r¯j )

ik ∈|Iui ∩Iuj | (ri,k −r¯i)2·

ik ∈|Iui ∩Iuj | (rj,k −r¯j )2

(3)

where r¯i, r¯j denotes mean rating of user ui and uj respectively. Pearson similarity lies within [-1,1] and positive values denotes similarity whereas negative value implies dissimilarity. Another correlation based mechanisms is Cosine similarity.

22

Other than vector consideration, similarity can be computed as Jaccard similarity by considering item set of users.
2) Rating Prediction: In neighborhood method for rating prediction, an important part is neighbors selection after calculating similar users. Based on requirement, N (ui) selection is done by threshold ﬁltering on similarity or selecting k-nearest neighbors where k varies in different applications. Rating for a user ui to an item ij is predicted using the following Equation 4.

rˆi,j = r¯i +

uk∈Nij (ui) si,k · (rk,j − r¯k) s uk∈Nij (ui) i,k

(4)

It is the weighted (weight as similarity) average of the rating
provided by similar users of ui who all have rated item ij, i.e. Nij (ui). Prediction is made unbiased from the neighbors by subtracting their mean rating and bias of ui is imposed by adding r¯i.

B. Trust Based Recommendation
According to [15, 21] , from the sociological point of view, trust to someone is subjective, topic dependent, asymmetric and time sensitive. In case of any system, trust can be viewed as local or global. Trust also poses its propagative property in terms of transitivity i.e. if a user ui trusts uj and uj trusts uk then ui trusts uk. Due to this reason, we are able to infer the trust when it is not present explicitly.
1) Trust Inference: Earlier, different types of inference techniques are mentioned in Section I. Out of which we consider the path based approach where trust from user ui to uj depends on the shortest path between them and trust propagates along that path. Now, path based or distance based inference of trust has a major challenge of deciding how long this propagation will continue and how the decaying of trust will be. In [19, 20] trust from user ui to user uj is calculated as in the following Equation 5.

ti,j =

dmax−di,j +1 dmax
0

if di,j ≤ dmax otherwise

(5)

where di,j is the length of the shortest path from ui to uj, and dmax is maximum allowable propagation distance between the users which is the average path length of the trust network Gt and can be given by Equation 6

dmax =

ln(|Ut(Gt)|) ln(AverageDegree(Gt))

(6)

Here, linear decaying of trust is considered from [7] and
decision for propagation length is taken by considering scalefree and small-world complex network property of Gt from [19].
2) Rating Prediction: Similar to the UBCF, the rating for
a user ui to an item ij is predicted as the weighted average of ratings from the neighbors, NGt (ui), to whom ui has shown trust and who all have also rated ij. Here, the weight is inferred trust value from Equation 5. From [7, 19], the formula for

rating prediction in trust-aware recommender system is given by the following Equation 7.

rˆi,j = r¯i +

uk∈NGt (ui) ti,k · (rk,j − r¯k) t uk∈NGt (ui) i,k

(7)

There are several other techniques of prediction, like weight can be the harmonic mean of trust and similarity, threshold based ﬁltering where the threshold is on trust as proposed in [10, 20, 22]. In [20], the authors use reliability on top of trust. Here, we will limit our scope to the prediction using trust only as in Equation 7.
The existing method of trust inference has the following limitations:

• It has not considered the inﬂuence of the connecting users within a path when di,j > 1.
• As it is concerned only about di,j, it has not taken all possible path from ui to uj.
• Inferred trust ti,j in Equation 5 is discrete and the number of discrete trust value varies based on dmax.

To address the above-mentioned limitations we propose a new path based trust inference method.

IV. PROPOSED METHOD
We describe the proposed methods in two parts i) Inferred trust network construction, ii) Algorithms for trust computation. It takes user rating data and trust matrix as input and evaluates the method in terms rating prediction accuracy as output.

A. Inferred Trust Network Construction

As deﬁned in Sec. II, in the trust network we can categorize two types of nodes Truster and Trustee for a trust relation i.e. the directed edge from former to later. For any edge < ui, uj >∈ Et(Gt): ui → uj in trust network Gt, node ui is Truster and uj is Trustee. Physically, if a user is trusted by many other users that indicate trustee user as more trustworthy in a global frame. In graph theoretic way, in a network, the node having greater in-degree is considered as inﬂuential node. To add this global trust inﬂuence of a particular user in the local trust inferencing method (refer Sec. III-B1) we deﬁne degree of trustworthiness for each user.

Deﬁnition (Degree of Trustworthiness). The degree of trustworthiness δi of a particular user ui is proportional to the ratio of in-degree of that node with the maximum in-degree of the trust network Gt. Mathematically,

δi

=

c

·

indeg(ui) (maxindeg(Gt)

+

),

≥ zero

(8)

where c is constant and denotes the factor of how much the maximum inferred trust will shift from the maximum trust value in original network. Higher the Degree of Trustworthiness, more inﬂuential node it will be. Global reputation of a user node in Gt is captured by the Degree of Trustworthiness and be used along with the local trust inference.

23

1) Inferred Trust Along a Path: Two users ui and uj where ui, uj ∈ Ut(Gt) are connected by a path of length (say, l) and 2 ≤ l ≤ dmax and path is < ui, u1, u2, . . . , ul−1, uj >, u1, u2, . . . , ul−1 ∈ Ut(Gt) \ {ui, uj}. The inﬂuence in inferred trust is captured by the degree of trustworthiness of the corre-
sponding intermediate nodes in that path i.e. δ1, δ2, . . . , δl−1. The inﬂuence information is implicit here, as δ comes from
the trust network itself and not from any additional source.
As per our method, for above scenario the inferred trust is
calculated by the following equation:

ti,j =

dmax − l + 1 dmax

+ (δ1 + δ2 + · · · + δl−1)

(9)

B

A

where part A is coming from local trust and part B is inﬂuence due to intermediate nodes in the path from ui and uj.

Lemma. The value of c will always be less than equal to

1 dmax

and

greater

than

0

(i.e.

0<c≤

1 dmax

).

Proof. As per Equation 9, it can be easily said that part A is

constant for some l, 2 ≤ l ≤ dmax and part B varies according to δ value of the intermediate nodes. Now value of ti,j will be maximum when ∀uk ∈ {u1, u2, . . . , ul−1}, indeg(uk) = maxindeg(Gt). Then for = 0, Equation 9 will be

[ti,j ]max = argmax
δk

dmax − l + 1 dmax

+ (l − 1) · (δk)

=

dmax − l + 1 dmax

+ (l − 1) ·

c

·

indeg(uk) maxindeg(Gt)

=

1

−

(l − 1) dmax

+

(l

−

1)

·

c

[∵ indeg(uk) = maxindeg(Gt)]

Now, as per Equation 2,

[ti,j ]max

≤

1

⇒

1

−

(l − 1) dmax

+

(l

−

1)

·

c

≤

1

⇒ (l − 1) · c ≤ (l − 1) dmax

⇒c≤ 1 dmax

Again value of ti,j will be minimum when ∀uk ∈ {u1, u2, . . . , ul−1}, indeg(uk) = 1 [as, uk lies within the path from ui to uj, so uk must have at least 1 incoming edge]. Then for = 0 minimum vale of ti,j will be,

[ti,j ]min = argmin
δk

dmax − l + 1 dmax

+ (l − 1) · (δk)

=

dmax − l + 1 dmax

+

(l

−

1)

·

c

·

1 maxindeg(Gt)

Now, from the above equation, it is trivial that,

[ti,j ]min >

dmax − l + 1 dmax

⇒

(l

− 1) · c ·

1 maxindeg(Gt)

>

0

⇒c>0

Fig. 1: Example of Trust Inference from various paths

Hence, it is proved that for calculating ti,j by Equation 9 c

will

always

lie

within

(0,

1 dmax

].

If c is chosen towards upper bound then for the cases where

a majority of the nodes are having lower in-degree, achieve

signiﬁcant δ sum in the inferred trust. Whereas, if c is chosen

towards lower bound then for the cases where most of the

smaller in-degree users are connected to the higher in-degree

users, the inferred trust will have variation according to in-

degree of the intermediate users. Along with this, for the case

c

=

, 1
dmax

choosing

as zero maps the maximum inferred

trust to 1. Now, to distinguish from the user provided explicit

trust, the value can be set as per designers choice. Choosing

a small value of serves the purpose here in both the cases.

2) Inferred Trust Between Two User Nodes: Now con-
sider the situation, there exist multiple paths (say K) from ui to uj with corresponding length l1, l2, . . . , lK (∀lk ∈ {l1, l2, . . . , lK }, lk ≤ dmax). Then by intuition, we are supposed to trust most trusted user so we take trust coming from
the most inﬂuential path as inferred trust ti,j. Mathematically, it is the maximum trust coming from Equation 9 for all K possible path from ui to uj and it is given by the following Equation 10,

ti,j = MAX
lk∈{l1,...,lK }

dmax − lk dmax

+

1

+

δ1

+

δ2

+

···

+

δlk −1

(10)

One example scenario for Equation 9 and 10 is demon-
strated by Figure 1, where from u1 to u3 can be reached by three possible paths shown in different colors and dmax = 4. By Equation 5, shortest path is blue one via u2 and t1,3 = 0.75. Now by Equation 9, t1,3 inferred trust from blue path will be greater than 0.75 i.e. 0.75+δ2. Similarly, t1,3 = 0.5+δ4+δ5 and 0.25 + δ6 + δ7 + δ8 by red and green path respectively. So, from Equation 10 our proposed trust is the maximum t1,3 coming from blue, red and green path. In extreme case, it may
choose green path if u6, u7, u8 all are much more inﬂuential than u2, u4, u5, i.e. (δ6 + δ7 + δ8) → 0.75.

24

B. Algorithm for Trust Computation
We propose here an algorithm for computing all possible path of length 2, . . . , L (or dmax) in a graph for our problem. We take trust network as its adjacency list or dictionary based structure where for each user node (i.e. dictionary item) it has a list of its out-degree nodes or trustee in a sorted fashion according to their index. Now length 1 path is very trivial from its out-degree list of the graph.
1) Data Structure for Path Computation: We use a data structure to store and compute all possible path list from each vertex up to length L as a list of list format, shown in Figure 2.

Fig. 2: List of path list of each node in the graph Gt
Operations can be performed on UL are, (a) APPEND: performs on a path object UL[i, t], takes node
number(j) as input parameter and returns a path by appending j to the path t starting from node i. (b) ADD: performs on a list item UL[i] and adds a path (list of nodes) in the path-list of node i

Algorithm 1: Algorithm for calculating all possible paths

up to length L in trust network Gt

Data: U [1 . . . n] Trustee user list per user (Out-degree

vertex list of Gt), integer L Result: UL[1 . . . n] List of all possible path in Gt up to
length L per user

1 UL ← U ; 2 for each node i ∈ {1 . . . n} do

3 for l ∈ {2 . . . L} do

4

for each list item t in UL[i] do

5

x = UL[i, t, l − 1];

6

for j ∈ U [x] do

7

newpath ← N U LL;

8

if j ∈ UL[i, t] or j == i or j ∈ U [i] then

9

continue;

10

else

11

newpath = UL[i, t]·APPEND(j);

12

UL[i]·ADD(newpath);

2) Algorithm for Path Finding: In Algorithm 1, the for loop at line no. 2 can be parallelized by processing each

node at the same time in multiple processes. In every step

l, the algorithm uses (l − 1) level state of the data structure

UL i.e. for a particular node after computing path of length (l − 1) it tries to extend that to length l by looking its out-

degree vertices. The cycle is removed by the if condition

at line no. 8. The time complexity of the algorithm can

be analyzed by assuming Gt as regular graph of degree d,
d << n, to have loose upper bound. For a particular node at l = 2, for loop of line no. 4 runs at most d2 times. Similarly, at l = 3 for d3 times and so on if at every step

the extended path does not form cycle. Hence, for loop of

line no. 3 runs at most total O(dL) times asymptotically

[d2 + d3 + · · · + dL =

L−1 l=1

d2

· d(l−1)

=

d(dL −d) d−1

=

O(dL)].

So, running time of Algorithm 1 is O(ndL).

Algorithm 2: Algorithm for Trust Computation

Data: Uin[1 . . . n] Truster user list per user (In-degree vertex list of Gt), UL[1 . . . n], c, , dmax

Result: Weight Matrix T of inferred trust network

1 T = AdjacencyM atrix(Gt) ; 2 δ ← 0;

// T[1 ...n][1 ...n]

/* δ[1 . . . n] stores degree of trustworthiness per node */
3 maxDegree = MAX(LENGTH(Uin[1 . . . n])); 4 for each node i ∈ {1 . . . n} do 5 δ[i] = c·LENGTH(Uin[i])/(maxDegree + );

6 for each node i ∈ {1 . . . n} do

7 for each path k in UL[i] do

8

L = LENGTH(UL[i, k]);

9

j = UL[i, k, L];

10

prevT rust = (dmax − L + 1)/dmax;

11

deltaSum = 0;

/* for each intermediate node UL[i, k, l]

*/

12

for l ∈ {1 . . . L − 1} do

13

deltaSum = deltaSum + δ[UL[i, k, l]];

14

newT rust = prevT rust + deltaSum;

15

if newTrust > T[i][j] then

16

T [i][j] = newT rust;

3) Algorithm for Inferred Trust Calculation: Algorithm 2

has two parts, degree of trustworthiness calculation for each

node from line no. 2 to 5 by the Equation 8 and trust

computation from line no. 6 to 16 by the Equation 10. At

line no. 3, it computes the maximum in-degree by computing

the length of in-degree node list for each node. Degree of

trustworthiness is calculated in θ(n) time. For the next part

there can be at most dL number of paths which leads to that

the for loop at line no 7 will run with the upper bound O(LdL)

[1d2 + 2d3 + · · · + (L − 1)dL =

L l=2

(l

−

1)dl

LdL =

O(LdL)]. So, running time of Algorithm 2 is O(nLdL).

Similar to Algorithm 1, Algorithm 2 can be parallelized by

computing for loop at line no. 6 for each node in parallel.

Using this inferred trust network for recommendation, rating

ri,j for user ui to item ij is predicted using the method

25

discussed in Sec. III-B2.
V. DATASET EXPLORATION
We evaluated the performance of our proposed method on two real datasets FilmTrust and CiaoDVD. Both datasets are taken from https://www.librec.net/datasets.html. The statistics of the original dataset is given in Table II and the dataset collection description can be found in [23, 24] for FilmTrust and in [25] for CiaoDVD. The visualization of Trust Network is shown in Figure 3 .

(a) FilmTrust

(b) CiaoDVD

Fig. 3: Visualization of Original Trust Network

From Figure 3, it can be easily seen that there are several components in the graph mainly consisting two or three vertices. Using inference method of the equation 10 those cannot be connected to the main giant component so only the main component of trust graph is considered for trust propagation. FilmTrust dataset consists of 610 users with 1604 trust statements whereas CiaoDVD dataset holds 4562 users with 40073 trust statements in its main component of the trust graph.
For the analysis and comparison with existing methods, we have selected the common users present in both rating and trust data. The characteristics of the datasets are given in Table III. Before applying the trust propagation length which is based on the scale-free network property as per [19, 20] we have shown the Power-Law degree distribution of the trust network generated by common users described in the Table III.

VI. EXPERIMENTAL EVALUATION
To evaluate the recommendation accuracy we have conducted an off-line experiment using leave-on-out mechanism. Each rating value of the datasets is predicted by removing that entry. The accuracy of prediction is measured in terms of Mean Absolute Error (MAE) and Mean Absolute User Error (MAUE) value. MAE is an average of the absolute difference for all the predicted ratings. It can be described by the Equation 11.

MAE = abs(rˆi,j − ri,j )

(11)

no. of ratings

MAUE can be calculated for each user from the absolute difference of predicted rating with its actual for the items purchased by that user only. MAUE for user ui can be described by the Equation 12.

MAUEui =

ij∈Iui abs(rˆi,j − ri,j ) |Iui |

(12)

The actual MAUE for the recommender system is an average of all the MAUE per user and deﬁned by the Equation 13.

MAUE =

ui∈U MAUEui |U |

(13)

We have compared our proposed methods with User Based Collaborative Filtering (UBCF) and existing trust based Collaborative Filtering (Trust-1). Our proposed inferred trust network based on degree of trustworthiness is referred as Trust-2. For UBCF, we have chosen Pearson Correlation Coefﬁcient as similarity metric described in Sec. III-A1 and used all positive similar user as nearest neighbors. On the other hand, here trust Base CF will depend on the maximum trust propagation path length dmax which is average path length in the network and equivalent to the Equation 6. For Filmtrust dataset, averagedegree is 5.4642, hence dmax = ln(530)/ln(5.4642) ≈ 3.6934 = 4 and for CiaoDVD dataset, average-degree is 16.7212, hence dmax = ln(2687)/ln(16.7212) ≈ 2.8034 = 3. To compute degree of trustworthiness, we have taken value as 1 and c as 1/dmax. The density of the inferred trust network becomes 21.5829% and 13.8014% for FilmTrust and CiaoDVD datasets respectively.
The results of the experiments are shown in the Table IV. For CiaoDVD dataset, both MAE and MAUE values have improved from all the other methods in Trust-2. In case of CiaoDVD, the gradual improvement from UBCF to Trust1 and then Trust-2 is achieved due to the construct of the datasets. The density of rating dataset is very low and the having heavy tailed power-law in-degree distribution for trust network. Whereas, for FilmTrust dataset, the MAE value is not improved for trust based method from UBCF but Trust-2 achieves lower MAE than Trust-1. The reason for this is that many of the cold start users in rating data are zero out-degree users in trust data. There are 258 users covering 51% of the total users in the system of who has rated less than 20 items and out of these 70 users (27%) are zero out-degree. Neighbors for zero out-degree users is not recoverable by this inference. The MAUE for users of different category based on a number of items purchased is discussed further focusing mainly on the cold start users. For FilmTrust dataset, the quartile of item count per user is [2, 23.25, 44.5, 85.75, 244]. Users are categorized on item range of step size 10 up to item count 100 and later step of size 50. The MAUE for each category of users is noted in the Table V by highlighting minimum error among all the methods. The Bar Plot for the same is shown in the Figure 5. It can be easily seen that Trust-2 gives the best result for the majority of the

26

TABLE II: Statistics of Original Datasets

Dataset
FilmTrust CiaoDVD

#users
1508 17615

#items
2071 16121

#rating rsize csize
35497 23.54 17.14 72665 4.12 4.50 (a) Rating Dataset

density
0.014263 0.000973

scale / step
[0.5 ∼ 4] / 0.5 [1 ∼ 5] / 1

Dataset #users #trust density

FilmTrust CiaoDVD

874 1853 0.002428 4658 40133 0.001850

(b) Trust Dataset

(a)

(b)

(c)

(d)

Fig. 4: Power-Law Degree Distribution on Log-Log Scale of the Trust Network formed by the common user present in both rating and trust dataset, (a)FilmTrust Dataset for In-Degree with γin = 1.6347, (b)FilmTrust Dataset for Out-Degree with γout = 1.6849, (c)CiaoDVD Dataset for In-Degree with γin = 2.0672, (d)CiaoDVD Dataset for Out-Degree with γout = 2.9690.

TABLE III: Statistics of Datasets used for Experiments

Dataset
FilmTrust CiaoDVD

#users
530 2687

#items
1888 13023

#rating
14272 34075

#trust
1448 22465

rating density
1.4263% 0.0974%

trust density
0.5164% 0.3113%

TABLE IV: Results of Experiment for Evaluation

MAE MAUE

Dataset
FilmTrust CiaoDVD
FilmTrust CiaoDVD

UBCF
0.6524 0.7980
0.6673 0.7956

Trust-1
0.6674 0.7906
0.6784 0.8060

Trust-2
0.6591 0.7760
0.6671 0.7808

cases when users have given few number of ratings. Whereas, UBCF performs better for the heavy rated users.
For CiaoDVD dataset, the quartile of item count per user is [2, 33, 67, 137, 1106]. Here, more than 50% of users are cold start users rated less than items 10 items. Similar to FilmTrust dataset, users are categorized had MAUE values for each category is listed in the Table VI. The Bar plot of the same is shown in the Figure. 6. Here, for all the cases MAUE values are less in trust based method from its counterpart. Also, Trust-2 outperforms in all the cases due to very low rsize of rating dataset [II].
VII. CONCLUSION AND FUTURE SCOPE
In this work, we have used the graph theoretical approach for trust inference between two users and considered the inﬂuence of a user by degree-of-trustworthiness. This initiates of choosing maximum trust gaining path from all the available paths between two nodes in the trust network. We have shown

TABLE V: MAUE per User Category of FilmTrust

Item Count(#users) < 10 (132)
11 20 (126) 21 30 (84) 31 40 (45) 41 50 (64) 51 60 (26) 61 70 (4) 71 80 (3) 81 90 (3) 91 100 (5) 101 150 (9) 151 200 (4)
> 200 (2)

UBCF
0.754849 0.629907 0.646646 0.615494 0.589303 0.687864 0.759323 0.632733 0.802189 0.685747 0.721646 0.810605 0.582429

Trust-1
0.768931 0.633991 0.656887 0.609827 0.61468 0.71394 0.777824 0.622812 0.751122 0.68699 0.753772 0.840092 0.622773

Trust-2 0.748121 0.624155 0.649426 0.603429 0.610115 0.705644 0.77099 0.611919 0.757363 0.660804 0.742574 0.830762 0.619766

TABLE VI: MAUE per User Category of CiaoDVD

Item Count(#users) < 10 (1340) 11 20 (264) 21 30 (109) 31 40 (54) 41 50 (32) 51 60 (22) 61 70 (16) 71 80 (9) 81 90 (10) 91 100 (8)
101 130 (10) 131 160 (8) 161 200 (6) 201 300 (11)
> 300 (11)

UBCF
0.805566 0.759168 0.763291 0.757964 0.794759 0.838443 0.868752 0.652386 0.789419 0.731232 0.776505 0.869902 0.892034 0.847066 0.806224

Trust-1
0.82454 0.748781 0.758656 0.751031 0.784695 0.826305 0.843946 0.650396
0.7867 0.740631 0.766072 0.840406 0.867792 0.814724 0.795353

Trust-2
0.793702 0.734414 0.748578 0.741331 0.779448 0.820648 0.836588 0.61914 0.773447 0.709727 0.757354 0.836809 0.863434 0.799766 0.783272

that this incorporation of inﬂuence improves the recommendation accuracy. Further, we have shown that the Trust-2 achieves better improvement among other two, mainly for cold start users. Here, we have not studied how hit-rate is behaving by

27

Fig. 5: FilmTrust
Fig. 6: CiaoDVD
trust incorporation. In future, that can be analyzed. Also, we can add distrust statement in this method and do the further treatment of it. There is another scope of improvement is to design better algorithm in this problem space for all possible path computation to minimize space and time complexity.
ACKNOWLEDGMENT The work has been ﬁnancially supported by the project Ebusiness Center of Excellence funded by Ministry of Human Resource and Development (MHRD), Government of India under the scheme of Center for Training and Research in Frontier Areas of Science and Technology (FAST), Grant No. F.No.5-5/2014-TS.VII. First author would also like to thanks Suman Banerjee for insightful comments.
REFERENCES
[1] F. Ricci, L. Rokach, B. Shapira, and P. B. Kantor, Recommender Systems Handbook, 1st ed. New York, NY, USA: Springer-Verlag New York, Inc., 2010.
[2] X. Ning, C. Desrosiers, and G. Karypis, “A comprehensive survey of neighborhood-based recommendation methods,” in Recommender systems handbook. Springer, 2015, pp. 37–76.

[3] Y. Koren, R. Bell, and C. Volinsky, “Matrix factorization techniques for recommender systems,” Computer, vol. 42, no. 8, 2009.
[4] R. Salakhutdinov and A. Mnih, “Bayesian probabilistic matrix factorization using markov chain monte carlo,” in Proceedings of the 25th international conference on Machine learning. ACM, 2008, pp. 880– 887.
[5] S. Khusro, Z. Ali, and I. Ullah, Recommender Systems: Issues, Challenges, and Research Opportunities. Singapore: Springer Singapore, 2016, pp. 1179–1189. [Online]. Available: https://doi.org/10.1007/978-981-10-0557-2 112
[6] G. Adomavicius and A. Tuzhilin, “Toward the next generation of recommender systems: A survey of the state-of-the-art and possible extensions,” IEEE transactions on knowledge and data engineering, vol. 17, no. 6, pp. 734–749, 2005.
[7] P. Massa, P. Avesani et al., “Trust-aware collaborative ﬁltering for recommender systems,” CoopIS/DOA/ODBASE (1), vol. 3290, pp. 492– 508, 2004.
[8] H. Ma, D. Zhou, C. Liu, M. R. Lyu, and I. King, “Recommender systems with social regularization,” in Proceedings of the fourth ACM international conference on Web search and data mining. ACM, 2011, pp. 287–296.
[9] J. Golbeck, “Generating predictive movie recommendations from trust in social networks,” Trust Management, pp. 93–104, 2006.
[10] J. O’Donovan and B. Smyth, “Trust in recommender systems,” in Proceedings of the 10th international conference on Intelligent user interfaces. ACM, 2005, pp. 167–174.
[11] P. Massa and P. Avesani, “Trust-aware recommender systems,” in Proceedings of the 2007 ACM conference on Recommender systems. ACM, 2007, pp. 17–24.
[12] J. Golbeck, B. Parsia, and J. Hendler, “Trust networks on the semantic web,” Cooperative information agents VII, pp. 238–249, 2003.
[13] P. Avesani, P. Massa, and R. Tiella, “A trust-enhanced recommender system application: Moleskiing,” in Proceedings of the 2005 ACM symposium on Applied computing. ACM, 2005, pp. 1589–1593.
[14] J. A. Golbeck, “Computing and applying trust in web-based social networks,” Ph.D. dissertation, 2005.
[15] W. Jiang, G. Wang, M. Z. A. Bhuiyan, and J. Wu, “Understanding graph-based trust evaluation in online social networks: Methodologies and challenges,” ACM Computing Surveys (CSUR), vol. 49, no. 1, p. 10, 2016.
[16] P. Gao, H. Miao, J. S. Baras, and J. Golbeck, “Star: Semiring trust inference for trust-aware social recommenders.” in RecSys, 2016, pp. 301–308.
[17] G. Guo, J. Zhang, and N. Yorke-Smith, “Trustsvd: Collaborative ﬁltering with both the explicit and implicit inﬂuence of user trust and of item ratings.” in Aaai, 2015, pp. 123–129.
[18] B. Yang, Y. Lei, J. Liu, and W. Li, “Social collaborative ﬁltering by trust,” IEEE transactions on pattern analysis and machine intelligence, vol. 39, no. 8, pp. 1633–1647, 2017.
[19] W. Yuan, D. Guan, Y.-K. Lee, and S. Lee, “The small-world trust network,” Applied Intelligence, vol. 35, no. 3, pp. 399–410, 2011.
[20] P. Moradi and S. Ahmadian, “A reliability-based recommendation method to improve trust-aware recommender systems,” Expert Systems with Applications, vol. 42, no. 21, pp. 7386–7398, 2015.
[21] A. Jøsang, R. Ismail, and C. Boyd, “A survey of trust and reputation systems for online service provision,” Decision support systems, vol. 43, no. 2, pp. 618–644, 2007.
[22] Y. Du, X. Du, and L. Huang, “Improve the collaborative ﬁltering recommender system performance by trust network construction,” Chinese Journal of Electronics, vol. 25, no. 3, pp. 418–423, 2016.
[23] J. Golbeck, J. Hendler et al., “Filmtrust: Movie recommendations using trust in web-based social networks,” in Proceedings of the IEEE Consumer communications and networking conference, vol. 96, no. 1, 2006, pp. 282–286.
[24] G. Guo, J. Zhang, and N. Yorke-Smith, “A novel bayesian similarity measure for recommender systems,” in Proceedings of the 23rd International Joint Conference on Artiﬁcial Intelligence (IJCAI), 2013, pp. 2619–2625.
[25] G. Guo, J. Zhang, D. Thalmann, and N. Yorke-Smith, “Etaf: An extended trust antecedents framework for trust prediction,” in Proceedings of the 2014 International Conference on Advances in Social Networks Analysis and Mining (ASONAM), 2014, pp. 540–547.

28

