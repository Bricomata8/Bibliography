Hindawi Publishing Corporation Mathematical Problems in Engineering Volume 2016, Article ID 8947157, 20 pages http://dx.doi.org/10.1155/2016/8947157
Research Article Verifying Service Choreography Model Based on Description Logic
Minggang Yu, Zhixue Wang, and Xiaoxing Niu
Institute of Command Information System, PLA University of Science and Technology, Nanjing 210007, China
Correspondence should be addressed to Zhixue Wang; wzxcx@163.com
Received 9 May 2015; Revised 23 June 2015; Accepted 14 July 2015 Academic Editor: Jean-Franc¬∏ois Monin Copyright ¬© 2016 Minggang Yu et al. This is an open access article distributed under the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.
Web Services Choreography Description Language lacks a formal system to accurately express the semantics of service behaviors and verify the correctness of a service choreography model. The paper presents a new approach of choreography model verification based on Description Logic. A metamodel of service choreography is built to provide a conceptual framework to capture the formal syntax and semantics of service choreography. Based on the framework, a set of rules and constraints are defined in Description Logic for choreography model verification. To automate model verification, the UML-based service choreography model will be transformed, by the given algorithms, into the DL-based ontology, and thus the model properties can be verified by reasoning through the ontology with the help of a popular DL reasoner. A case study is given to demonstrate applicability of the method. Furthermore, the work will be compared with other related researches.

1. Introduction
Web service technology has been popularly applied due to its power of interoperation, which allows various applications to run on heterogeneous platforms. Standards for web service composition cover two different levels of view: choreography and orchestration [1, 2]. The choreography view describes the interactions between services from a global perspective, while the orchestration view focuses on the interactions between one party and others. The web service choreography description language (WS-CDL) [3] is an XML-based language for the description of peer-to-peer collaborations of participants from a global viewpoint. However, WS-CDL is a declarative language and the specified concepts are weakly constrained. It lacks a formal system to accurately express the semantics of service behaviors and verify the correctness of a service choreography model. As a result, the built models may suffer from the problem of inconsistency, conflict, and realizability.
A number of approaches are suggested for formally modeling and verifying web services composition. Xiao et al. [4] proposed a process algebra called probabilistic priced process

algebra (PPPA) for modeling and analyzing web service composition from both functionality and nonfunctionality, such as reliability and performance. Moreover, they provided a united method based on PPPA to model and analyze both functionality and QoS of web service composition. Cambronero et al. [5] presented an approach to validation and verification of web services choreographies and more specifically for composite web services systems with timing restrictions. They defined operational semantics for a relevant subset of WS-CDL and then provided a translation of the considered subset into a network of timed automata for the validation and verification using the UPPAAL tool. Zhou et al. [6] put forward an approach to testing WS-CDL programs automatically. The dynamic symbolic execution technique was used to generate test inputs, and assertions are treated as the test oracles. An engine that can simulate WS-CDL is used to execute the WS-CDL programs during symbolic execution. Besson et al. [7] adapted the automated testing techniques used by the Agile Software Development community to the SOA context to enable test-driven development of choreographies. They present the first step in that direction, a software

2

Mathematical Problems in Engineering

prototype composed of ad hoc automated test case scripts for testing a web service choreography. Gu et al. [8, 9] originally advocated for a formal modeling framework, called Abstract WS-CDL. This includes grammar, congruence relations, and operational semantics. They defined a set of mappings of the Abstract WS-CDL global model to the Pi calculus-based local model and subsequently suggested a set of deductive reasoning rules of state reachability and terminability.
One of the crucial questions in choreography-based development is to check the realizability and conformance properties. Halle¬¥ and Bultan [10] proposed a novel algorithm for deciding realizability by computing a finite state model that keeps track of the information about the global state of a conversation protocol that each peer can deduce from the messages it sends and receives. McNeile [11] provided a new technique that uses compositions of partial descriptions to define a choreography, and he demonstrated that realizability of a choreography defined as a composition only needs to be established individually for the components of the composition. Basu et al. [12] gave necessary and sufficient conditions for realizability of choreographies and implemented the proposed realizability check on three granularities: (1) web service choreographies, (2) singularity OS channel contracts, and (3) UML collaboration (communication) diagrams. Yeung [13] put forward a formal approach to web service composition and conformance verification based on WS-CDL and WS-BPEL. The main contributions included a precise notion of choreography conformance upon which verification is based and support for the complementary use of visual modeling (e.g., UML) and standard WS-‚àó notations in composition.
We argue that checking the realizability and conformance properties should be approached in two ways. One is to check the completeness and consistency of a choreography specification to guarantee there are no logical conflicts in the specification. The other is to check whether the specified choreography behaves in a correct way or whether the system functions well to complete its jobs. Having investigated the recent research results, we found that most of them addressed only one side rather than both.
To solve the problem above, we propose an approach of choreography model verification based on Description Logic, or CMV-DL. A service choreography modeling framework is provided to support UML-based modeling. The metamodel of service choreography extends the WS-CDL specification. Two algorithms are given to transform the UML-based service choreography model into the DL-based ontology through which the verification can be made using a DL reasoner.
To enable automatic verification, we introduce Description Logic (DL) [14] to formalize the choreography model and define a set of rules and constraints for verification. DL is a knowledge representation language and is a decidable subset of first-order predicate logic. It contains a set of basic concept constructors, such as concept consumption (‚äë) and universal constraint (‚àÄ). As a subset of DL, SHOIN(D) [15] is the logical basis of web ontology language (OWL) [16]. It is powerful in knowledge description ability, reasoning decidability, and knowledge reusability and more importantly

there are available supporting reasoners such Pellet [17] and Racer.
The rest of the paper is organized as follows. Section 2 introduces the service choreography modeling framework, highlighting the metamodel of service choreography. Section 3 discusses CMV-DL further on model verification mechanism and UML-DL conversion and introduces the deductive reasoning rules specified in Semantic Web Rule Language (SWRL) [18]. Section 4 provides a case study to show the potential usage of CMV-DL. Section 5 investigates the related work and draws a comparison between CMV-DL and other choreography verification methods. The final section brings a conclusion and foresees our future work.
2. Service Choreography Modeling Framework
According to the OMG‚Äôs four-layered metamodel architecture, UML can be extended by defining new stereotypes at metamodel level (M2) [19] and thus becomes a domainspecific language. The modeling framework for service choreography is accordingly defined in two levels, as shown in Figure 1. The metamodel of service choreography is built by extending the concepts of WS-CDL to provide the syntax and semantics for visually presenting a choreography and define a set of domain rules for model checking. The application model specifies the concepts of service choreography of an application (or a system) by instantiating the concepts of the metamodel.
2.1. Metamodel of Service Choreography. To build the metamodel of service choreography, we define the main concepts of service choreography by referring to the WS-CDL specification.
Definition 1 (session (Ì†µÌ±Ü)). A session is composed of a set of basic interactive activities which are performed by one or more participants in order to complete a specific function. Sessions can be denoted as a four-tuple structure: Ì†µÌ±Ü = ‚ü®Ì†µÌ±Å, Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°, Ì†µÌ±ÖÌ†µÌ±ú, Ì†µÌ±ÉÌ†µÌ±ü‚ü©, where Ì†µÌ±Å is the name, Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±° refers to the activities that realize this specific function, Ì†µÌ±ÖÌ†µÌ±ú is a set of the roles that participate in the activities, and Ì†µÌ±ÉÌ†µÌ±ü is a set of the preconditions for carrying out this session.
Definition 2 (choreography (Ì†µÌ∞∂‚ÑéÌ†µÌ±ú)). A choreography defines the collaboration contracts between the participants and the interoperations of cross-system behaviors. It can be denoted as a three-tuple structure: Ì†µÌ∞∂‚ÑéÌ†µÌ±ú = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÖÌ†µÌ±ú, Ì†µÌ±Ü‚ü©, where Ì†µÌ±Å is the name, Ì†µÌ±ÖÌ†µÌ±ú is a set of the roles that participate in the interoperations, and Ì†µÌ±Ü represents a set of sessions to be executed in the interoperation processes.
Definition 3 (metamodel). The metamodel of service choreography defines the syntax and semantics for visually presenting a choreography and provides a set of domain rules for checking the correctness properties of a choreography model. It is composed of three parts: ‚ü®MetaConcept, MetaRelation, DomainRule‚ü©, where MetaConcept and MetaRelation are sets of metaconcepts and metarelations which are defined by inheriting the counterpart concepts from the WS-CDL

Mathematical Problems in Engineering

3

Service choreography model

Metamodel of service choreography

‚ÄúClass‚Äù MetaConcept

‚ÄúRelationship‚Äù MetaRelation

‚ÄúRule‚Äù DomainRule

Instance of

Instance of Constraint

‚ÄúFunction‚Äù AppFunction

‚ÄúIndividual‚Äù AppConcept

‚ÄúRelationship‚Äù AppRelation

Application model of service choreography

Mapping Mapping

The four-level hierarchy of OMG
M3 (MOF) Meta-metamodel
Instance of M2
Metamodel
Instance of
M1 model
Instance of M0 data

Figure 1: Service choreography modeling framework.

Class --Service choreography metaconcept model based on WS-CDL

Choreography

BasicActivity

StructuralActivity

0..‚àóC1o.n.‚àótain+succeeding+p0.r.e‚àópositive 0..‚àó

Precondition Execute

Session

1..‚àó Participate_by

1..‚àó

Activity 1..‚àó

Depend 1..‚àó

Channel

1..‚àó AtomicSession
Service 1..‚àó
Construct Participant

1..‚àó

CompoundSession 1..‚àó

1..‚àó Operation

Provide 1..‚àó

Belong_to Implement

Perform

1..‚àó

2

Role
1..‚àó 1 Bind 1
Interface

Link
Has Variable 1..‚àó Own 1..‚àó 1..‚àó Port

Figure 2: Metamodel of service choreography based on WS-CDL.

specification. The core elements of the metamodel are shown in Figure 2.
2.1.1. MetaConcept. MetaConcept is a finite set of metaconcepts that originate from WS-CDL but are not limited to it. New concepts, such as Session, AtomicSession, and CompoundSession, are extended for the purpose of formal modeling and verification. Table 1 provides detailed definitions and descriptions of the metaconcepts.

The concept activity can be divided into two kinds: BasicActivity (Ì†µÌ∞¥Ì†µÌ±èÌ†µÌ±éÌ†µÌ±†) and StructuralActivity (Ì†µÌ∞¥Ì†µÌ±†Ì†µÌ±°Ì†µÌ±ü):

Act & Abas | Astr

(1)

Ì†µÌ∞¥Ì†µÌ±èÌ†µÌ±éÌ†µÌ±† is defined as

Abas & NoAction | SilentAction | Interaction | Assign | (2)
Perform

4

Mathematical Problems in Engineering

Ì†µÌ∞¥Ì†µÌ±†Ì†µÌ±°Ì†µÌ±ü is used to describe a compound activity in following syntax and semantics:

Ì†µÌ∞¥Ì†µÌ±†Ì†µÌ±°Ì†µÌ±ü & [Ì†µÌ±ù] Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°

(condition)

| [Ì†µÌ±ù] ‚àó Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°

(repeat)

| [Ì†µÌ±ùÌ†µÌ±î] [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±° (workunit)

| Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 ‚ãÖ Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2

(sequence)

(3)

| Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 ‚Äñ Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2

(parallel)

| Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1Œ§Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2

(non-deterministic)

| [Ì†µÌ±ù1] Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 + [Ì†µÌ±ù2] Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2 (choice)

The structure of a compound activity appears either in workunit pattern or in control-flow pattern. The workunit structure is defined in WS-CDL by three substructures. The condition structure is expressed as [Ì†µÌ±ù]Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°. The repeat

structure is expressed as [Ì†µÌ±ù] ‚àó Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°. A workunit structure is
expressed as [Ì†µÌ±ùÌ†µÌ±î][Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°, which means that the activity will be blocked until the precondition Ì†µÌ±ùÌ†µÌ±î is evaluated to be ‚Äútrue‚Äù; that is, the activity is triggered by the precondition. If
Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±° terminates successfully and the repetition condition Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù is ‚Äútrue,‚Äù the workunit will repeat; otherwise, it will finish.
A control-flow structure is defined as any combination of
sequentially executed activities Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 ‚ãÖ Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2, parallel executed activities Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 ‚Äñ Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2, nondeterministically executed activities Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1Œ§Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2, or selectively executed activities [Ì†µÌ±ù1]Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°1 + [Ì†µÌ±ù2]Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°2.
The concept session can also be divided into two kinds:
AtomicSession (Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö) and CompoundSession (Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö):

Ì†µÌ±Ü & Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö | Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö

(4)

An atomic session may appear in any form of the following:

Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö & Ì†µÌ±ÖÌ†µÌ±ú (√ò)

(Ì†µÌ±ÜÌ†µÌ±õÌ†µÌ±ú)

| Ì†µÌ±ÖÌ†µÌ±ú (Ì†µÌºè)

(Ì†µÌ±Üsilent)

| assign (Ì†µÌ±ÖÌ†µÌ±ú ‚ãÖ Ì†µÌ±• = Ì†µÌ±í)

(Ì†µÌ±Üassign)

| request (Ì†µÌ±ÖÌ†µÌ±ú1 ‚ãÖ Ì†µÌ±• ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÖÌ†µÌ±ú2 ‚ãÖ Ì†µÌ±¶, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÖÌ†µÌ±ú2)

(Ì†µÌ±Üreq)

(5)

| respond (Ì†µÌ±ÖÌ†µÌ±ú1 ‚ãÖ Ì†µÌ±• ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÖÌ†µÌ±ú2 ‚ãÖ Ì†µÌ±¶, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÖÌ†µÌ±ú1)

(Ì†µÌ±Üresp)

| req-resp (Ì†µÌ±ÖÌ†µÌ±ú1 ‚ãÖ Ì†µÌ±• ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÖÌ†µÌ±ú2 ‚ãÖ Ì†µÌ±¶, Ì†µÌ±ÖÌ†µÌ±ú1 ‚ãÖ V ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÖÌ†µÌ±ú2 ‚ãÖ Ì†µÌ±¢, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÖÌ†µÌ±ú2) (Ì†µÌ±Üreq-resp)

| Ì†µÌ∞∂‚ÑéÌ†µÌ±ú (Ì†µÌ±•1, Ì†µÌ±•2, Ì†µÌ±•3, . . .)

(Ì†µÌ±Üperform)

| Ì†µÌºì

(NULL)

Ì†µÌ±ÜÌ†µÌ±õÌ†µÌ±ú describes that the role Ì†µÌ±ÖÌ†µÌ±ú does not perform any operation; Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±ñÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±õÌ†µÌ±° means that Ì†µÌ±ÖÌ†µÌ±ú performs an internal silent action Ì†µÌºè; Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ describes an assignment operation that the value Ì†µÌ±í is assigned to the variable Ì†µÌ±ÖÌ†µÌ±ú ‚ãÖ Ì†µÌ±•; Ì†µÌ±ÜÌ†µÌ±üÌ†µÌ±íÌ†µÌ±û describes a request interaction from Ì†µÌ±ÖÌ†µÌ±ú1 to Ì†µÌ±ÖÌ†µÌ±ú2 through Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÖÌ†µÌ±ú2, where the request message is sent from Ì†µÌ±ÖÌ†µÌ±ú1 ‚ãÖ Ì†µÌ±• to Ì†µÌ±ÖÌ†µÌ±ú2 ‚ãÖ Ì†µÌ±¶; Ì†µÌ±ÜÌ†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù describes a response interaction; Ì†µÌ±ÜÌ†µÌ±üÌ†µÌ±íÌ†µÌ±û-Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù describes requestresponse interaction; Ì†µÌ±ÜÌ†µÌ±ùÌ†µÌ±íÌ†µÌ±üÌ†µÌ±ìÌ†µÌ±úÌ†µÌ±üÌ†µÌ±ö describes invoking operation between sessions; and NULL denotes the termination state of
a session.
Two or more atomic sessions may be combined with one
another by structural connectors to become a compound session Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö. The combination follows the following syntax and semantics:

Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö & Ì†µÌ±Ü1 ‚Äñ Ì†µÌ±Ü2

(Ì†µÌ±ÜÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ô)

| Ì†µÌ±Ü1 ‚ãÖ Ì†µÌ±Ü2

(Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±íÌ†µÌ±ûÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í)

| [Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù2] Ì†µÌ±Ü2 (Ì†µÌ±ÜÌ†µÌ±ê‚ÑéÌ†µÌ±úÌ†µÌ±ñÌ†µÌ±êÌ†µÌ±í)

(6)

| [Ì†µÌ±ùÌ†µÌ±î] [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü (Ì†µÌ±ÜÌ†µÌ±§Ì†µÌ±úÌ†µÌ±üÌ†µÌ±òÌ†µÌ±¢Ì†µÌ±õÌ†µÌ±ñÌ†µÌ±°)

Ì†µÌ±ÜÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ô describes two parallel executed sessions; Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±íÌ†µÌ±ûÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í describes two sequentially executed sessions where Ì†µÌ±Ü1 is the predecessor and Ì†µÌ±Ü2 is the successor; Ì†µÌ±ÜÌ†µÌ±ê‚ÑéÌ†µÌ±úÌ†µÌ±ñÌ†µÌ±êÌ†µÌ±í describes two

selectively executed sessions that either Ì†µÌ±Ü1 or Ì†µÌ±Ü2 will be executed depending on whether the precondition Ì†µÌ±ù1 or Ì†µÌ±ù2 is met; Ì†µÌ±ÜÌ†µÌ±§Ì†µÌ±úÌ†µÌ±üÌ†µÌ±òÌ†µÌ±¢Ì†µÌ±õÌ†µÌ±ñÌ†µÌ±° describes a repeatedly executed session, where Ì†µÌ±Ü is triggered by the precondition Ì†µÌ±ùÌ†µÌ±î and it will be repeatedly
executed until Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù becomes ‚Äúfalse.‚Äù

2.1.2. MetaRelation. MetaRelation is a finite set of semantic
associations between the metaconcepts appearing in Table 1. It inherits the concepts of semantic verbs, such as Support, Perform, and Depend, from WS-CDL and is supplemented by some new relations such as SessionDeduction, Congruence, and Sequence, to enable comprehensive model checking.
Table 2 provides a set of core metarelations accompanied with their formal semantics specified in DL. The universal constraint ‚àÄ is a DL symbol interpreted by (‚àÄÌ†µÌ±Ö ‚ãÖ Ì†µÌ∞∂)Ì†µÌ∞º = {Ì†µÌ±é ‚àà ŒîÌ†µÌ∞º | ‚àÄÌ†µÌ±è((Ì†µÌ±é, Ì†µÌ±è) ‚àà Ì†µÌ±ÖÌ†µÌ∞º ‚Üí Ì†µÌ±è ‚àà Ì†µÌ∞∂Ì†µÌ∞º)}, where Ì†µÌ∞∂ is a set of metaconcepts, Ì†µÌ±Ö is a set of metarelations, and ŒîÌ†µÌ∞º denotes nonempty set of discourse domains.

Definition 4 (SessionDeduction). SessionDeduction is defined

by a labeled

transition system: Ì†µÌ±Ü

Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä

Ì†µÌ±ÜÌÆ†Ì∞†, meaning

that the

session Ì†µÌ±Ü will become Ì†µÌ±ÜÌÆ†Ì∞† in the future when the precondition Ì†µÌ±ù

Mathematical Problems in Engineering

5

Table 1: A summary of metaconcepts of service choreography for the metamodel (a fragment).

Concepts Participant

Definition Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±ü = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÖÌ†µÌ±ú‚ü©

Role

Ì†µÌ±ÖÌ†µÌ±ú = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÇÌ†µÌ±ù, Ì†µÌ∞∂‚Ñé, Ì†µÌ±âÌ†µÌ±é‚ü©

Activity

Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±° = ‚ü®Ì†µÌ±Å, Ì†µÌ∞∂Ì†µÌ±é‚ü©

Precondition Guard Variable Operation

Ì†µÌ±É = ‚ü®Ì†µÌ±Å, Boolean‚ü© Ì†µÌ∞∫ = ‚ü®Ì†µÌ±É, Ì†µÌ±Ü‚ü©
Ì†µÌ±âÌ†µÌ±é = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÖÌ†µÌ±ú‚ü© Ì†µÌ±ÇÌ†µÌ±ù = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÖÌ†µÌ±ú‚ü©

Channel

Ì†µÌ∞∂‚Ñé = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÖÌ†µÌ±ú, Ì†µÌ∞øÌ†µÌ±úÌ†µÌ±ê, Ì†µÌ∞ºÌ†µÌ±õÌ†µÌ±°‚ü©

Interface Port

Ì†µÌ∞ºÌ†µÌ±õ = ‚ü®Ì†µÌ±Å, Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±ü‚ü© Ì†µÌ±ÉÌ†µÌ±ú = ‚ü®Ì†µÌ±Å, Ì†µÌ∞ºÌ†µÌ±õ‚ü©

Description The business entities or web services that participate in service interaction. Ì†µÌ±Å is the name and Ì†µÌ±ÖÌ†µÌ±ú denotes the roles it implements. The observable behavior a participant exhibits in order to collaborate. Ì†µÌ±ÖÌ†µÌ±ú initiates the collaborative operations (Ì†µÌ±ÇÌ†µÌ±ù) through channels (Ì†µÌ∞∂‚Ñé) with other roles, and the local variables (Ì†µÌ±âÌ†µÌ±é) will be affected. The actual functions performed in the choreography. They (Ì†µÌ∞∂Ì†µÌ±é) can be categorized into basic activities and structural activities.
The preconditions of session execution, specified in Boolean type.
The bindings of preconditions to sessions.
The variables a role has. It is a component of a role specification.
The operations a role provides. It is a component of a role specification. The locations and manners through which information is exchanged between roles. Ì†µÌ∞øÌ†µÌ±úÌ†µÌ±ê and Ì†µÌ∞ºÌ†µÌ±õÌ†µÌ±° denote the channel locations and interaction activities, respectively.
The declaration of the participants (Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±ü) that collaborate.
The way through which roles interact. One interface may correspond to one role and multiports.

Table 2: A summary of metarelations of service choreography for the metamodel (a fragment).

Relations SessionDeduction Congruence Implement Contain Link Belong to HasName Provide Executing Sequence Parallel Choice WorkUnit

Correlative concepts Session √ó Session Session √ó Session Participant √ó Role
Choreography √ó Session Channel √ó Role
Role √ó Participant Role √ó Name
Role √ó operation Session √ó Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Session √ó Session Session √ó Session Session √ó Session Session √ó Session

Formal semantics Session ‚äë ‚àÄ SessionDeduction. Session
Session ‚äë ‚àÄ Congruence. Session Participant ‚äë ‚àÄ Implement.Role Choreography ‚äë ‚àÄ Contain.Session
Channel ‚äë ‚àÄ Link.Role Role ‚äë ‚àÄ Belong to.Participant
Role ‚äë ‚àÄ HasName.Name Role ‚äë ‚àÄ Provide.operation Session ‚äë ‚àÄ Executing. Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Session ‚äë ‚àÄ Sequence. Session Session ‚äë ‚àÄ Parallel. Session Session ‚äë ‚àÄ Choice. Session Session ‚äë ‚àÄ WorkUnit. Session

becomes true and the atomic session Ì†µÌ±é of Ì†µÌ±Ü has been executed. SessionDeduction is defined for state reachability reasoning.
Definition 5 (congruence). If the two sessions Ì†µÌ±Ü and Ì†µÌ±ÜÌÆ†Ì∞† behave exactly in same way, there is a congruence relation between them, marked with the symbol ‚â°. The conditions of congruence are listed as follows:

Ì†µÌ∞∂1 : [Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù2] Ì†µÌ±Ü2 ‚â° [Ì†µÌ±ù2] Ì†µÌ±Ü2 + [Ì†µÌ±ù1] Ì†µÌ±Ü1

Ì†µÌ∞∂2 : ([Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù2] Ì†µÌ±Ü2) + [Ì†µÌ±ù3] Ì†µÌ±Ü3 ‚â° [Ì†µÌ±ù2] Ì†µÌ±Ü2

+ ([Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù3] Ì†µÌ±Ü3)

Ì†µÌ∞∂3 : [Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù2] Ì†µÌ±Ü2 ‚â° [Ì†µÌ±ù1 ‚à® Ì†µÌ±ù2] Ì†µÌ±Ü

(7)

Ì†µÌ∞∂4 : Ì†µÌ±Ü1 ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±Ü2 ‚â° Ì†µÌ±Ü2 ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±Ü1 (Ì†µÌ±Ü1 ‚Äñ Ì†µÌ±Ü2) ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±Ü3 ‚â° Ì†µÌ±Ü1 ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©(Ì†µÌ±Ü2 ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±Ü3 )

Ì†µÌ∞∂5 : Ì†µÌ±Ü ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±ÜÌ†µÌ±õÌ†µÌ±ú ‚â° Ì†µÌ±Ü Ì†µÌ±Ü ÌÆîÌÆîÌÆîÌÆîÌ¥©Ì¥©Ì¥©Ì¥©Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±ñÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±õÌ†µÌ±° ‚â° Ì†µÌ±Ü Ì†µÌ±Ü ‚ÄñÌ†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚â° Ì†µÌ±Ü

Ì†µÌ∞∂6 : Ì†µÌ±ÜÌ†µÌ±õÌ†µÌ±ú. Ì†µÌ±Ü ‚â° Ì†µÌ±Ü Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±ñÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±õÌ†µÌ±°. Ì†µÌ±Ü ‚â° Ì†µÌ±Ü Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø. Ì†µÌ±Ü ‚â° Ì†µÌ±Ü

Definitions of MetaConcept and MetaRelation provide the syntax and semantics for modeling service choreography. In the subsequent sections, we will discuss the operational semantics for session evolution and the deductive domain rules for checking the properties of consistency, completeness, and state reachability of a service choreography model.
2.1.3. DomainRule. Domain rules are description of constraints for specific domains [20]. DomainRule is a set of rules defined upon the metamodel, providing overall constraints that need to be held by all concepts and relations in the service choreography model.
Domain rules of service choreography can be classified into three categories: consistency, completeness, and deductive reasoning. They are not limited to what we give in the following. They may be continuously enriched and improved as applied.
Definition 6 (consistency). A service choreography model is consistent provided that (1) the application model is built

6

Mathematical Problems in Engineering

consistent with the metamodel and (2) there is not any conflict among the concepts of the application model. A typical set of consistency rules are defined below.
(i) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ1: if there is a metarelation Ì†µÌ±Ö that associates the metaconcept Ì†µÌ∞∂Ì†µÌ±ñ with Ì†µÌ∞∂Ì†µÌ±ó (Ì†µÌ∞∂Ì†µÌ±ñ ‚äë ‚àÄÌ†µÌ±Ö ‚ãÖ Ì†µÌ∞∂Ì†µÌ±ó) in the metamodel and Ì†µÌ±ü is instance of Ì†µÌ±Ö that associates the application concept Ì†µÌ±êÌ†µÌ±ñ with Ì†µÌ±êÌ†µÌ±ó in the application model, then Ì†µÌ±êÌ†µÌ±ñ must be an instance of Ì†µÌ∞∂Ì†µÌ±ñ and Ì†µÌ±êÌ†µÌ±ó must be an instance of Ì†µÌ∞∂Ì†µÌ±ó.
(ii) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ2: no more than one relation of Sequence, Parallel, Choice, or WorkUnit is allowed to associate a pair of sessions.
(iii) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ3: if two sessions are associated with the relations Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õÌ†µÌ∞∑Ì†µÌ±íÌ†µÌ±ëÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ(Ì†µÌ±ÜÌ†µÌ±ñ, Ì†µÌ±ÜÌ†µÌ±ó) and Ì†µÌ∞∂Ì†µÌ±úÌ†µÌ±õÌ†µÌ±îÌ†µÌ±üÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í(Ì†µÌ±ÜÌ†µÌ±ñ, Ì†µÌ±ÜÌ†µÌ±ó) (Ì†µÌ±ñ =Ã∏ Ì†µÌ±ó) at the same time, the atomic session Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö associated with Ì†µÌ±ÜÌ†µÌ±ñ by the Executing relation must be in type of Ì†µÌ±ÜÌ†µÌ±õÌ†µÌ±ú, Ì†µÌ±ÜÌ†µÌ±†Ì†µÌ±ñÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±õÌ†µÌ±°, or Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø.
(iv) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ4: if two sessions are associated with the relation Ì†µÌ∞∏Ì†µÌ±•Ì†µÌ±íÌ†µÌ±êÌ†µÌ±¢Ì†µÌ±°Ì†µÌ±ñÌ†µÌ±õÌ†µÌ±î(Ì†µÌ±ÜÌ†µÌ±ñ, Ì†µÌ±ÜÌ†µÌ±ó) (Ì†µÌ±ñ =Ã∏ Ì†µÌ±ó), Ì†µÌ±ÜÌ†µÌ±ó must be an atomic session, that is, Ì†µÌ±ÜÌ†µÌ±ó : Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö.
(v) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ5: if two associated application concepts Ì†µÌ±é and Ì†µÌ±è are declared in the application model, there must be a metaconcept Ì†µÌ∞∂ and a metarelation Ì†µÌ±Ö that satisfy Ì†µÌ±é : Ì†µÌ∞∂ and (Ì†µÌ±é, Ì†µÌ±è) : Ì†µÌ±Ö.
(vi) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ6: the two relations Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ûÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í(Ì†µÌ±ÜÌ†µÌ±ñ, Ì†µÌ±ÜÌ†µÌ±ó) and Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ûÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í(Ì†µÌ±ÜÌ†µÌ±ó, Ì†µÌ±ÜÌ†µÌ±ñ), Ì†µÌ±ñ =Ã∏ Ì†µÌ±ó, are allowed to exist at the same time.
The WS-CDL specification includes many clauses stated with the keywords such as MUST/MUSTNOT, SHOULD/SHOULDNOT, and SHALL/SHALLNOT. Those clauses may relate to the consistency and completeness constraints. For example, ‚Äúa Choreography MUST contain one or more sessions,‚Äù from which we can formally define a rule Ì†µÌ∞∂‚ÑéÌ†µÌ±úÌ†µÌ±üÌ†µÌ±íÌ†µÌ±úÌ†µÌ±îÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ù‚ÑéÌ†µÌ±¶ ‚äë‚â• 1 Ì†µÌ∞∂Ì†µÌ±úÌ†µÌ±õÌ†µÌ±°Ì†µÌ±éÌ†µÌ±ñÌ†µÌ±õ.Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ in DL. The DL expression ‚â• Ì†µÌ±õÌ†µÌ±Ö ‚ãÖ Ì†µÌ∞∂, used for constraining a relation, is interpreted by (‚â•Ì†µÌ±õÌ†µÌ±Ö ‚ãÖ Ì†µÌ∞∂)Ì†µÌ∞º = {Ì†µÌ±é ‚àà ŒîÌ†µÌ∞º | #{Ì†µÌ±è ‚àà ŒîÌ†µÌ∞º | (Ì†µÌ±é, Ì†µÌ±è) ‚àà Ì†µÌ±ÖÌ†µÌ∞º ‚àß Ì†µÌ±è ‚àà Ì†µÌ∞∂Ì†µÌ∞º} ‚â• Ì†µÌ±õ}, where Ì†µÌ±Ö is a metarelation and Ì†µÌ∞∂ is a metaconcept, and ŒîÌ†µÌ∞º denotes nonempty set of discourse domains.
Definition 7 (completeness). A service choreography model is complete provided that the number of the relations in the application model satisfies the multiplicity constraint of the corresponding metarelation in the metamodel. A typical set of completeness rules are defined below, according to the WSCDL specification:
(i) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö1: Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í ‚äë‚â• 1 Ì†µÌ∞µÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±úÌ†µÌ±õÌ†µÌ±î Ì†µÌ±°Ì†µÌ±ú.Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±üÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ñÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±õÌ†µÌ±° ‚äì
Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í ‚äë‚â§ 1 Ì†µÌ∞µÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±úÌ†µÌ±õÌ†µÌ±î Ì†µÌ±°Ì†µÌ±ú.Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±üÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ñÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±õÌ†µÌ±°.
(ii) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö2: Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ ‚äë‚â• 1 Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±úÌ†µÌ±üÌ†µÌ±°.Ì†µÌ∞¥Ì†µÌ±êÌ†µÌ±°Ì†µÌ±ñVÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±¶. (iii) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö3: Ì†µÌ∞∂‚ÑéÌ†µÌ±éÌ†µÌ±õÌ†µÌ±õÌ†µÌ±íÌ†µÌ±ô ‚äë‚â• 2 Ì†µÌ∞øÌ†µÌ±ñÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í ‚äì
Ì†µÌ∞∂‚ÑéÌ†µÌ±éÌ†µÌ±õÌ†µÌ±õÌ†µÌ±íÌ†µÌ±ô ‚äë‚â§ 2 Ì†µÌ∞øÌ†µÌ±ñÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í.

(iv) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö4: Ì†µÌ∞ºÌ†µÌ±õÌ†µÌ±°Ì†µÌ±íÌ†µÌ±üÌ†µÌ±éÌ†µÌ±êÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ ‚äë‚â• 1 Ì†µÌ∞∑Ì†µÌ±íÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ë.Ì†µÌ∞∂‚ÑéÌ†µÌ±éÌ†µÌ±õÌ†µÌ±õÌ†µÌ±íÌ†µÌ±ô. (v) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö5: Ì†µÌ±ÉÌ†µÌ±éÌ†µÌ±üÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ñÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±õÌ†µÌ±° ‚äë‚â• 1 Implement.Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í. (vi) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö6: Ì†µÌ∞∂‚ÑéÌ†µÌ±úÌ†µÌ±üÌ†µÌ±íÌ†µÌ±úÌ†µÌ±îÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ù‚ÑéÌ†µÌ±¶ ‚äë‚â• 1 Ì†µÌ∞∂Ì†µÌ±úÌ†µÌ±õÌ†µÌ±°Ì†µÌ±éÌ†µÌ±ñÌ†µÌ±õ.Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ. (vii) Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö7: Ì†µÌ∞ºÌ†µÌ±õÌ†µÌ±°Ì†µÌ±íÌ†µÌ±üÌ†µÌ±ìÌ†µÌ±éÌ†µÌ±êÌ†µÌ±í ‚äë‚â• 1 Ì†µÌ∞µÌ†µÌ±ñÌ†µÌ±õÌ†µÌ±ë.Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í ‚äì
Ì†µÌ∞ºÌ†µÌ±õÌ†µÌ±°Ì†µÌ±íÌ†µÌ±üÌ†µÌ±ìÌ†µÌ±éÌ†µÌ±êÌ†µÌ±í ‚äë‚â§ 1 Ì†µÌ∞µÌ†µÌ±ñÌ†µÌ±õÌ†µÌ±ë.Ì†µÌ±ÖÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±í.

Deductive reasoning rules relate to operational semantics that describes the evolution of a session. They are used to verify the state reachability of service choreography. Every deductive reasoning rule is a Horn clause in the following form: IF ‚ü®antecedent‚ü© THEN ‚ü®consequent‚ü©, where the antecedent is a conjunction of one or more clauses and the consequent is an assertion of facts.
The relation SessionDeduction defines deduction of session evolution. If the precondition Ì†µÌ±ù holds and the session Ì†µÌ±Ü executes an atomic session Ì†µÌ±é making Ì†µÌ±Ü become the session Ì†µÌ±ÜÌÆ†Ì∞†, then Ì†µÌ±Ü is deduced to Ì†µÌ±ÜÌÆ†Ì∞†. In particular, the two sessions can be identified by two states, before and after evolution.
Choreography model checking may concern two kinds of state. One is the session state that defines whether a session can normally end and successfully complete its job. The other is the application state that defines whether an application that is running on one or more sessions can normally end. As a session will never end until all atomic sessions end, the state space of a session is determined by all possible states of the atomic sessions. Similarly, the state space of an application is determined by all possible states of the sessions.

Definition 8 (state reachability). A state (session state) is reachable provided that there is an evolving session which can be identified by the state and which can be deduced from its ancestor in its initial state.

Inference 1. If the termination states of an application described by a choreography model are reachable, that is, the termination sessions (denoted as NULL) can be deduced from the initial sessions, then all states of the application are reachable and the choreography models are thereby proven correct.

The basic deductive reasoning rules are listed as follows: (i)

Ì†µÌ±Öatom : Ì†µÌ±é ÌÆéÌÆétÌ∏ÄrÌ∏ÄÌÆéuÌ∏ÄÌÆée‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø

(8)

(ii)

Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±°

:

Ì†µÌ±Ü

‚â°

Ì†µÌ±ÜÌÆ†Ì∞†

Ì†µÌ±ù,Ì†µÌ±é
Ì†µÌ±Ü ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä Ì†µÌ±á Ì†µÌ±á

Ì†µÌ±ÜÌÆ†Ì∞†

Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä

Ì†µÌ±áÌÆ†Ì∞†

‚â°

Ì†µÌ±áÌÆ†Ì∞†

(9)

(iii)

Ì†µÌ±Öseq1 : Ì†µÌ±é ‚ãÖ Ì†µÌ±Ü ÌÆéÌÆétÌ∏ÄrÌ∏ÄÌÆéuÌ∏ÄÌÆée‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±Ü

(10)

(iv)

Ì†µÌ±Öseq2

:

Ì†µÌ±Ü Ì†µÌ±Ü ‚ãÖ Ì†µÌ±á

Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä
Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä

Ì†µÌ±ÜÌÆ†Ì∞† Ì†µÌ±ÜÌÆ†Ì∞†

‚ãÖ Ì†µÌ±á

(11)

Mathematical Problems in Engineering

7

(v)

Ì†µÌ±Öparallel

:

Ì†µÌ±Ü Ì†µÌ±Ü ‚ÄñÌ†µÌ±á

Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä
Ì†µÌ±ù,Ì†µÌ±é
ÌÆéÌÆéÌ∏Ä‚ÜíÌ∏Ä

Ì†µÌ±ÜÌÆ†Ì∞† Ì†µÌ±ÜÌÆ†Ì∞† ‚ÄñÌ†µÌ±á

(12)

(vi)

Ì†µÌ±Öchoice

:

Ì†µÌ±Ü1 ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏Ä1ÌÆé‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±Ü1ÌÆ†Ì∞† [Ì†µÌ±ù1] Ì†µÌ±Ü1 + [Ì†µÌ±ù2] Ì†µÌ±Ü2 ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏ÄÌÆé1‚Üí,Ì∏ÄÌ†µÌ±é

Ì†µÌ±Ü1ÌÆ†Ì∞†

(13)

(vii)

Ì†µÌ±Önonblock

:

Ì†µÌ±Ü ÌÆé¬¨ÌÆéÌ∏ÄÌ∏ÄÌ†µÌÆéÌ±ùÌ∏ÄÌ†µÌÆéÌ±î,Ì∏ÄÌÆéNÌ∏ÄÌÆéUÌ∏ÄÌÆéL‚ÜíÌ∏ÄL Ì†µÌ±Ü [Ì†µÌ±ùÌ†µÌ±î] [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü ÌÆé¬¨ÌÆéÌ∏ÄÌ∏ÄÌ†µÌÆéÌ±ùÌ∏ÄÌ†µÌÆéÌ±î,Ì∏ÄÌÆéNÌ∏ÄÌÆéUÌ∏ÄÌÆéL‚ÜíÌ∏ÄL

Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø

(14)

(viii)

Ì†µÌ±Önorepeat

:

Ì†µÌ±Ü ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏ÄÌÆéÌ†µÌ±îÌ∏Ä‚àßÌÆéÌ∏Ä¬¨ÌÆéÌ∏ÄÌÆéÌ†µÌ±ùÌ∏ÄÌÆéreÌ∏ÄpÌÆé‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±ÜÌÆ†Ì∞† [Ì†µÌ±ùÌ†µÌ±î] [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏ÄÌÆéÌ†µÌ±îÌ∏Ä‚àßÌÆéÌ∏Ä¬¨ÌÆéÌ∏ÄÌÆéÌ†µÌ±ùÌ∏ÄÌÆéreÌ∏ÄpÌÆé‚Üí,Ì∏ÄÌ†µÌ±é

Ì†µÌ±ÜÌÆ†Ì∞†

(15)

(ix)

Ì†µÌ±Örepeat

:

Ì†µÌ±Ü ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏ÄÌÆéÌ†µÌ±îÌ∏Ä‚àßÌÆéÌ∏ÄÌÆéÌ†µÌ±ùÌ∏ÄrÌÆéeÌ∏ÄpÌÆé‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±ÜÌÆ†Ì∞† [Ì†µÌ±ùÌ†µÌ±î] [Ì†µÌ±ùrep] ‚àó Ì†µÌ±Ü ÌÆéÌÆéÌ†µÌ∏ÄÌ±ùÌ∏ÄÌÆéÌ†µÌ±îÌ∏Ä‚àßÌÆéÌ∏ÄÌÆéÌ†µÌ±ùÌ∏ÄrÌÆéeÌ∏ÄpÌÆé‚Üí,Ì∏ÄÌ†µÌ±é Ì†µÌ±ÜÌÆ†Ì∞†

‚ãÖ [Ì†µÌ±ùrep] ‚àó Ì†µÌ±Ü

(16)

Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö is the rule that holds the indivisibility of an atomic session. Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±° is the rule that keeps the congruence in session deduction. Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û1 and Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û2 are the deduction rules for the sequence sessions. Ì†µÌ±ÖÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ô is the deduction rule for parallel session that two sessions are parallel executed and one of
them evolves. Ì†µÌ±ÖÌ†µÌ±ê‚ÑéÌ†µÌ±úÌ†µÌ±ñÌ†µÌ±êÌ†µÌ±í is the deduction rule for the choice session that if the precondition is true and the atomic session
is executed, one of the two sessions will evolve. Ì†µÌ±ÖÌ†µÌ±õÌ†µÌ±úÌ†µÌ±õÌ†µÌ±èÌ†µÌ±ôÌ†µÌ±úÌ†µÌ±êÌ†µÌ±ò is the deduction rule for the workunit that if the precondition
is false and [Ì†µÌ±ùÌ†µÌ±î][Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü works in nonblocking mode, the workunit will be skipped. Ì†µÌ±ÖÌ†µÌ±õÌ†µÌ±úÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ùÌ†µÌ±íÌ†µÌ±éÌ†µÌ±° is the deduction rule for the workunit that if Ì†µÌ±ùÌ†µÌ±î is ‚Äútrue‚Äù and Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù is ‚Äúfalse‚Äù Ì†µÌ±Ü will become Ì†µÌ±ÜÌÆ†Ì∞† and the workunit will become Ì†µÌ±ÜÌÆ†Ì∞† after execution
of Ì†µÌ±é. Ì†µÌ±ÖÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ùÌ†µÌ±íÌ†µÌ±éÌ†µÌ±° is the deduction rule for the workunit that if both Ì†µÌ±ùÌ†µÌ±î and Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù are ‚Äútrue‚Äù Ì†µÌ±Ü will become Ì†µÌ±ÜÌÆ†Ì∞† and the workunit will become Ì†µÌ±ÜÌÆ†Ì∞† ‚ãÖ [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü after execution of Ì†µÌ±é, where [Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù] ‚àó Ì†µÌ±Ü means if Ì†µÌ±ùÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ù is ‚Äútrue‚Äù then Ì†µÌ±Ü will be iteratively executed.

2.2. Application Model of Service Choreography. The metamodel gives a formal definition of the metaconcepts and relations of service choreography and provides fundamental semantics for service choreography description. An application model, an instantiation of the metaconcept model, gives a UML-compliant description and representation of service choreography. To build the model, software engineers would start with analysis of the objectives to be achieved in the choreography and then describe the roles that participants implement, the activities that the roles perform, and the session execution patterns.

Definition 9 (application model of service choreography). The application model of service choreography formally describes the design of service choreography for a distributed application in a UML-compliant representation within the constraint of the metamodel. It comprises three parts: ‚ü®AppConcept, AppRelation, AppFunction‚ü©.
AppConcept is a finite set of application concepts which are defined by instantiating the metaconcepts of the metamodel. AppRelation is a finite set of application relations which are defined by instantiating the metarelations of the metamodel. AppFunction is a set of functions that map AppConcept to MetaConcept or AppRelation to MetaRelation in order to trace the types of application concepts and relations in the metamodel. For example, Buyer is an AppConcept and Role is the corresponding MetaConcept, and thus the function is built as follows: AppFunction(Buyer) = Role.
The application model, if built with a universal UML tool, may suffer from the problems of inconsistency, incompleteness, and unreachable states, as mentioned in Section 2.1.3. The next section will discuss the technique of transforming the UML-based model into DL ontology to verify the correctness of the model with the help of a popular reasoner.
3. Model Transformation and Verification
UML is a semiformal specification language and it does not by itself support logic inference for model checking. A popular solution is to use OCL (Object Constraint Language), a subset of UML for defining domain constraints in firstorder predicate logic for model checking. Unfortunately, it is well known that the full expressiveness of OCL may lead to undecidability of reasoning [21]. As a result, the existing methods have to either limit the UML/OCL constructs or decrease the level of automation or balance between the two.
To solve the problem, we suggest using SHOIN(D), the subsystem of DL, to formalize the models. DL is proven powerful in expressibility and decidability for knowledge engineering and allows for making use of some handy reasoning engines, such as Pellet and Racer. But engineers may worry about the fact that it is hard to learn a formal language, hoping that the formal language would be hidden by a software tool.
This section will discuss the algorithms for model transformation, the mechanism of model verification based on SHOIN(D), and the way of implementing prototype.
3.1. Mechanism for Service Choreography Model Verification Based on SHOIN(D). In the early stage of our research, we obtained some meaningful achievements in DL-based reasoning. Dong et al. [22, 23] checked the C4ISR (Command, Control, Communication, Computer, Intelligence, Surveillance, and Reconnaissance) domain models to guarantee the consistency and completeness through converting the UML models into the Description Logic ontology and making use of inference engine Pellet. He et al. [24] presented a method of UML behavioral model verification based on Description Logic system. He et al. transformed UML behavioral models to OWL DL ontology, and hence model consistency can be

8

Mathematical Problems in Engineering

Service choreography model

Service choreography metaconcept model

Guide and constraint

Domain expert

Build
Conversed into

Service choreography app concept model
Conversed into

DL system

Tbox

Abox

Model checking results

Reasoning engine

Figure 3: Mechanism for service choreography model verification based on SHOIN(D).

verified with DL supporting reasoner. Zhang [25] tried to transform the service-oriented application models to OWL DL ontology. Based on the above research, we present, as shown in Figure 3, a mechanism for service choreography model verification based on SHOIN(D).
The principle of conversion and verification is as follows: (1) convert the metaconcepts of service choreography model and domain rules into the axiom sets in SHOIN(D) Tbox and the application concept model into the assertion sets in SHOIN(D) Abox; (2) verify the consistency, completeness, and state reachability with the help of a reasoning engine like Pellet that supports logical reasoning through the SHOIN(D) ontology. The automatic conversion can be realized by Algorithms 1 and 2.
Step (1) initializes Tbox and Abox. Steps (2)‚Äì(10) convert the metaconcepts and relations of the metaconcept model into axiom sets in Tbox. Steps (11)‚Äì(17) add multiplicity constraints of metarelations as axiom sets in Tbox. Subsequently, steps (18)‚Äì(24) convert application concepts and relations of the application model into assertion sets in Abox. For a more detailed explanation for each step, refer to our previous work in [22, 24]. Our previous work [23] showed that the conversion is correct and there is no semantics loss.
The domain rules need to be transformed into axiom sets in Tbox. The consistency and completeness rules are specified in DL and can be added to Tbox through steps (11)‚Äì (17), while the deductive reasoning rules need to be specified in SWRL. SWRL combines RuleML and OWL DL. It is popularly applied for formal representation of semantic rules and knowledge-based reasoning, supported by the algorithm Tableau [15].
Algorithm 2 is provided to convert the deductive reasoning rules in the choreography model into the formally specified rules in SWRL.

The concepts and relations appearing in the prerequisite of the deductive reasoning rules are converted to Horn clauses that combine to form the antecedent of SWRL rules, and the concepts and relations appearing in the conclusion are converted to Horn clauses that combine to form the consequent of SWRL rules.
For example, the deductive reasoning rules Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö and Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±° are converted into following SWRL expressions:
(i) Ì†µÌ∞∫Ì†µÌ±¢Ì†µÌ±éÌ†µÌ±üÌ†µÌ±ë (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÉÌ†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õÌ†µÌ±ëÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ù)

‚àß Ì†µÌ∞∏Ì†µÌ±•Ì†µÌ±êÌ†µÌ±¢Ì†µÌ±°Ì†µÌ±ñÌ†µÌ±õÌ†µÌ±î (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Ì†µÌ±é) ‚àß Ì†µÌ∞µÌ†µÌ±úÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±éÌ†µÌ±õ (Ì†µÌ±ÉÌ†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õÌ†µÌ±ëÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ù, Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í)

ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õÌ†µÌ∞∑Ì†µÌ±íÌ†µÌ±ëÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ (Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Ì†µÌ±é, Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø) (ii) Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õÌ†µÌ∞∑Ì†µÌ±íÌ†µÌ±ëÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±á)
‚àß Ì†µÌ∞∂Ì†µÌ±úÌ†µÌ±õÌ†µÌ±îÌ†µÌ±üÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ÜÌÆ†Ì∞†)

‚àß Ì†µÌ∞∂Ì†µÌ±úÌ†µÌ±õÌ†µÌ±îÌ†µÌ±üÌ†µÌ±¢Ì†µÌ±íÌ†µÌ±õÌ†µÌ±êÌ†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±á, Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±áÌÆ†Ì∞†)

(17)

‚àß Ì†µÌ∞∫Ì†µÌ±¢Ì†µÌ±éÌ†µÌ±üÌ†µÌ±ë (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÉÌ†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õÌ†µÌ±ëÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ù)

‚àß Ì†µÌ∞∏Ì†µÌ±•Ì†µÌ±íÌ†µÌ±êÌ†µÌ±¢Ì†µÌ±°Ì†µÌ±ñÌ†µÌ±õÌ†µÌ±î (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±Ü, Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Ì†µÌ±é) ‚àß Ì†µÌ∞µÌ†µÌ±úÌ†µÌ±úÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±éÌ†µÌ±õ (Ì†µÌ±ÉÌ†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õÌ†µÌ±ëÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ù, Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í) ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õÌ†µÌ∞∑Ì†µÌ±íÌ†µÌ±ëÌ†µÌ±¢Ì†µÌ±êÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ÜÌÆ†Ì∞†, Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±áÌÆ†Ì∞†) ‚àß Ì†µÌ∞∫Ì†µÌ±¢Ì†µÌ±éÌ†µÌ±üÌ†µÌ±ë (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ÜÌÆ†Ì∞†, Ì†µÌ±ÉÌ†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õÌ†µÌ±ëÌ†µÌ±ñÌ†µÌ±°Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ù) ‚àß Ì†µÌ∞∏Ì†µÌ±•Ì†µÌ±íÌ†µÌ±êÌ†µÌ±¢Ì†µÌ±°Ì†µÌ±ñÌ†µÌ±õÌ†µÌ±î (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±úÌ†µÌ±õ Ì†µÌ±ÜÌÆ†Ì∞†, Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Ì†µÌ±é)

Mathematical Problems in Engineering

9

Input: the meta model and the application model Output: Tbox, Abox begin (1) Tbox = { }, Abox = { }; (2) for all MetaConcepts Ì†µÌ∞∂ in meta concept model, do (3) Tbox = Tbox ‚à™ {Ì†µÌ±ê}; (4) if Ì†µÌ∞∂2 is the superclass of Ì†µÌ∞∂1, then
Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äë Ì†µÌ±ê2}; (5) else if Ì†µÌ∞∂ has a data attribute Ì†µÌ±ã (data type is Ì†µÌ±°), then
Tbox = Tbox ‚à™ {Ì†µÌ±ê ‚äë Ì†µÌ±• ‚ãÖ Ì†µÌ±°}; (6) else if Ì†µÌ∞∂1 =Ã∏ Ì†µÌ∞∂2 and Ì†µÌ∞∂1 ‚äë Ì†µÌ∞∂2 ‚àâ Tbox
and Ì†µÌ∞∂2 ‚äë Ì†µÌ∞∂1 ‚àâ Tbox, then Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äì Ì†µÌ±ê2 = ‚åÄ}; (7) end if; (8) end for; (9) for all MetaRelation Ì†µÌ±Ö = (Ì†µÌ∞∂1, Ì†µÌ∞∂2) in meta concept model, the relation Ì†µÌ±ü ‚àº is the inverse relation of Ì†µÌ±ü, do Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äë ‚àÄÌ†µÌ±ü ‚ãÖ Ì†µÌ±ê2, Ì†µÌ±ê2 ‚äë ‚àÄÌ†µÌ±ü‚àº ‚ãÖ Ì†µÌ±ê1}; (10) end for; (11) for all the multiplicity constraints in range and domain of every relation Ì†µÌ±Ö = (Ì†µÌ∞∂1, Ì†µÌ∞∂2) in meta concept model, the relation Ì†µÌ±ü ‚àº is the inverse relation of Ì†µÌ±ü, do (12) if multiplicity constraints is ‚Äú0 ‚ãÖ ‚ãÖ ‚ãÖ 1‚Äù then Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äë‚â§ 1Ì†µÌ±ü ‚ãÖ Ì†µÌ±ê2} ‚à™ {Ì†µÌ±ê2 ‚äë‚â§ 1Ì†µÌ±ü‚àº ‚ãÖ Ì†µÌ±ê1}; (13) else if multiplicity constraints is ‚Äú1 ‚ãÖ ‚ãÖ ‚ãÖ‚àó‚Äù then Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äë‚â• 1Ì†µÌ±ü ‚ãÖ Ì†µÌ±ê2} ‚à™ {Ì†µÌ±ê2 ‚äë‚â• 1Ì†µÌ±ü‚àº ‚ãÖ Ì†µÌ±ê1}; (14) else if multiplicity constraints is ‚Äú1‚Äù then Tbox = Tbox ‚à™ {Ì†µÌ±ê1 ‚äë‚â§ 1Ì†µÌ±ü ‚ãÖ Ì†µÌ±ê2, Ì†µÌ±ê1 ‚äë‚â• 1Ì†µÌ±ü ‚ãÖ Ì†µÌ±ê2} ‚à™ {Ì†µÌ±ê2 ‚äë‚â§ 1Ì†µÌ±ü‚àº ‚ãÖ Ì†µÌ±ê1, Ì†µÌ±ê2 ‚äë‚â• 1Ì†µÌ±ü‚àº ‚ãÖ Ì†µÌ±ê1}; (15) end if; (16) end for; (17) return Tbox; (18) for all individuals Ì†µÌ±ú in application concept model, (19) if AppFunction(o) = c, do Abox = Abox ‚à™ {Ì†µÌ±ú} ‚à™ {Ì†µÌ±ú : Ì†µÌ±ê}; (20) end for; (21) for all individuals Ì†µÌ±ê1, Ì†µÌ±ê2 in application concept model, (22) if AppFunction(r) = R, do Abox = Abox ‚à™ {Ì†µÌ±ê1} ‚à™ {Ì†µÌ±ê2} ‚à™ {‚ü®Ì†µÌ±ê1, Ì†µÌ±ê2‚ü© : Ì†µÌ±ü}; (23) end for; (24) return Abox; end
Algorithm 1: Construct SHOIN(D) Tbox&Abox.

3.2. Prototype Implementation. Algorithms 1 and 2 have been realized and integrated into our requirement analysis tool, the so-called ontology-based requirements elicitation and analysis tool (OBREAT) [25]. The architecture of OBREAT and the major components can be found in Figure 4.
The presentation layer handles the interaction between users and the application. It checks and takes user input, as well as feedbacks on execution information including reasoning results. Currently, there are a variety of modeling notations, such as UML [26‚Äì31], Message Sequence Charts (MSCs) [32], and BPMN [33, 34], to visually model the choreography interaction. In our research, the UML class diagrams and collaboration diagrams (or Communication Diagrams in [35]) are preferred for the presentation of service choreography models from structural and behavioral viewpoint, respectively, taking the advantages of rigorous syntax and semantics, easiness to interpret, and various tools such as RSA, EA, and Rose to share some part of models.

As the core component of the architecture, the logic layer processes modeling transactions and submits results to the presentation layer, and it also communicates with the data layer for data persistency. The DL-based Formal Model Generator handles the model conversion with the algorithms mentioned before. The output of the generator is sent to the Model Feature Reasoner and then is saved in Formal Model database. The Model Feature Reasoner communicates with DL reasoner Pellet to complete DL-based reasoning and sends the results to the Execution Control Interface. At present, the Model Feature Reasoner realizes checking the property of consistency, completeness, and state reachability. Specifically, the results are also exported to the Domain Knowledge base to enrich domain knowledge for reuse and thus knowledge reusability is continuously enhanced with knowledge accumulation.
The data layer handles data persistency and maintenance. Most of the input/output data are saved as files, either model

10

Mathematical Problems in Engineering

Input: Deductive reasoning rules for service choreography model Output: Deductive reasoning rules based on SWRL, Ì†µÌ±ÖSWRL Begin
Antecedent = { }, Consequent = { }, Clause = { }; for all concepts Ì†µÌ∞∂ and relations Ì†µÌ±Ö in prerequisite and conclusion, if Ì†µÌ∞∂1, Ì†µÌ∞∂2 has Ì†µÌ±Ö relation, Ì†µÌ±ê1, Ì†µÌ±ê2 are individuals of Ì†µÌ∞∂1, Ì†µÌ∞∂2, then
Clause = Clause ‚à™ {Ì†µÌ±Ö(Ì†µÌ∞∂1Ì†µÌ±ê1, Ì†µÌ∞∂2Ì†µÌ±ê2)}; else if Ì†µÌ∞∂ has a attribute Ì†µÌ±É (type is Ì†µÌ±°), then
Clause = Clause ‚à™ {Ì†µÌ±É(Ì†µÌ∞∂Ì†µÌ±ê, Ì†µÌ±°)}; end for; for all clauses cl do
if relation between cl is ‚Äúand‚Äù in prerequisite then Antecedent = Antecedent ‚à™ {cl1 ‚àß cl2}; else if relation between cl is ‚Äúor‚Äù in prerequisite then Antecedent = Antecedent ‚à™ {cl1 ‚à® cl2}; else if relation between cl is ‚Äúand‚Äù in conclusion then Consequent = Consequent ‚à™ {cl1 ‚àß cl2}; else if relation between cl is ‚Äúor‚Äù in conclusion then Consequent = Consequent ‚à™ {cl1 ‚à® cl2}; end if; end for; Ì†µÌ±ÖSWRL = Antecedent ‚à™ Consequent; return Ì†µÌ±ÖSWRL; end
Algorithm 2: Construct Ì†µÌ±ÖSWRL.

Gui modeling interface Metaconcept model modeling interface
Refers to

App concept model modeling interface

Execution Control Interface
Command input/ results enquiry

Presentation layer

Metafile editor

Updates model file via

Model file operator

Convert model to DL-based one via

Read/write

Model file

Metaconcept App concept

model

model

Requirements specification document

Model Feature Reasoner

Send DL-based service choreography model to

Enrich domain knowledge into/ call formal data from

Save generated Dl-based Formal formal model to
Model Generator

Formalized file manager

Import/export Formalized file

Logic layer Data layer

System Administration
Database

Domain

Formal Model

knowledge

Figure 4: Architecture of service hierarchy of OBREAT.

files or formalized files, while model management data are saved in the database System Administration Database.
For the sake of model exchange, we adopt XML as the model data description language. Since the DL-based reasoner accepts data only in OWL which is somewhat different from XML, the conversion between two types of

XML documents is needed. To automate the conversion, we choose the eXtensible Stylesheet Language Transformation (XSLT) technology [36, 37] which is widely used for XML document conversion. We designed a set of XSLT transformation templates compliant with the Ontology Definition Metamodel (ODM) and the UML profile. Moreover, we

Mathematical Problems in Engineering

11

integrate MagicDraw [38] in OBREAT as the GUI modeling tool in the presentation layer and Pellet 1.5.0 as the DL-based reasoner in the logic layer for verification reasoning.
4. Case Study
In this section, a simplified case of purchase order application of the e-commerce system is studied, illustrating how to construct the application model and how to realize the model verification.
4.1. Construction of Application Model. Limited by the page size, the choreography of the purchase order application is simplified here, and it covers only a few main activities: the buyer sends an order request to the seller, and then the seller checks the buyer‚Äôs credit record in the bank and the supplier

inventory. If the credit record is good and the inventory is sufficient, then the order will be accepted; otherwise, it will be rejected.
The above activities are encapsulated into five sessions: purchase order request (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û), credit check (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í), inventory check (Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í), purchase order response (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù), and purchase order reject (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó), where there are four participant roles: Buyer, Seller, Bank, and Supplier.
The buyer initiates an interaction with the seller by placing a purchase order po through the channel Ch@Seller, and then the seller acknowledges the buyer by sending him a poAck. Meanwhile, the states of the purchase orders of Buyer and Seller are set to ‚Äúsent‚Äù and ‚Äúreceived,‚Äù respectively. Accordingly, the session Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û is composed of four atomic sessions which are specified as follows and is modeled as a UML class diagram in Figure 5:

Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü)

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò, Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü)

(18)

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°")

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

The other four sessions function as follows: Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í checks the buyer‚Äôs credit by sending a request to the bank that sends back the state of the credit (good or bad); Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í checks the seller‚Äôs inventory by sending a request to the seller who sends back the state of the inventory (sufficient or short);

Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù declares that the order has been accepted if the buyer‚Äôs credit is good and the inventory is sufficient; and Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó declares that the order has been rejected if the buyer‚Äôs credit is bad or the inventory is short. The four sessions are specified as follows, while the related class models are omitted due to space limitation:

Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í = Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û-Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù(Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û ÌÆéÌ∏Ä‚Üí Ì†µÌ∞µÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û, Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù ‚ÜêÌÆéÌ∏Ä Ì†µÌ∞µÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü)
‚ãÖÌ†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±îÌ†µÌ±úÌ†µÌ±úÌ†µÌ±ë"/"Ì†µÌ±èÌ†µÌ±éÌ†µÌ±ë") ‚ãÖÌ†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ∞µÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°") ‚ãÖÌ†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í = Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û-Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù(Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û,

Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü)

‚ãÖÌ†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±†Ì†µÌ±¢Ì†µÌ±ìÌ†µÌ±ìÌ†µÌ±ñÌ†µÌ±êÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±õÌ†µÌ±°"/"Ì†µÌ±†‚ÑéÌ†µÌ±úÌ†µÌ±üÌ†µÌ±°")

‚ãÖÌ†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°")

(19)

‚ãÖÌ†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù, Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü) ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±êÌ†µÌ±úÌ†µÌ±öÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±°Ì†µÌ±íÌ†µÌ±ë") ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±êÌ†µÌ±úÌ†µÌ±öÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±°Ì†µÌ±íÌ†µÌ±ë")

Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù, Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü) ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±¢Ì†µÌ±õÌ†µÌ±êÌ†µÌ±úÌ†µÌ±öÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±°Ì†µÌ±íÌ†µÌ±ë") ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±¢Ì†µÌ±õÌ†µÌ±êÌ†µÌ±úÌ†µÌ±öÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±°Ì†µÌ±íÌ†µÌ±ë")

12
Class choreography [ purchase order service choreography]

Mathematical Problems in Engineering

‚ÄúAtomicSession‚Äù S_poReq_assign_Buyer +Name : String -Buyer_poState : String
¬∑¬∑¬∑ +poReq_assign_Buyer()
‚ÄúRole‚Äù Buyer -po : String -poAck : String -poState : String -poResp : String

‚ÄúSession‚Äù
S_poReq
+Name : String -Precondition : Boolean = true #Var : String
¬∑¬∑¬∑
+poReq_req() +poReq_resp() +poReq_assign_Buyer() +poReq_assign_Seller()

‚ÄúAtomicSession‚Äù S_poReq_assign_Seller
+Name : String -Seller_poState : String
¬∑¬∑¬∑
+poReq_assign_Seller()

‚ÄúAtomicSession‚Äù S_poReq_req
+Name : String -po : String
¬∑¬∑¬∑
+poReq_req()

‚ÄúAtomicSession‚Äù S_poReq_resp
+Name : String -poAck : String
¬∑¬∑¬∑
+poReq_resp()

‚ÄúRole‚Äù
Seller
-po : String -poAck : String -poState : String -ccReq : String -ccResp : String -ccState : String -icReq : String -icResp : String -icState : String -poResp : String

Figure 5: Structure of S poReq.

The interaction sequence companied with the participants and key messages can be modeled as a UML communication diagram, as shown in Figure 6.
Having analyzed the interaction and the functions of the sessions, we can organize the choreography of the purchase order application as follows:

Ì†µÌ∞∂‚ÑéÌ†µÌ±ú Ì†µÌ±ùÌ†µÌ±ú = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í ‚Äñ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í) (20)
‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)
and specify the preconditions of the sessions as follows:

Ì†µÌ±É Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í = Ì†µÌ±ù Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í = (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°" ‚àß Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë") ;
Ì†µÌ±É Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±îÌ†µÌ±úÌ†µÌ±úÌ†µÌ±ë" ‚àß Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±†Ì†µÌ±¢Ì†µÌ±ìÌ†µÌ±ìÌ†µÌ±ñÌ†µÌ±êÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±õÌ†µÌ±°" (21)
‚àß Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë");
Ì†µÌ±É Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó = (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±èÌ†µÌ±éÌ†µÌ±ë" ‚à® Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±†‚ÑéÌ†µÌ±úÌ†µÌ±üÌ†µÌ±°" ‚àß Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë").

Furthermore, the SHOIN(D) ontology can be generated axiom set in Tbox and the instance set in Abox are listed as by the algorithm Construct Tbox&Abox, and as a result, the in Table 3.

Mathematical Problems in Engineering

13

4.2. Verification of Application Model. Having constructed the application model which is subsequently converted into the SHOIN(D) ontology, we can check the correctness properties of consistency, completeness, and state reachability of the specified choreography separately in the following cases.
Case 1 (consistency checking). Consistency checking is to check whether there is a conceptual conflict against modeling semantics; that is, giving a group of related concepts in the application model, the relationships defined between the concepts should semantically abide by the metarelation declared in the metamodel.
Suppose that the modeler tries to add in the application model a relation of Executing between the Role Buyer and the session S poReq. But according to the constraints of the metamodel, such relation should only appear between two sessions and thus the consistency rule Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ1 is broken. The error can be easily found through ontology consistency checking using Pellet.
Case 2 (completeness checking). The completeness checking is to check whether there is a lack of concept or relation in the application model; that is, giving a group of related concepts, the relationships defined between the concepts

should quantitatively abide by the multiplicity constraint of the corresponding metarelation in the metamodel.
Suppose that the modeler tries to build a Belong to relation between the Role Supplier and the Participant ProductTrader, meaning that Supplier belongs to a product trader, but wrongly add at the same time another Belong to relation between Supplier and ServiceProvider. Such relation violates the multiplicity constraint Ì†µÌ±ÖÌ†µÌ±êÌ†µÌ±úÌ†µÌ±õ1 that means each Role must belong to only one Participant at any time. The checking result is prompted by Pellet as follows: ‚ÄúConsistent: No Reason: The individual Supplier has more than one value for property Belong to violating the cardinality restriction.‚Äù
Case 3 (state reachability checking). The state reachability checking is to examine whether the termination state of a session defined in the application model is reachable; that is, the session can be deduced using the deductive reasoning rules given in Section 2.1.3. If all sessions are deducible, implying that all session states are reachable, the application behavior is verified.
Session S poReq is deduced with the deductive reasoning rules Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö and Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û2 and as a result, poState of Buyer will be set to ‚Äúsent‚Äù and the poState of Seller will be set to ‚Äúreceived.‚Äù The reasoning process is shown as follows:

Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú ÌÆéÌ∏Ä‚Üí Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú, Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü) ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò, Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü) ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°") ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í, Ì†µÌ±é=Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û(Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú ‚Üí Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±ú,Ì†µÌ∞∂‚Ñé@Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü)
ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä

Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò ‚ÜêÌÆéÌ∏Ä Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò, Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü)

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°")

‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í, Ì†µÌ±é=Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù(Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò‚ÜêÌ†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ∞¥Ì†µÌ±êÌ†µÌ±ò,Ì†µÌ∞∂‚Ñé@Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü)

(22)

ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä

Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü (Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°") ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±ésÌ†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í, Ì†µÌ±é=Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü(Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í="Ì†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±°")
ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä

Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚ãÖÌ†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü (Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í = "Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")

Ì†µÌ±°Ì†µÌ±üÌ†µÌ±¢Ì†µÌ±í, Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü(Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í="Ì†µÌ±üÌ†µÌ±íÌ†µÌ±êÌ†µÌ±íÌ†µÌ±ñVÌ†µÌ±íÌ†µÌ±ë")
ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä

Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø

14

Mathematical Problems in Engineering

The other four sessions credit check (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í), inventory check (Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í), purchase order response (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù), and purchase order reject (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó) can be deduced in the
same way.

The whole reasoning process for the application choreography model Ì†µÌ∞∂‚ÑéÌ†µÌ±ú Ì†µÌ±ùÌ†µÌ±ú is shown as follows, where
the deduction rules applied to each step are bracketed with ‚ü® ‚ü©:

Ì†µÌ∞∂‚ÑéÌ†µÌ±ú Ì†µÌ±ùÌ†µÌ±ú = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í ‚Äñ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í) ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ†µÌ±°Ì†µÌ∏ÄÌÆéÌ±üÌ†µÌ∏ÄÌ±¢ÌÆéÌ†µÌ∏ÄÌ±íÌÆé,Ì∏ÄÌÆéÌ†µÌ±éÌ∏Ä‚àóÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í ‚Äñ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í) ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö, Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û2‚ü©

ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆé‚ÜíÌ∏Ä (Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í ‚Äñ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í) ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ∞∂6 ‚ü©
ÌÆéÌ†µÌÆéÌ∏ÄÌ±ÉÌ∏ÄÌÆéÌ†µÌ∏ÄÌÆéÌ±êÌ†µÌ±üÌ∏ÄÌÆéÌ†µÌ±íÌ∏ÄÌ†µÌÆéÌ±ëÌ∏ÄÌ†µÌÆéÌ∞∂Ì∏Ä‚ÑéÌÆéÌ∏ÄÌ†µÌÆéÌ±í,Ì∏ÄÌÆéÌ†µÌ∏ÄÌ±éÌÆé‚àó‚ÜíÌ∏Ä‚àó (Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚Äñ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í) ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö, Ì†µÌ±ÖÌ†µÌ±ùÌ†µÌ±éÌ†µÌ±üÌ†µÌ±éÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ô‚ü©

(23)

ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆé‚ÜíÌ∏Ä Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ∞∂5 ‚ü© Ì†µÌ±ù Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í, Ì†µÌ±é‚àó‚àó‚àó
ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø ‚ãÖ (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö, Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û2‚ü©

ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆé‚ÜíÌ∏Ä (Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù + Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±ó)

‚ü®Ì†µÌ∞∂6 ‚ü© Ì†µÌ±É Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù, Ì†µÌ±é‚àó‚àó‚àó‚àó
ÌÆéÌÆéÌ∏ÄÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆéÌ∏ÄÌÆé‚ÜíÌ∏Ä Ì†µÌ±ÅÌ†µÌ±àÌ†µÌ∞øÌ†µÌ∞ø

The atomic sessions in each step are as follows: Ì†µÌ±é‚àó = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û ‚ãÖ Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±û Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü
Ì†µÌ±é‚àó‚àó = Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û-Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±éÌ†µÌ±õÌ†µÌ±ò.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í
‚ãÖ Ì†µÌ±Ü Ì†µÌ±êÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ëÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í (24)
Ì†µÌ±é‚àó‚àó‚àó = Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±üÌ†µÌ±íÌ†µÌ±û-Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±¢Ì†µÌ±ùÌ†µÌ±ùÌ†µÌ±ôÌ†µÌ±ñÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ñÌ†µÌ±õVÌ†µÌ∞∂‚ÑéÌ†µÌ±í Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í
Ì†µÌ±é‚àó‚àó‚àó‚àó = Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±üÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ∞µÌ†µÌ±¢Ì†µÌ±¶Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í
‚ãÖ Ì†µÌ±Ü Ì†µÌ±ùÌ†µÌ±úÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù Ì†µÌ±éÌ†µÌ±†Ì†µÌ±†Ì†µÌ±ñÌ†µÌ±îÌ†µÌ±õ Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ùoÌ†µÌ±ÜÌ†µÌ±°Ì†µÌ±éÌ†µÌ±°Ì†µÌ±í
The application behavior is proven correct provided that the reasoning process may eventually end by NULL. Otherwise, there must be a session failed to be deduced (i.e., its termination state is not reachable). If the application may reach the final state, the key attribute poState of both Buyer and Seller will be set to either ‚Äúcompleted‚Äù or ‚Äúuncompleted‚Äù (this may happen when Ì†µÌ∞µÌ†µÌ±¶Ì†µÌ±¢Ì†µÌ±íÌ†µÌ±ü.Ì†µÌ±êÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±èÌ†µÌ±éÌ†µÌ±ë" or Ì†µÌ±ÜÌ†µÌ±íÌ†µÌ±ôÌ†µÌ±ôÌ†µÌ±íÌ†µÌ±ü.Ì†µÌ±ñÌ†µÌ±êÌ†µÌ±ÖÌ†µÌ±íÌ†µÌ±†Ì†µÌ±ù = "Ì†µÌ±†‚ÑéÌ†µÌ±úÌ†µÌ±üÌ†µÌ±°").
To give a negative example, we deliberately assign Seller.poState = ‚Äú‚Äù to make false the precondition P credChe. As a result, the reasoning process rests on the second step,

as the session S credChe cannot be deduced, and therefore all states of the sessions followed cannot be reached. The exception can be found by entering the following DL-based query command in the form of SPARQL [24]:
SELECT ? a WHERE {? a rdf:type xmlns: Session.? a xmlns: SessionDeduction ? NULL.}.
Figure 7 shows the query result in the human interface panel of the reasoner Pellet, indicating that the session S poReq and its four atomic sessions are deduced (or can be successfully executed), while all of the subsequent sessions are not shown (or the corresponding states of these sessions may not be reached). The rules ‚ü®Ì†µÌ±ÖÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö, Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±û2‚ü© are applied to the reasoning process to find the exception where the SessionDeduction relation is broken between the sessions S poReq and S credChe and all of the followed sessions cannot be deduced.
Beside the above experiment, we have also modeled and verified several other cases, including the online shopping example given in [39], the buyer-seller example given in [40], and the example from the supply chain management [41].
The verification is processed efficiently. The reasoning for each case is finished within a second, tested on a laptop computer with a 2 GHz Intel processor and 1 GB of RAM. That accords with the comments by Haarslev and Mo¬®ller [42] who pointed out that even for the hardest problems the query time for DL reasoning would be within three seconds. But, is it always true?
In order to evaluate the efficiency of reasoning for CMLDL models, we choose the four popular ontologies, VICODI, LUBM, Semintec, and Wine which are used in previous benchmarks, carry out experiment, and lead a statistical analysis by comparing the average response times against the increasing size of Abox. The detailed descriptions about these ontologies can be found in [43].

Mathematical Problems in Engineering

15

Table 3: Axiom set and instances set of purchase order service choreography model (fragment).

Axiom set in Tbox
NoAction ‚äë Abas SilentAction ‚äë Abas InterAction ‚äë Abas Assign ‚äë Abas Perform ‚äë Abas Abas ‚äë Act Astr ‚äë Act Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö ‚äë Session Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö ‚äë Session Session ‚äë ‚àÄ SessionDeduction.Session Participant ‚äë ‚àÄ Implement.Role Choreography ‚äë ‚àÄ Contain.Session Interaction ‚äë ‚àÄ Depend.Channel Role ‚äë ‚àÄ Belong to.Participant Interface ‚äë ‚àÄ Bind.Role Session ‚äë ‚àÄ Executing. Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö Session ‚äë ‚àÄ Sequence. Session Session ‚äë ‚àÄ Choice. Session ...

Instances set in Abox
S poReq: Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö S poReq req: Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö S poReq resp: Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö S poReq assign Buyer: Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö S poReq assign Seller: Ì†µÌ±ÜÌ†µÌ±éÌ†µÌ±°Ì†µÌ±úÌ†µÌ±ö S credChe: Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö S poResp: Ì†µÌ±ÜÌ†µÌ±êÌ†µÌ±úÌ†µÌ±ö ProductTrader: Participant
ServiceProvider: Participant
S credChe ‚Äñ S invChe S Che: Ì†µÌ±Üparallel S poResp + S poRej: Ì†µÌ±Üchoice Cho po: Choreography
Buyer: Role
Supplier: Role
P credChe: Precondition
‚ü®Cho po, S poReq‚ü©: Contain
‚ü®S credChe, P credChe‚ü©: Guard
‚ü®S poReq, S poReq req‚ü©: Executing
‚ü®S credChe, S invChe‚ü©: Parallel
‚ü®S poReq, S credChe ‚Äñ S invChe S Che‚ü©: Sequence ...

The ontologies represent four standard benchmark datasets with different complexity. The VICODI ontology is relatively small and simple since it does not contain any disjunctions, existential quantification, or number restrictions. The LUBM ontology and the Semintec ontology are also relatively simple like the VICODI ontology, while the Semintec ontology is more complex since it contains functional properties and disjointness constraints and is constructed using OWL DL. The Wine ontology is the most complex one. It contains a classification of wines and is established using advanced DL constructors.
The above ontologies are too small in Abox for our intended performance evaluations. Therefore, we generate different sizes of datasets, ranging from 100 to 1 million, to increase the Aboxes of the ontologies for test.
To evaluate the query times for various sizes of the datasets, we use several query patterns covering all cases from the simplest one that retrieves all individuals of one concept to the most complex one that retrieves all individuals of the concept. The test method can be referenced by [44].
Figure 8 shows the average time for query response for the four ontologies with the generated datasets sizing from 100 to 1 Mio. All the results reported are averaged over 100 queries. The test is led on a laptop computer with one 2 GHz Intel processor and 1 GB of RAM, running Windows XP Service Pack 4.
As expected, there is a significant increase of query time as the size of the ontology increases from the 100 to 1 million. For the example of the Semintec ontology, the average query time for smaller size from 100 to 10,000 is less than a second (<1). But, the time increases sharply as the size exceeds 10,000, and for the maximum size of 1 Mio., the time is about 800 seconds or about 17 minutes.

Interaction communication in po [ communication in po]
‚ÄúRole‚Äù : Buyer
1: po 2: poAck 7: poResp/poRej

‚ÄúRole‚Äù

3: ccReq

: Seller

6: icResp

4: ccResp 5: icReq

‚ÄúRole‚Äù : Bank

‚ÄúRole‚Äù : Supplier

Figure 6: Interaction between roles in the choreography.

Our ontology of CML-DL may match the Semintec ontology since the domain of the CML-DL application is not more complex than that of the financial services, and the model can be constructed using a fragment of OWL DL without advanced DL constructors. Therefore, we expect that the number of individuals of the CML-DL application model, for most projects, would be less than 100000, and thus the reasoning time would be within a few minutes at worst.
5. Related Work Discussion
System verification accounts for a larger proportion in the domain of system engineering. There are two categories:

16

Mathematical Problems in Engineering

Figure 7: The query command window for checking the state reachability.

Response time (s)

10000

1000

100

10

1

0.1

0.01
100 1000 10000 100000 1000000

VICODI

LUBM

Semintec

Wine

0.064

0.058

0.286

0.833

0.081 0.088

0.063 0.086

0.37 0.771

0.942 68.555

0.831

2.072

100.491

998.45

79.451

100.011

800.211

1000.981

Datasets with different individual size

100 1000 10000

100000 1000000

Figure 8: Average query time for the four ontologies (VICODI, LUBM, Semintec, and Wine).

testing and formal verification. Testing is the process in which testers input the use case through access point and then observe the corresponding output to discover potential error. Formal verification, which can be further divided into model checking based on exhausting searching and

model verification based on logic reasoning, expresses system specification by using mathematical methods and then proves whether the designed system meets the desired properties according to mathematical theory.
The initial progress of testing static system properties converts static properties into hard-code and calls these codes during program compilation. Because system specification and system implementation are bounded together, the method does not have flexibility and reusability; that is, when the system static properties to be checked change, the hardcode must be updated as well [45].
The emergence of the open-source projects WS-CDL Eclipse Plugin [46] and Pi4SOA [47] makes it possible to separate system specification and implementation. The engines of these projects provide an execution and simulation environment for WS-CDL documents. When the properties to be checked change, the corresponding descriptions can be revised without any modification to the inspection program. Reference [48] notes that although the WS-CDL is just a description language, it is essentially an XML document; therefore, Eclipse Plugin simulators regard the WS-CDL as executable script language for interpretation and implementation. Nevertheless, the verification methods based on the simulation engine need to traverse the entire value space when handling existential and universal quantifiers, leading to a higher complexity of time and space.
Workflow based web service composition and formal verification techniques are broadly applied. They can be divided into three categories: PN- (Petri Net-) based, FSA(Finite State Automate-) based, and PA- (process algebra-) based techniques.
Xia et al. [49, 50] achieved the complete conversion from a WS-CDL document to stochastic Petri Nets; moreover, they

Mathematical Problems in Engineering

17

Table 4: Comparison between several typical verification methods of service choreography model.

Features

Hard-coding

Description ability

+++

Degree of automation

+

Knowledge reusability

‚àí

Efficiency of verification

+

State explosion

‚àí

+: support/existence, ‚àí: nonsupport/nonexistent.

Simulation engine +++ + ‚àí ++ ‚àí

Methods

Workflow Temporal logic

+

+

++

++

‚àí

‚àí

+++

+++

+

+

Abstract WS-CDL + ‚àí ‚àí + ‚àí

CMV-DL ++ ++ + +++ ‚àí

make assessments of time expectations, probability, and cost expectations of services that normally end due to the index of performance, reliability, and execution cost, respectively. Foster et al. [51] proposed a type of service modeling and verification method called model-based service compositions engineering for the first time. The method maps the service composition model to a finite state process (FSP), aiming at verifying the compatibility between composite services and their environment by using a labeled transition system analyzer (LTSA). Molina-Jimenez and Shrivastava [52] developed the concept of conformance between a contract and a choreography by assuming that they can be modeled by Finite Automaton (FA). The choreography specifications and contracts, specified by the BPMN notation and the event-condition-action rules, describe permissible interactions between partners from different viewpoints. They established a process to automatically check whether all the behaviors permissible in a choreography are also permissible in the corresponding contract and vice versa. D¬¥ƒ±az and Llana [53] mapped the service composition model in WS-CDL to a timed automation and then simulated the dynamic behavior of the system using the automatic verification tool UPPAAL. The literature [54] provided the basis for formalizing and reasoning on the mobility characteristics of web services choreography using the process algebra Ì†µÌºãcalculus which is, according to Robin Milner, a model of concurrent computation based on the notion of naming. They argued that the process algebras, such as Ì†µÌºã-calculus, can be used to formalize web services characteristics to ensure that they satisfy some conditions required in SOA. Salau¬®n et al. [55] presented a method of encoding the collaboration diagrams into the LOTOS process algebra. This encoding allows checking realizability of the collaboration diagrams for both synchronous communication and bounded asynchronous communication.
Gu et al. [8, 9] presented a formal modeling framework Abstract WS-CDL with grammar, congruence relations, and operational semantics. They defined a set of mappings of the Abstract WS-CDL global model to the Pi calculus-based local model and accordingly suggested a set of deductive reasoning rules of state reachability and terminability. Unfortunately, they failed to provide the consistency and completeness verification mechanism as well as the corresponding reasoning engine.
Temporal logic (TL) can be used to assert the behavior change with time evolution. The model verification techniques based on TL model the finite states of systems

with Promela and specify the system properties with TL expressions to enable verification by checking whether the intersection between the Promela models and the TL expressions is empty. Zhang and Liu [56] presented a formal verification method for CCML (Cooperative Composition Modeling Language) based web service composition. They build a mapping of CCML description to CCS expression and approach property verification and service compatibility verification with the help of a TL based checking mechanism and an automated tool.
The above verification methods, either based on workflow or based on TL, may lead an exhaustive search for all states of system execution, which may cause the state explosion problem when the number of the states exponentially increases as the system scales up.
The DL-based logic reasoning technique is applied to service modeling and verification. Liu et al. [57] proposed a service modeling and composition method based on DL rules using a uniform way of characterizing the static semantic and dynamic interaction characteristics of web services. The method unifies the service composition model within the framework of DL rules to remedy the defect that DL cannot describe the dynamic characteristics of web services. Chang et al. [58, 59] proposed an Extended Dynamic Description Logic EDDL(X) by extending the traditional Dynamic Description Logic (DDL) to transform the web service composition model into the EDDL(X)-based one. However, the above methods focus more on service discovery, service matching, and service composition while addressing less the property verification of service choreography model.
Over the past decade, many organizations and individuals have conducted in-depth and fruitful research in the field of service choreography model verification. Their achievements can be categorized, according to their underlying methods, into hard-coding, simulation engine, workflow, temporal logic, and Abstract WS-CDL. As shown in Table 4, we have made a primary comparison of our method with those techniques by the important features such as description ability, degree of automation, knowledge reusability, efficiency of verification, and state explosion.
Regarding description ability, the methods of hardcoding and the simulation engine rank highest since they allow compiling the XML scripts of WS-CDL models. CMVDL ranks second high due to the strong ability of induction and high level of abstraction with DL [60]. The methods based on workflow and TL are weak in description ability, because they cannot ensure the completeness of mapping

18

Mathematical Problems in Engineering

one form of model to another, especially when the model is complex in its structure. The current methods based on PA, for example, provide only a few of simple mapping rules and thus do not guarantee a strict conversion, which may cause loss of semantics during conversion [61].
Automation is an important feature for model verification. Each of the methods listed has related supporting tools, except for Abstract WS-CDL. CMV-DL is graded comparatively high in automation, because it takes advantage of available reasoning engines such as Pellet which are based on the mature algorithm Tableau and which have been integrated into the requirement analysis tool OBREAT.
Regarding knowledge reusability, the workflow based, the TL based, and the other three techniques do not provide the mechanism for knowledge accumulation and reuse, while OBREAT allows enriching domain knowledge by adding new reasoning rules to the Domain Knowledge base and importing the reasoning results back into the knowledge base for further reasoning. But the process relies on human interference and thus the capability is graded low.
The verification efficiency is determined by both human interference and time consumption in validation process. The hard-code method and CMV-DL depend heavily on human interference and therefore are graded lowest. The simulation engine technique needs to traverse the entire value space when handling existential and universal quantifiers, which leads to a higher complexity and therefore a low efficiency. The other three methods, supported by automated tools, work highly efficiently for verification.
When a system has many concurrent components, the state space of system execution might expand infinitely beyond ordinary computation capability. Based on exhaustive search, workflow and TL may suffer from the problem of state explosion which has long been the bottleneck for their development [62]. In contrast, CMV-DL works on deduction reasoning where the space of deduction reasoning is limited by the size of the generated ontology and the computation complexity is decreased by the high efficient reasoner algorithm Tableau [63, 64].
In general, CMV-DL has an obvious advantage in knowledge reusability and is free of state explosion without the loss of description ability, and it has a modest degree of automation and efficiency compared to the other methods.
6. Conclusion and Future Work
This paper focuses on service choreography modeling and verification. It proposes a new approach of choreography model verification based on Description Logic to verify the service choreography model based on SHOIN(D) of DL. The main contributions are as follows:
(1) A metaconcept model of service choreography based on WS-CDL is proposed, providing a framework to formally define a service choreography model.
(2) Domain rules of consistency, completeness, and deductive reasoning are defined, enabling formal verification of the service choreography model.

(3) The model transformation algorithms are provided and thus the service choreography model and domain rules can be converted into the DL ontology and model verification can be thereby made automatically with an available reasoner, such as Pellet.
(4) The related work on service choreography verification is investigated. The representative methods are analytically compared with CMV-DL on such features as description ability, degree of automation, knowledge reusability, efficiency of verification, and state explosion.
Currently, CMV-DL focuses only on a few key issues of web service choreography. The goal of the metaconcept model and CMV-DL is to verify several key properties of service choreography models. Therefore, CMV-DL captures only a core set of WS-CDL features while omitting some advanced features, such as exception and finalizing blocks. Future work involves extending the service choreography metaconcept model to cover more properties of WS-CDL, such as the consistency between choreography models and orchestration models. Moreover, the domain rules need to be enriched and improved as the approach is applied to more projects.
Conflict of Interests
The authors declare that there is no conflict of interests regarding the publication of this paper.
Acknowledgment
The paper work was supported by National Natural Science Foundation of China under Program no. 61273210.
References
[1] R. Khadka, B. Sapkota, L. Ferreira Pires, M. Van Sinderen, and S. Jansen, ‚ÄúModel-driven approach to enterprise interoperability at the technical service level,‚Äù Computers in Industry, vol. 64, no. 8, pp. 951‚Äì965, 2013.
[2] Q. Z. Sheng, X. Qiao, A. V. Vasilakos, C. Szabo, S. Bourne, and X. Xu, ‚ÄúWeb services composition: a decade‚Äôs overview,‚Äù Information Sciences, vol. 280, pp. 218‚Äì238, 2014.
[3] N. Kavantzas, D. Burdett, G. Ritzinger et al., Web Services Choreography Description Language Version 1.0, W3C Candidate Recommendation, 2005.
[4] F.-X. Xiao, Z.-Q. Huang, Z.-N. Cao, L.-Z. Tu, and Y. Zhu, ‚ÄúUnified formal modeling and analyzing both functionality and qos of web services composition,‚Äù Journal of Software, vol. 22, no. 11, pp. 2698‚Äì2715, 2011.
[5] M. E. Cambronero, G. D¬¥ƒ±az, V. Valero, and E. Mart¬¥ƒ±nez, ‚ÄúValidation and verification of web services choreographies by using timed automata,‚Äù Journal of Logic and Algebraic Programming, vol. 80, no. 1, pp. 25‚Äì49, 2011.
[6] L. Zhou, J. Ping, H. Xiao, Z. Wang, G. Pu, and Z. Ding, ‚ÄúAutomatically testing web services choreography with assertions,‚Äù in Formal Methods and Software Engineering, vol. 6447 of Lecture Notes in Computer Science, pp. 138‚Äì154, Springer, Berlin, Germany, 2010.

Mathematical Problems in Engineering

19

[7] F. M. Besson, P. M. B. Leal, F. Kon et al., ‚ÄúTowards automated testing of web service choreographies,‚Äù in Proceedings of the 6th International Workshop on Automation of Software Testing, pp. 109‚Äì110, 2011.
[8] X. Gu and Z. Lu, ‚ÄúA formal model for BPEL4WS description of Web service composition,‚Äù Wuhan University Journal of Natural Sciences, vol. 11, no. 5, pp. 1311‚Äì1319, 2006.
[9] X. Gu, R. Li, and Z. Lu, ‚ÄúTyped formal model for WS-CDL specification of web services composition,‚Äù Journal of Southeast University, vol. 24, no. 3, pp. 300‚Äì307, 2008.
[10] S. Halle¬¥ and T. Bultan, ‚ÄúRealizability analysis for message-based interactions using shared-state projections,‚Äù in Proceedings of the 18th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, pp. 27‚Äì36, November 2010.
[11] A. McNeile, ‚ÄúProtocol contracts with application to choreographed multiparty collaborations,‚Äù Service Oriented Computing & Applications, vol. 4, no. 2, pp. 109‚Äì136, 2010.
[12] S. Basu, T. Bultan, and M. Ouederni, ‚ÄúDeciding choreography realizability,‚Äù Acm Sigplan Notices, vol. 47, no. 1, pp. 191‚Äì201, 2012.
[13] W. L. Yeung, ‚ÄúA formal and visual modeling approach to choreography based web services composition and conformance verification,‚Äù Expert Systems with Applications, vol. 38, no. 10, pp. 12772‚Äì12785, 2011.
[14] R. J. Brachman and J. G. Schmolze, ‚ÄúAn overview of the KL-ONE knowledge representation system,‚Äù Cognitive Science, vol. 9, no. 2, pp. 171‚Äì216, 1985.
[15] P. Cimiano, C. Uuger, and J. McCrae, Ontology-Based Interpretation of Natural Language, Morgan & Claypool Publishers, 2014.
[16] Web Ontology Language (OWL), World Wide Web Consortium (W3C), 2014, http://www.w3.org/2004/OWL.
[17] J. A. Khan and S. Kumar, ‚ÄúOWL, RDF, RDFS inference derivation using Jena semantic framework & pellet reasoner,‚Äù in Proceedings of the International Conference on Advances in Engineering and Technology Research (ICAETR ‚Äô14), pp. 1‚Äì8, IEEE, Unnao, India, August 2014.
[18] D. Rodr¬¥ƒ±guez, E. Garc¬¥ƒ±a, S. Sa¬¥nchez, and C. R.-S. Nuzzi, ‚ÄúDefining software process model constraints with rules using OWL and SWRL,‚Äù International Journal of Software Engineering and Knowledge Engineering, vol. 20, no. 4, pp. 533‚Äì548, 2010.
[19] Object Management Group (OMG), Meta Object Facility (MOF) Core Specification Version 2.0, 2006, http://www.omg .org/spec/MOF/2.0/PDF.
[20] Q. Dong, Z. Wang, W. Zhu, and H. He, ‚ÄúCapability requirements modeling and verification based on fuzzy ontology,‚Äù Journal of Systems Engineering and Electronics, vol. 23, no. 1, pp. 78‚Äì87, 2012.
[21] A. Queralt, G. Rull, E. Teniente, C. Farre¬¥, and T. Urp¬¥ƒ±, ‚ÄúAuRUS: automated reasoning on UML/OCL schemas,‚Äù in Conceptual Modeling‚ÄîER 2010, vol. 6412 of Lecture Notes in Computer Science, pp. 438‚Äì444, Springer, Berlin, Germany, 2010.
[22] Q.-C. Dong, Z.-X. Wang, G.-Y. Chen, J. Xin, and T.-T. Zhang, ‚ÄúDomain-specific modeling and verification for C4ISR capability requirements,‚Äù Journal of Central South University of Technology, vol. 19, no. 5, pp. 1334‚Äì1340, 2012.
[23] Q. Dong, Research on formal analysis framework of effectiveness concept of C4ISR systems [Ph.D. thesis], PLA University of Science and Technology, 2013.
[24] H. He, Z. Wang, Q. Dong, W. Zhang, and W. Zhu, ‚ÄúOntologybased semantic verification for UML behavioral models,‚Äù International Journal of Software Engineering and Knowledge Engineering, vol. 23, no. 2, pp. 117‚Äì145, 2013.

[25] Y. Zhang, Research on key techniques for service-oriented C4ISR capability requirements analysis, modeling and design [Ph.D. thesis], PLA University of Science and Technology, 2012.
[26] T. Bultan and X. Fu, ‚ÄúSpecification of realizable service conversations using collaboration diagrams,‚Äù Service Oriented Computing & Applications, vol. 2, no. 1, pp. 27‚Äì39, 2008.
[27] J. Su, T. Bultan, X. Fu, and X. Zhao, ‚ÄúTowards a theory of web service choreographies,‚Äù in Web Services and Formal Methods: 4th International Workshop, WS-FM 2007, Brisbane, Australia, September 28-29, 2007. Proceedings, vol. 4937 of Lecture Notes in Computer Science, pp. 1‚Äì16, Springer, Berlin, Germany, 2008.
[28] T. Bultan and X. Fu, ‚ÄúChoreography modeling and analysis with collaboration diagrams,‚Äù Bulletin of the Technical Committee on Data Engineering, no. 3, 2008.
[29] I. Yahmadi, Y. Baghdadi, and Z. Al-Khanjari, ‚ÄúGraphical description of WS-CDL,‚Äù in Proceedings of the 9th International Conference on Innovations in Information Technology (IIT ‚Äô13), vol. 4, pp. 192‚Äì197, March 2013.
[30] M. Emilia Cambronero, V. Valero, and E. Mart¬¥ƒ±nez, ‚ÄúDesign and generation of Web services choreographies with time constraints,‚Äù Journal of Universal Computer Science, vol. 17, no. 13, pp. 1800‚Äì1829, 2011.
[31] A. Mellat, N. Nematbakhsh, A. Farahi, and F. Mardukhi, ‚ÄúSuitability of uml state machine for modeling choreography of services,‚Äù International Journal of Web & Semantic Technology, vol. 2, no. 4, pp. 33‚Äì53, 2011.
[32] H. Foster, S. Uchitel, J. Magee, and J. Kramer, ‚ÄúAn integrated workbench for model-based engineering of service compositions,‚Äù IEEE Transactions on Services Computing, vol. 3, no. 2, pp. 131‚Äì144, 2010.
[33] M. V. Rosing, S. White, F. Cummins et al., ‚ÄúBusiness process model and notation‚ÄîBPMN,‚Äù in Business Process Management Handbook, pp. 429‚Äì453, 2015.
[34] M. Cortes-Cornax, S. Dupuy-Chessa, D. Rieu, and N. Mandran, ‚ÄúEvaluating the appropriateness of the BPMN 2.0 standard for modeling service choreographies: using an extended quality framework,‚Äù Software & Systems Modeling, 2014.
[35] OMG, OMG Unified Modeling Language (OMG UML), Superstructure, V.2.1.2, 2007, http://www.omg.org/spec/UML/2.1.2/ Infrastructure/PDF.
[36] D. Li, X. Li, and V. Stolz, ‚ÄúQVT-based model transformation using XSLT,‚Äù Acm Sigsoft Software Engineering Notes, vol. 36, no. 1, pp. 1‚Äì8, 2011.
[37] A. Belghiat and M. Bourahla, ‚ÄúTransformation of UML models towards OWL ontologies,‚Äù in Proceedings of the 6th International Conference on Sciences of Electronics, Technologies of Information and Telecommunications (SETIT ‚Äô12), pp. 840‚Äì846, March 2012.
[38] No Magic, MagicDraw Technical Overview, 2015, http://www .nomagic.com/products/magicdraw.html.
[39] J. Su and Y. Sun, ‚ÄúChoreography revisited,‚Äù in Web Services and Formal Methods, vol. 8379 of Lecture Notes in Computer Science, pp. 13‚Äì25, Springer, 2014.
[40] S. Wieczorek, Modeling and Model-Based Testing of Service Choreographies, Akademische Verlagsgemeinschaft Mu¬®nchen, 2011.
[41] A. Barros, T. Hettel, and C. Flender, ‚ÄúProcess choreography modeling,‚Äù in Handbook on Business Process Management 1, International Handbooks on Information Systems, pp. 257‚Äì277, Springer, Berlin, Germany, 2010.

20

Mathematical Problems in Engineering

[42] V. Haarslev and R. Mo¬®ller, ‚ÄúConsistency testing: the race experience,‚Äù in Automated Reasoning with Analytic Tableaux and Related Methods, vol. 1847 of Lecture Notes in Computer Science, pp. 57‚Äì61, Springer, Berlin, Germany, 2000.
[43] B. Motik and U. Sattler, ‚ÄúA comparison of reasoning techniques for querying large description logic Aboxes,‚Äù in Logic for Programming, Artificial Intelligence, and Reasoning: 13th International Conference, LPAR 2006, Phnom Penh, Cambodia, November 13‚Äì17, 2006. Proceedings, vol. 4246 of Lecture Notes in Computer Science, pp. 227‚Äì241, Springer, Berlin, Germany, 2006.
[44] P. Cimiano, P. Haase, Q. Ji et al., ‚ÄúReasoning with large a-boxes in fuzzy description logics using dl reasoners: an experimental evaluation,‚Äù in Proceedings of the ESWC Workshop on Advancing Reasoning on the Web Scalability & Commonsense, 2008.
[45] Z. Wang, L. Zhou, Y. Zhao et al., ‚ÄúWeb services choreography validation,‚Äù Service Oriented Computing and Applications, vol. 4, no. 4, pp. 291‚Äì305, 2010.
[46] WS-CDL Eclipse Plugin, 2014, http://wscdl-eclipse.sourceforge .net.
[47] C. Das and P. Bhuyan, ‚ÄúA systematic survey report on various frameworks and models for verification of choreography in SOA,‚Äù Journal of Computer Science & Engineering Technology, vol. 5, no. 4, pp. 411‚Äì418, 2014.
[48] F. Besson, A framework for automated testing of web service choreographies [Ph.D. thesis], University of SaÀúo Paulo, SaÀúo Paulo, Brazil, 2011.
[49] Y. Xia, H. Xue, and X. Wang, ‚ÄúPerformance prediction of WSCDL based service composition,‚Äù in Proceedings of the 10th International Conference on Quality Software (QSIC ‚Äô10), pp. 294‚Äì299, July 2010.
[50] Y. Dong, Y. Xia, T. Sun, and Q. Zhu, ‚ÄúModeling and performance evaluation of service choreography based on stochastic Petri net,‚Äù Journal of Computers, vol. 5, no. 4, pp. 516‚Äì523, 2010.
[51] H. Foster, S. Uchitel, J. Magee, and J. Kramer, ‚ÄúAn integrated workbench for model-based engineering of service compositions,‚Äù IEEE Transactions on Services Computing, vol. 3, no. 2, pp. 131‚Äì144, 2010.
[52] C. Molina-Jimenez and S. Shrivastava, ‚ÄúEstablishing conformance between contracts and choreographies,‚Äù in Proceedings of the 15th IEEE Conference on Business Informatics (CBI ‚Äô13), pp. 69‚Äì78, IEEE, Vienna, Austria, July 2013.
[53] G. D¬¥ƒ±az and L. Llana, ‚ÄúContract compliance monitoring of web services,‚Äù in Service-Oriented and Cloud Computing, vol. 8135 of Lecture Notes in Computer Science, pp. 119‚Äì133, Springer, Berlin, Germany, 2013.
[54] P. Nduwimfura, D. Xu, H. Miao, Z. Lei, and B. Chen, ‚ÄúReasoning on formalizing WS-CDL mobility using process algebra,‚Äù in Proceedings of the IEEE Asia-Pacific Services Computing Conference (APSCC ‚Äô10), pp. 676‚Äì682, December 2010.
[55] G. Salau¬®n, T. Bultan, and N. Roohi, ‚ÄúRealizability of choreographies using process algebra encodings,‚Äù IEEE Transactions on Services Computing, vol. 5, no. 3, pp. 290‚Äì304, 2012.
[56] X. Zhang and H. Liu, ‚ÄúFormal verification for CCML based web service composition,‚Äù Information Technology Journal, vol. 10, no. 9, pp. 1692‚Äì1700, 2011.
[57] S. Liu, D. Liu, H. Qi, and J. Guan, ‚ÄúComposing semantic web service with description logic rules,‚Äù Journal of Computer Research and Development, vol. 48, no. 5, pp. 831‚Äì840, 2011.
[58] L. Chang, Z. Z. Shi, L. M. Chen, and W. Niu, ‚ÄúFamily of extended dynamic description logics,‚Äù Journal of Software, vol. 21, no. 1, pp. 1‚Äì13, 2010.

[59] L.Chang,Z.Shi,T.Gu,and L. Zhao, ‚ÄúA family of dynamic description logics for representing and reasoning about actions,‚Äù Journal of Automated Reasoning, vol. 49, no. 1, pp. 1‚Äì52, 2012.
[60] B. B. Hariri, D. Calvanese, M. Montali, G. de Giacomo, R. De Masellis, and P. Felli, ‚ÄúDescription logic knowledge and action bases,‚Äù Journal of Artificial Intelligence Research, vol. 46, pp. 651‚Äì 686, 2013.
[61] Z. Huang, F. Xiao, and L. Tu, ‚ÄúModeling service composition using priced probabilistic process algebra,‚Äù in Proceedings of the 5th IEEE International Symposium on Service-Oriented System Engineering (SOSE ‚Äô10), pp. 35‚Äì38, June 2010.
[62] P. Drobintsev, V. P. Kotlyarov, and I. V. Nikiforov, ‚ÄúTechnology aspects of state explosion problem resolving for industrial software design,‚Äù in Proceedings of the Spring/Summer Young Researchers‚Äô Colloquium on Software Engineering, pp. 46‚Äì51, Kazan, Russia, May 2013.
[63] S. Ben-David, R. Trefler, and G. Weddell, ‚ÄúModel checking using description logic,‚Äù Journal of Logic & Computation, vol. 20, no. 1, pp. 111‚Äì131, 2010.
[64] E. M. Clarke, W. Klieber, M. Nova¬¥cÀáek, and P. Zuliani, ‚ÄúModel checking and the state explosion problem,‚Äù in Tools for Practical Software Verification, vol. 7682 of Lecture Notes in Computer Science, pp. 1‚Äì30, Springer, Berlin, Germany, 2012.

Advances in
Operations Research

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Advances in
Decision Sciences

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Applied Mathematics

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Algebra
Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Probability and Statistics

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

The Scientific World Journal

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

International Journal of
Combinatorics

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Submit your manuscripts at http://www.hindawi.com

International Journal of
Differential Equations

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Advances in
Mathematical Physics

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Complex Analysis

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Mathematics
Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Mathematical Problems in Engineering

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Abstract and Applied Analysis
Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Discrete Dynamics in Nature and Society

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

International Journal of Mathematics and Mathematical Sciences

Journal of
Discrete Mathematics

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Function Spaces

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

International Journal of
Stochastic Analysis

Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

Journal of
Optimization
Hindawi Publishing Corporation http://www.hindawi.com

Volume 2014

