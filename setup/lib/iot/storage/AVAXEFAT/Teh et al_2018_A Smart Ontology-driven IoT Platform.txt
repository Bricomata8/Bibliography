Demo Abstract: A Smart Ontology-driven IoT Platform
Jun Hao Teh, Vishal Choudhary, Hock Beng Lim
Center for Smart Systems Singapore University of Technology and Design [junhao_teh | vishal_choudhary | limhb]@sutd.edu.sg

ABSTRACT
Conventional IoT infrastructure deployments require complex configurations and management at the sensor devices, gateway and the backend levels. We have developed a smart ontologydriven IoT platform which can significantly improve the scalability and efficiency of the deployment and management of large-scale IoT infrastructures. The platform provides a unified ontology management layer across the sensor devices, IoT gateway and IoT backend. It also provides a virtualization-based IoT gateway which supports the interoperability of sensor devices with heterogeneous network protocols.
CCS CONCEPTS
• Sensor Networks • Ontology Engineering
KEYWORDS
IoT Infrastructure, Ontology, Virtualization
ACM Reference format:
Jun Hao Teh, Vishal Choudhary and Hock Beng Lim. 2018. Demo Abstract: A Smart Ontology-driven IoT Platform. In Proceedings of 16th ACM Conference on Embedded Networked Sensor Systems (SenSys’18). ACM, New York, NY, USA, 2 pages.
1 Introduction
Ontology refers to a commonly agreed set of concepts and terminologies within a subject area or domain. The key benefit of ontologies lies in facilitating the understanding and sharing of knowledge [1]. Our smart IoT platform provides a unified ontology and its associated ontology management framework to support IoT infrastructure deployments. The ontology specifies the properties of the sensors and devices used in the IoT infrastructure, and it is used across the entire IoT infrastructure consisting of sensor devices, IoT gateway, and IoT backend.
______________________________________________________________________________________________________________________________________________
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from Permissions@acm.org.
SenSys’18, November 4-7, 2018, Shenzhen, China © 2018 Association for Computing Machinery. ACM ISBN 978-1-4503-5952-8/18/11 … $15.00 https://doi.org/10.1145/3274783.3275215

Existing IoT infrastructure deployments require complex configurations and management. Even adding a new sensor device might require manual configuration. Our ontology-driven IoT platform provides a software framework that automates and simplifies tasks such as adding a new sensor device, sensor device discovery, device management, data collection and management, and data sharing and visualization. The specification and properties of sensor devices, such as the sensor type, data format, communication protocol, etc. are stored in our ontology, which is in OWL format. The ontology framework enables the IoT infrastructure to be highly scalable and extensible. For example, adding new functionalities for a sensor is done by adding these functional properties to the sensor’s ontology. Variants of sensors of the same type, say temperature sensors, will share common ontology properties, but also have some distinguishing properties.
The IoT gateways currently available in the market support limited or even proprietary network protocols. Our IoT platform provides a virtualization framework [2] and an application programming interface (API) [3] that enables the IoT gateway to support the interoperability of sensor devices with heterogeneous network protocols.
2 System Architecture
Figure 1: System Architecture of IoT Platform Figure 1 shows the system architecture of our IoT platform. The sensor devices can send data to the IoT backend in two ways:
• For devices with internet connectivity (e.g. via WiFi or 3G/4G), the sensor data can be directly uploaded to the MQTT broker of the backend.
• For devices without internet connectivity, the sensor data is sent to the IoT gateway via Serial, Bluetooth, Zigbee, LoRa, etc. The gateway then performs a MQTT publish of the data to the broker.

424

SenSys’18, November 4-7, 2018, Shenzhen, China
3 IoT Gateway

J. H. Teh, et al.
• Sensor data depository (MongoDB). • Ontology depository (in OWL format). • Django web server to receive sensor data and serve a web
app to visualize the sensor data. • RESTful API to query and share the sensor data.
5 Setup and Demo

Figure 2: Software Architecture of IoT Gateway
Figure 2 shows the software architecture of the IoT gateway. Our prototype IoT gateway is implemented on a Raspberry Pi 3. The gateway interacts with a new sensor device as follows:
• The information for the new sensor device is added to the ontology stored at the backend.
• The gateway periodically synchronizes its local copy of the ontology with that of the backend, and updates it with the new sensor device information.
• The gateway scans its various network interfaces (e.g. Zigbee, Bluetooth, etc.) to discover nearby devices.
• After discovering the new device, the gateway checks its local copy of the ontology for information about the device. For example, the gateway can determine the sensor type from the information in the ontology.
• The gateway uses the ontology information of the new device to establish connection with the device and interpret the sensor data received from it.
• The gateway uploads the sensor data to the IoT backend via MQTT publish.
4 IoT Backend

Figure 4: Demo Setup
The demo setup (see Figure 4) consists of the IoT gateway (Raspberry Pi 3) and two types of sensor devices: the Xbee environment sensor and the AirQ, an air quality monitoring device developed by our team. The Xbee sensor will send its data (luminosity, temperature and humidity) to the gateway. The AirQ also sends its data (PM2.5, PM10, temperature and humidity) to the gateway. The gateway will upload the Xbee and AirQ sensor data via MQTT to the backend.

Figure 3: Software Architecture of IoT Backend
Figure 3 shows the software architecture of the IoT backend. The components of the backend include:
• MQTT broker for sensor data collection.

Figure 5: IoT Gateway Graphical User Interface
Figure 5 shows the GUI of the IoT gateway. The data from the Xbee and AirQ sensors is visualized using the web app.
REFERENCES
[1] M. Iqbal, W. Wang, C. Fu and H. B. Lim, “An integrated ontology management and data sharing framework for large-scale cyberinfrastructure,” in Guide to eScience: Next Generation Scientific Research and Discovery, Computer Communications and Networks, X. Yang, L. Wang, W. Jie (Eds), Chapter 7, pp. 179-206, Springer, 2011.
[2] H. B. Lim, M. Iqbal and T. J. Ng, “A virtualization framework for heterogeneous sensor network platforms,” Proc. of the 7th ACM Conference on Embedded Networked Sensor Systems (SenSys 2009), Nov 2009.
[3] M. Iqbal, D. Yang, T. Obaid, T. J. Ng and H. B. Lim, “A service-oriented application programming interface for sensor network virtualization,” Proc. of the 10th International Conference on Information Processing in Sensor Networks (IPSN 2011), Apr 2011.

425

