Software Deﬁned Radio Controller Using Bluetooth

Hyoseok Yoon

Saet-Byeol Yu

Se-Ho Park

Contents Convergence Research Center Contents Convergence Research Center Contents Convergence Research Center

Korea Electronics Technology Institute Korea Electronics Technology Institute Korea Electronics Technology Institute

Seoul, Korea

Seoul, Korea

Seoul, Korea

hyoon@keti.re.kr

sbyu@keti.re.kr

sehopark@keti.re.kr

Abstract—We present a Bluetooth-based mobile application to support and enhance internal and external interfaces to software deﬁned radio platforms. For this application, a control message protocol used between software deﬁned radio platform and smart devices is designed and implemented with examples of various control ﬂows. With enhanced controllability and smart device connectivity through Bluetooth, versatile applications such as connected audio applications and in-vehicle infotainment systems can be realized.
Keywords—radio control; software radio; bluetooth; mobile applications; networked control systems
I. INTRODUCTION
Software Deﬁned Radio (SDR) provides ﬂexible and reconﬁgurable architecture [1] that can be used to provide contextaware services in cognitive radio domain [2] and enhance the degree of programmability of network devices [3]. Current states of the art and technical challenges for SDR are addressed in [4] [5] [6]. In this paper, we propose and implement a Bluetooth-based mobile controller for SDR, named SDRController, to support interfaces between SDR hardware and smart devices [7] to enable novel applications such as in-vehicle infotainment systems [8]. To show feasibility of our approach, a control message protocol and control ﬂows are demonstrated with the proposed SDRController.
II. SMART CONVERGENCE PLATFORM
A Smart Convergence Platform (SCP) aims to receive multistandards radio, control and reconﬁgure based on SDR architecture, and communicate with smart devices via Bluetooth. Our initial attempts on its preliminary concept, design and implemented simulation are described in [7]. Fig. 1 shows a reﬁned SCP that integrates a Software Deﬁned Radio Platform (SDRP) and a Connected Audio Application Platform (CAAP). The SDRP’s role is to receive and control multistandards radio within the SCP, whereas the CAAP’s role is to interface the SCP to external smart devices.
With a mobile controller application named SDRController, user-requested messages are ﬁrst delivered to the CAAP using Bluetooth Serial Port Proﬁle (SPP). Then the CAAP relays the received messages to the SDRP using a universal asynchronous receiver-transmitter (UART). Finally, the SDRP is
This research was supported by the Ministry of Trade, Industry and Energy (MOTIE) and Korea Evaluation Institute of Industrial Technology (KEIT). [10063285, Development of RF SoC and Smart Convergence Platform for SDR (Software Deﬁned Radio)]

Fig. 1. An integrated SCP encompassing the SDRP and the CAAP.
controlled by messages received from the CAAP. For transmitting audio data, I2C is used between the SDRP and the CAAP, while Bluetooth Advanced Audio Distribution Proﬁle (A2DP) is used between the CAAP and a connected Bluetooth speaker. An interaction ﬂow among the SCP, the SDRPController, and the speaker is depicted in Fig. 2.

Fig. 2. An interaction ﬂow for using the SCP.

A. Control Message Protocol
We designed and implemented a consistent protocol for control messages for both types of internal (i.e., system-level) and external interfaces for multi-standards radio. For example, when the SDRP starts initialization steps, system-level control messages and Digital Audio Broadcasting (DAB) initialization messages are delivered following the same protocol.

0

1

2

3

4

5

Header (8 Bytes)

0

1

2

3

4

5

57 44 52 00 38 00

0

1

2

3

4

5

Packet Preamble CNT CMD DNS

6

7

6

7

00 02

6

7

SEG

Payload (22 Bytes) CRC (2 Bytes)

08 05

01 34

Fig. 3. The designed control message protocol, an exemplar message, and detailed header description (CNT = Counter, CMD = Command ID, DNS = Device & Standard IDs, SEG = Segmentation).
Fig. 3 represents a 32 bytes packet protocol for control messages that is composed of 8 bytes of a header, 22 bytes of a payload, and 2 bytes of a cyclic redundancy check (CRC), respectively. Speciﬁcally, the header is composed of 3 bytes for

978-1-5386-4646-5/18/$31.00 ©2018 IEEE

735

ICUFN 2018

packet preamble, 1 byte for counter, 1 byte for command ID, 1 byte for device & standard IDs, and 2 bytes for a segmentation ﬂag and length.

CAAP
PN CMD DAB TUNE

SDRP

B. Examples of Control Message Flow
To demonstrate interactions between the CAAP who interfaces control messages with the SDRController and the SDRP, we present 3 representative control message ﬂows.
1) Initialization of the SDRP: Fig. 4 shows a control message ﬂow between the CAAP and the SDRP for the initialization. When control messages from the CAAP are successfully received and processed in the SDRP, the SDRP sends back corresponding response messages. Consequently, the CAAP is notiﬁed with an execution state and results.

PN CMD DAB TUNE RSP PN NOTIFY DAB ENSINFO PN NOTIFY DAB SRVINFO PN NOTIFY DAB SRVCOMP PN NOTIFY DAB SCANINFO

Fig. 5. A sequence diagram for channel scan.

CAAP

SDRP

CAAP

SDRP

PN CMD DAB SELECT

PN CMD SYS SET CONFIG

PN CMD DAB SELECT RSP

PN CMD SYS SET CONFIG RSP

PN NOTIFY DAB PLAYINFO

PN CMD SYS GET UD VERSION

PN CMD DAB ACTSTOP

PN CMD SYS GET UD VERSION RSP

PN CMD DAB ACTSTOP RSP

PN CMD DAB SELECT SYBCH PAD

PN CMD DAB SELECT SYBCH PAD RSP

Fig. 6. A sequence diagram for channel selection.

PN CMD DAB DRC
PN CMD DAB DRC RSP
PN CMD DAB BER MEASURE
PN CMD DAB BER MEASURE RSP
PN CMD DAB SET FICDUMP
PN CMD DAB SET FICDUMP RSP
Fig. 4. A sequence diagram for the SDRP initialization where system-level control messages are highlighted in blue.
2) Channel Scan: A sequence diagram for a channel scan is shown in Fig. 5. A channel scan with speciﬁed frequency ranges is issued with a PN_CMD_DAB_TUNE message. On the SDRP, a response message is sent back to the CAAP, followed by messages that contain service information (ensemble, service, and service component information) and a PN_NOTY_DAB_SCANINFO on completion. Consequently, the CAAP parses and retrieves service information.
3) Channel Selection: After completing channel scan, a PN_CMD_DAB_SELECT control message with appropriate service parameters is delivered to the SDRP for channel selection as shown in Fig. 6. According to the service parameters, an intended frequency is tuned and corresponding service is selected for playing a connected audio service. A successful channel selection from the CAAP is acknowledged by a response message from the SDRP. To change or stop the current service, a PN_CMD_DAB_ACTSTOP message is used.

III. IMPLEMENTATION OF SDRCONTROLLER To conveniently control the SCP, we implemented a Bluetooth-based mobile application (SDRController) that can communicate with the CAAP for controlling the SDRP. Our implementation is based on Android OS and we used Bluetooth SPP to control the CAAP. By using SPP, a virtual yet working serial communication between Bluetooth devices is implemented. Following the speciﬁcation of SPP and roles, the CAAP connected to the SDRP is implemented as an ‘Acceptor’ that awaits other devices to connect and the SDRController is implemented as an ‘Initiator’ that connects to the CAAP. Fig. 7 shows our testbed.
Fig. 7. Our testbed includes a DAB test equipment, a DRM test equipment, the SCP consisted of the SDRP and the CAAP, an Android-based smartphone and a Bluetooth speaker.

736

SERVICE ID
FREQUENCY ENSEMBLE ID SUB CHANNEL ID BITRATE SC TYPE MODE APP INDEX LABEL
Fig. 9. Channel information saved on the application DB.

Fig. 8. The SDRController showing results of Connect Bluetooth, Channel Scan, and Speaker commands, respectively.
The GUI of SDRController is divided into three areas as shown in Fig. 8. The upper area is designated for buttons that execute functional commands of Connect Bluetooth, Channel Scan, and Speaker. The central area is used to display channel lists of various radio standards, i.e., DAB, DRM, HD Radio, and AM/FM. The bottom area is reserved to display logs for development purposes and current status of the SCP. Results of executing three commands are depicted in Fig. 8 and detailed processes are described.
A. Connect Bluetooth Command
When a user clicks on Connect Bluetooth button, a displayed pop-up window allows the user to search, connect, and conﬁgure a CAAP. Selecting a CAAP from the displayed list establishes a Bluetooth SPP connection between the SDRController and the CAAP. Then initialization control messages are sent to the CAAP. The CAAP relays control messages received from the SDRController to the SDRP via UART. Then the SDRP is initialized according to the control messages and response messages are returned back to the CAAP via UART. Finally, the CAAP relays the response messages to the SDRController through the Bluetooth SPP.
B. Channel Scan Command
When Channel Scan button is clicked on the SDRController, the SDRController sends channel scan control messages to the CAAP who relays the control messages to the SDRP via UART to perform a full channel scan. For example, 15 frequencies are fully scanned for the DAB standard which takes considerable amount of time. After completing the full scan, channel or service names are displayed on the central area of GUI. By conﬁguring a service ﬁlter, we only display audio and video broadcasting services. To reduce unnecessary burden of repetitive channel scanning, retrieved channel information is stored on an on-device application database after the ﬁrst full scan. Therefore launching the SDRController and establishing Bluetooth connection automatically display stored channel information by accessing the on-device application database. A Channel Scan to the SDRP is responded with service information. Then channel information and other required information for tuning (Fig. 9) are saved to the DB with a unique SERVICE_ID as a key.

C. Speaker Command
This command invokes the CAAP to search and connect for Bluetooth devices capable of playing audio through A2DP. The CAAP uses a Class of Device (CoD) ﬁlter of 0x04 to search audio devices only. Two standards of radio broadcasting service, DAB and DRM are supported. For each radio service selected, a scanned channel service list is displayed where the user can select a service to play through the speaker.
IV. CONCLUSION
In this paper, we demonstrated how our proposed SDRController and its control message protocol and control ﬂows can be used as a tool for the SCP, enhancing internal and external interfaces as well as controllability of the SDRP using Bluetooth.
ACKNOWLEDGMENT
Authors thank PnpNetwork Technologies, Inc. for development, integration, and evaluation of the SDRP and the SCP.
REFERENCES
[1] U. Ramacher, “Software-deﬁned radio prospects for multistandard mobile phones,” Computer, vol. 40, no. 10, pp. 62–69, Oct 2007.
[2] T. Ulversoy, “Software deﬁned radio: Challenges and opportunities,” IEEE Communications Surveys Tutorials, vol. 12, no. 4, pp. 531–550, Fourth 2010.
[3] D. F. Macedo, D. Guedes, L. F. M. Vieira, M. A. M. Vieira, and M. Nogueira, “Programmable networks—from software-deﬁned radio to softwareo software-deﬁned networking,” IEEE Communications Surveys Tutorials, vol. 17, no. 2, pp. 1102–1125, Secondquarter 2015.
[4] G. Sklivanitis, A. Gannon, S. N. Batalama, and D. A. Pados, “Addressing next-generation wireless challenges with commercial software-deﬁned radio platforms,” IEEE Communications Magazine, vol. 54, no. 1, pp. 59–67, January 2016.
[5] A. M. Wyglinski, D. P. Oroﬁno, M. N. Ettus, and T. W. Rondeau, “Revolutionizing software deﬁned radio: case studies in hardware, software, and education,” IEEE Communications Magazine, vol. 54, no. 1, pp. 68–75, January 2016.
[6] X. Wei, H. Liu, Z. Geng, K. Zheng, R. Xu, Y. Liu, and P. Chen, “Software deﬁned radio implementation of a non-orthogonal multiple access system towards 5g,” IEEE Access, vol. 4, pp. 9604–9613, 2016.
[7] H. Yoon, J.-E. Lee, S.-B. Yu, and S.-H. Park, “Bluetooth-enabled software deﬁned radio platform,” International Journal of Future Generation Communication and Networking, vol. 10, no. 7, pp. 1–12, Jul. 2017.
[8] H. Yoon and S.-H. Park, “Enabling in-vehicle infotainment with bluetooth connectivity,” Journal of Industrial Information Technology and Application, vol. 1, no. 1, pp. 12–18, Jun. 2017.

737

