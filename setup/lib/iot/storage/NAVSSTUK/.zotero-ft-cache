2019 IEEE International Conference on Blockchain (Blockchain)

Data Mining-based Ethereum Fraud Detection

Eunjin (EJ) Jung

Marion Le Tilly

Computer Science Department Msc Applied Mathematics

University of San Francisco E´ cole Polytechnique

San Francisco, U.S.A.

Palaiseau, France

Email: ejung@cs.usfca.edu Email: marion.le-tilly

@polytechnique.edu

Ashish Gehani

Yunjie Ge

Computer Science Laboratory Computer Science Department

SRI International

University of San Francisco

Menlo Park, USA

San Francisco, U.S.A.

Email: ashish.gehani@sri.com Email: yge7@usfca.edu

Abstract—The popularity of blockchain-based currencies, such as Bitcoin and Ethereum, has grown among enthusiasts since 2009. Relying on the anonymity provided by the blockchain, hustlers have adapted ofﬂine scams to this new ecosystem. As a result, Ponzi schemes are proliferating on Ethereum, dressed up as secure investment schemes. They reward early investors with funds from the later ones before collapsing, leaving the last investors empty handed. Illegal in the ofﬂine world, they are creating thousands of victims on Ethereum, while stealing millions of dollars worth of ether. We use data mining to provide a detection model for Ponzi schemes on Ethereum, improving over prior work. We built a dataset of likely benign Ethereum smart contracts, in addition to known Ponzi scheme smart contracts, and designed features based on their compiled code and transactions. Using Weka to benchmark several classiﬁcation algorithms, we obtained models that achieve both high precision and high recall. Our 0-day model can be used as soon as a smart contract is uploaded on the blockchain. The full-feature model continued to show high performance for almost 250 days. A detailed analysis on top-strength features provides novel perspectives on Ponzi scheme behavior.
Index Terms—Blockchain, Smart Contract, Ponzi Schemes, Ethereum
I. INTRODUCTION
In 2009, Satoshi Nakamoto came up with a protocol enabling value transfer among non-trusting individuals: the Bitcoin [1]. A peer-to-peer network enabling ﬁnancial exchanges between users, based on economic incentives rather than trusted authorities. It operates on the blockchain: a public ledger keeping track of all the transactions in an immutable way using novel ideas such as Nakamoto consensus using proof of work. While all transactions are recorded on the blockchain and retrievable by any participant, Bitcoin still ensures the anonymity of its users who identify themselves solely with public keys, signing transactions with associated private keys.
Beneﬁting from the anonymity, criminals quickly took advantage of its popularity to rip off other users by creating multiple scams. An empirical analysis of Bitcoin-based scams in 2015 showed that at least $11 million was stolen from 13,000 victims [2]. Unlike scams before Bitcoin, cryptocurrencies are not yet subject to any government regulations, making it difﬁcult to seek recompense for damages caused by fraud. Due to the immutability of the blockchain and the anonymity of users, it is nearly impossible to revert a fraudulent transaction.

Most scams are inspired by ofﬂine precedents such as Ponzi schemes: a 150-year-old deceit emulating an investment program with high returns, of which one can cash out only if there are enough new users to pay its proﬁt with their investment. As a result, early investors cash in on the backs of the most recent ones, who end up empty-handed. These scams damage the reputation of the whole cryptocurrency ecosystem, including Ethereum. While Bitcoin also has a simple scripting language, Ethereum’s Solidity language and the Ethereum Virtual Machine (EVM) provided Turing-completeness for the ﬁrst time on blockchains. Now users can write smart contracts: pieces of code stored on the blockchain that implement applications capitalizing on distributed consensus as well as anonymity, such as escrow services. The combination of the blockchain’s immutability and smart contracts opens a new chapter of applications. Now users do not have to place trust in institutions or authorities to behave correctly, but trust the code that is publicly viewable and potentially auditable. A number of projects were released as smart contract auditors and veriﬁers, such as QuantStamp [3] and CertiK [4]. In fact, “The code is the law” was the motto of the Distributed Autonomous Organization (DAO) [5]. Ethereum’s smart contracts opened another level of potential use of blockchain and cryptocurrencies, but unfortunately they also attracted illintentioned users.
Ponzi schemes are proﬁtable on Ethereum thanks to the blockchain’s popularity. An empirical analysis in 2015 [2] showed that fraudulent transactions already represents 60% of the transaction volume in USD and may increase even more. Successful Ponzis impact few users who make high contributions, creating particularly unfortunate victims. Smart Ponzi, the Ponzi scheme smart contract, preys upon the transparency provided by the blockchain as a show of faith to draw in inexperienced customers who cannot identify the the deceit and ﬂaws in the implementation.
Prior work [6], [7], [8] showed that data mining-based Ponzi scheme detection is feasible. There are two types of features: 0-day features and behavior-based features. 0-day features are available as soon as the smart contract is uploaded to the blockchain, such as the bytecode and the size of the smart contract. Behavior-based features are based on the “behavior” of the contract, such as paying the early investors from the payments later investors make. We used a set of smart contracts

978-1-7281-4693-5/19/$31.00 ©2019 IEEE

266

DOI 10.1109/Blockchain.2019.00042

with veriﬁed source code and present new features. We also used them to build new behavior-based, 0-day and combined classiﬁcation models with improved performances. Our 0-day model shows 0.98 precision and 0.89 recall, compared to 0.90 and 0.80, respectively, by Chen et al. [8]. Our full-feature model shows 1.00 precision and 0.90 recall, compared to 0.94 and 0.81, respectively, in prior work [8]. While these results are strong, active attackers may get hold of the model and its features, and manipulate their smart contracts to evade the detection by the classiﬁers. We considered a model with selective features that are less controllable and predictable by active attackers and showed results of 0.97 precision and 0.78 recall.
The rest of the paper is organized as follows. Section II summarizes prior work using classiﬁcation to detect Ponzi scheme smart contracts on Ethereum. Section III provides a brief explanation of the Ethereum platform including smart contracts. Section IV describes how the data sets are collected, how the features are deﬁned, and the classiﬁcation models are trained. Section VI brieﬂy discusses directions for future work and summarizes the paper.
II. RELATED WORK
Financial scams in cryptocurrencies are different from ﬁnancial scams outside blockchain platforms in the sense that most transactions relevant to the scams are publicly viewable, with some exceptions such as Zcash [9] and Monero [10]. Kamps and Kleinberg took advantage of this public transaction data in detecting a classic ﬁnancial fraud, pump and dump price manipulation in cryptocurrencies and showed posthumous detection is possible [11].
Nikolic et al. surveyed smart contracts in Ethereum with vulnerabilities inspired by Parity hack [12]. In particular, they found 1,423 suicidal contracts out of 34,200 they collected. We found that some Ponzi scheme smart contracts from the public dataset [13] were suicidal. Nikolic et al. conjectured that the smart contracts with the suicide codes are likely to have vulnerabilities. They also found that out of 1,495 contracts classiﬁed as suicidal, there were only 403 distinct contracts, which suggests that the contracts with vulnerabilities are often reused.
Bian et al. analyzed the smart contracts written for Initial Coin Offerings (ICOs) and related information such as white papers to give scores to ICO offers [14]. Our approach only uses the information in the Ethereum blockchain and considers all Ponzi schemes, not just fraudulent ICOs.
Vasek and Moore studied 1,780 Bitcoin-based Ponzi schemes from http://bitcointalks.org and showed the social interaction between scammers and victims affect the lifetime of the scams [15].
In [6], Bartoletti et al. analyzed Ponzi scheme smart contracts’ behavior on Ethereum, using similarities between contracts bytecode to locate 191 of them. In total, the contracts collected almost half a million USD from more than 2000 distinct users. [6] highlights characteristics of Ponzi schemes behavior such as a high Gini coefﬁcient, a measure

of inequality in the distribution of money made by contracts to investors.
The approach in [7] reuses this characteristics to apply data mining techniques to Ponzi schemes implemented on Bitcoin. Their best classiﬁer manages to detect 31 Ponzi schemes out of 32 with 1% of false positives. It detects Ponzi schemes using features computed over a contract’s lifetime, narrowing the range of countermeasures that can be implemented against such schemes because tokens can not be refunded nor ﬂagged as stolen. Rahouti et al. [16] surveyed machine learning and data mining-based approaches in anomaly detection in Bitcoin, including [7].
Nevertheless, its approach has inspired [8] which describes a similar approach using Account features but also added Opcode features based on the contract’s code stored on the blockchain. They built three classiﬁcation models, Account, Opcode, and Account+Opcode using XGBoost, and the best performance comes from Account+Opcode model, precision at 94% and recall at 81%.
While Chen et al.’s [8] approach is the most similar to ours, we took three different steps in building our classiﬁcation models. First, we only used smart contracts with veriﬁed source codes on Etherscan [17] that has at least 10 incoming or outgoing transactions as our non-Ponzi data set. The creators of these contracts submit the source code to Etherscan and Etherscan conﬁrms that the source code compiles to the same code as what is uploaded to the blockchain. Many Ethereum users see this as an indicator that it is safe to use these contracts. Etherscan started this service in March 2016, so our non-Ponzi data set only contains contracts posted on Ethereum blockchain after March 2016. This resulted in a smaller nonPonzi data set than what was used in [8], but this way it is less likely to have wrongly-labeled data in our training data set. Second, we added more Account features, which we call behavior-based features. Third, we used different classiﬁcation models and achieved better performance. The details of these features and classiﬁcation models are in Section IV.
III. ETHEREUM PLATFORM
This section elaborates on Ethereum smart contracts and how Ponzi schemes exploit their characteristics. To enable the implementation of blockchain applications, Ethereum [18] integrates an Ethereum Virtual Machine (EVM), a run-time environment for EVM bytecode, to its platform. Thus, creating an Ethereum application boils down to writing its source code in a high-level language such as Solidity1, compiling it into EVM bytecode and eventually uploading it on the Ethereum blockchain. Once the contract has been uploaded, it is active: it can ﬁred and receive transactions but most importantly, its bytecode is immutable.
Ponzi smart contracts capitalize on this immutability to attract users, claiming that because the contract will run forever without being interfered with, investors are assured to make a proﬁt. Yet, they fail to mention that smart contract creators
1http://solidity.readthedocs.io/en/develop/

267

may modify its parameters such as the fee required for each investment or that, as explained in [6], smart contracts are not proven to be without ﬂaws. In other words, the immutability of the blockchain only ensure that the code execution is automatically enforced.
Ethereum has two types of accounts: contract and externally owned. Each account has a unique 20-bytes address pointing at four ﬁelds used to guarantee the uniqueness of each of its state:
• the nonce: incremented at each transaction to ensure it is processed only once;
• the account balance: current amount of ether of the account;
• the contract bytecode: immutable because it is stored on the blockchain;
• the account storage.
An externally owned account is controlled by a private key (accordingly by its owner) as opposed to contract accounts controlled by their contract code. Each time a contract account receives a transaction, it activates itself using the payload as input: reading and writing to internal storage, sending transactions or creating contracts in turn. For instance, when a Ponzi smart contract receives a transaction containing a sufﬁcient amount of Ether, Ethereum’s cryptocurrency, it triggers payment transactions to previous participants. In this context, the transaction received by the smart Ponzi is called a normal transaction as opposed to the one it ﬁres called internal transactions. We use features from both transactions in smart contract classiﬁcation.
To broadcast transactions to the whole network, they are packaged into blocks which are executed and veriﬁed by miners. Ethereum miners solve a hash puzzle to create the next block and earn the block reward. They are encouraged to include transactions in the block they create as they can collect transaction fees from included transactions. For transactions that need computation, i.e. transactions that invoke smart contracts, fees are proportional to the amount of computation required for the execution of the transaction. This computation fee is calculated as the multiplication of gas limit and gas price. The higher the price, the more eager miners will be to execute the transaction. If there is not enough gas, the execution fails, it runs out of gas: all side effects are reversed but the fee is lost. After the execution, transactions are validated block by block using a consensus protocol similar to Bitcoin, ensuring the safety of the system unless an attacker manages to own more than 51% of the computing power of the whole network.
IV. CLASSIFICATION MODEL
A. Data collection
First of all, we need a training dataset of both Ponzi and non-Ponzi smart contracts in Ethereum. For fraud detection projects, the data collection is often the most laborious step, requiring strenuous manual veriﬁcation and research to distinguish fraud and non-fraud instances. Thanks to [6], an

open-source dataset containing 184 Ponzi scheme addresses is available at [13].2 We were only able to retrieve the bytecode of 172 of them, as 8 of them executed self-destruct code. Each address has been manually inspected to conﬁrm whether it is a Ponzi scheme by both [6], [8], thus we consider these contracts as ground truth. The oldest Ponzi smart contract was posted in Ethereum blockchain on August 7th, 2015 and the latest one was posted on August 27th, 2017.
We used a web scrapper to collect 3,203 addresses of smart contracts with source codes veriﬁed by Etherscan, involved in at least 10 transactions, while trying to match the time frame of Ponzi scheme. When a developer creates a new smart contract on Ethereum, she has an option of submitting the source code to Etherscan. Then Etherscan veriﬁes the source code to prove the code has deterministic and veriﬁable builds. Many Ethereum users take this veriﬁcation as a vote of conﬁdence on the smart contract code. Since Etherscan started to provide this service in March 2016, the oldest non-Ponzi smart contract with veriﬁed source code was posted on February 11th, 2016. The latest non-Ponzi smart contract we used was posted on June 7th, 2018, based on the date of the last transaction from the Ponzi smart contracts.
We also ruled out the smart contracts with fewer than 10 transactions so that we will capture the behavior of non-Ponzi smart contracts that have substantial interactions with other accounts. However, it does not prevent the code from having ﬂaws. We were not able to manually conﬁrm all 3,203 smart contracts but performed a spot check and did not encounter any smart contract that was a Ponzi scheme.
We also collected all the transactions interacted with these contract addresses using Etherscan APIs. These transactions contain information such as which account paid how much Ether to the smart contract in question when. This information is later used to monitor the behavior of smart contract and turn them into features for classiﬁcation. Then through Web3 python interface 3, the EVM bytecode was recovered from the blockchain.
B. Classiﬁcation models
In order to come up with a classiﬁcation model as effective as possible, several well-known classiﬁcation algorithms competed representing different learning strategies:
• J48: a decision tree which enables visualization of the decision process exhibiting which features are used and how;
• Random Forest (RF): a decision forest, it aggregates the prediction of individual trees. It has proven to be an excellent classiﬁer for other fraud detection [19];
• Stochastic Gradient Descent (SGD): iterative method for optimizing a differentiable objective function.
Since we aim to detect Ponzi schemes, models will be evaluated using three metrics below:
2The original data set used in [6] contained 152 Ponzi contracts, and the authors added more to the dataset in January 2019.
3github repository: https://github.com/ethereum/web3.py

268

• precision: the ratio of actual Ponzi instances to those classiﬁed as Ponzi.

precision

=

T rueP ositive T rueP ositive + F alseP ositive

• recall: the ratio of correctly classiﬁed Ponzi instances to all Ponzi smart contracts.

recall

=

T rueP ositive T rueP ositive + F alseN egative

• F-score

F

−

score

=

2

×

P recision P recision

× +

Recall Recall

Note that we focus on the precision and recall of Ponzi instances. The training dataset is highly unbalanced with 3,203 non-Ponzi instances and only 172 Ponzi instances. As a result, the ZeroR algorithm, which simply classiﬁes every instance as non-Ponzi, correctly classiﬁes 94.9% of the all instances. However the precision of ZeroR algorithm would be impossible to compute (divided by 0) and its recall would be 0. Since our goal is to protect Ethereum users from Ponzi schemes, we optimize for precision and recall of Ponzi instances.

C. Features and their robustness
Feature selection is a crucial upstream work to have an efﬁcient classiﬁcation model. The following approach is motivated by previous works [6], [8], [20], [21] which shed light on two types of features. Both [6], [8] granted a signiﬁcant share of their work to the contracts’ bytecode to create features or to ﬁnd similar contracts, while [8], [7], [20], [21] characterized contracts by their interactions with their environment. We call the former as code features and the latter behavior-based features. Since the code features are available as soon as the contracts are uploaded to the blockchain, we use code features to build our 0-day classiﬁcation model that is usable as early as day 0, when the contract is uploaded.
1) Code (0-day) features: Using evmdis4, an open source disassembler, each contract bytecode has been turned into its equivalent in opcodes. Opcode is the abbreviation of operation code in Ethereum Virtual Machine. Figure 1 is a portion of disassembled bytecode from a smart Ponzi.
Then, the frequency of each opcode in the contract code is computed and stored in the database. We merged the frequencies of some opcodes in the same category into one, such as DUP1 and DUP2 into one DUP12 feature. The size of the bytecode of each contract in bytes is stored too to create the size info feature.
Top 10 code features Here we explain the top-10 strong code features in our classiﬁcation models. The full list of the EVM opcodes is available at [22].
• SSTORE writes a (u)int256 value to storage according to its key.
• POP pops a (u)int256 off the stack and discards it. • MSTORE writes a (u)int256 to memory at its offset. • SWAP1 swaps the last two values on the stack.

4github repository: https://github.com/Arachnid/evmdis

Fig. 1: Disassembled bytecode for contract 0x109c4f2ccc82c4d77bde15f306707320294aea3f

TABLE I: Statistics of Top Code Feature Frequency

Opcode
SSTORE POP
MSTORE SWAP1 STOP DUP9 RETURN SWAP2 DUP12 JUMP

Ponzi avg stdev 15.25 12.05 57.35 61.67 32.50 48.74 95.88 84.86 1.08 0.70 4.03 3.46 2.92 1.37 35.86 35.88 135.39 129.22 19.45 15.00

non-Ponzi avg stdev 0.36 3.50 3.42 29.20 2.33 18.16 4.24 34.76 0.03 0.38 0.10 0.95 0.13 1.02 1.65 13.63 6.64 52.47 1.41 11.41

• STOP halts execution of the contract • DUP9 duplicates the 10th value in the stack. • RETURN returns from this contract call • SWAP2 swaps the top of the stack with the 3rd last
element • DUP12 DUP1 clones the last value on the stack and
DUP2 clones the 2nd last value on the stack • JUMP unconditional jump
Table I shows the average and standard deviation of their frequencies in Ponzi and non-Ponzi smart contracts.
Our top-10 code features are very different from top-10 important features in [8]: with the exception of MSTORE, which is ranked at 10th important feature in [8], our top-10 do not overlap with their top-10 important features. As our nonPonzi data set only consists of contracts with veriﬁed source code with minimum 10 transactions from the same timeframe as Ponzi data set, our non-Ponzi data set is much smaller than theirs and the Opcode distributions are very different, which

269

results in different features in top 10. 2) Behavior-based features: Behavior-based features use
the interactions of the smart Ponzi with its users, i.e. transactions. These features capture logical and relevant ideas reﬂecting how Ponzi schemes behave.
Previously used features The literature [8], [7], [20], [21] provides a range of behavior-based features which characterize Ponzi smart contracts behavior.

• nbr tx in (resp. nbr tx out): the number of transactions which transferred ether to (resp. from) the smart contract;
• Tot in (resp. Tot out): the total amount of Ether transferred to (resp. from) the smart contract;
• mean in (resp. mean out): the average value of Ether transferred to (resp. from) the smart contract;
• sdev in (resp. sdev out): the standard deviation of Ether transferred to (resp. from) the smart contract;

Strength and robustness: We found that most of these features were not very strong, with the exception of the nbr_tx_in. This observation concurs with the ﬁndings in [8]. We speculate that an experienced Ponzi smart contract creators use several Ethereum wallet addresses to mask the number and amount of transactions in and out of the Ponzi smart contract to camouﬂage its fraudulent nature.
New behavior-based features

Ponzi schemes are considered as fraud mainly because the

sooner a user invests, the bigger the reward, to the extent that

some investors never see their money back. Early investors

receive huge amount of money while later investors receive

very limited ones. This distribution of money is unequal and

therefore characterized by a high Gini coefﬁcient.

The Gini coefﬁcient, ranging from 0 to 1, characterizes

inequality among a given distribution: the closer it is to 1

the more unequal the distribution is. For a given distribution

a among n participant, it is computed through the following

formula:

G(a) =

n i=1

(2i

−

n

−

1)a(i)

n

n i=1

a(i)

Furthermore, Ponzi smart contracts tend to slow down in the transaction frequency as shown in [6], hence the Gini time features.

• avg time btw tx: average amount of time between two transactions;
• lifetime: time between the ﬁrst and the last transactions; • Gini amt in (resp. Gini amt out): the Gini coefﬁcient
computed over the Ether amount of transactions to (resp. from) the smart contract; • overlap addr: the number of addresses that paid to the contract and also were paid by it. • Gini time in (resp. Gini time out): the Gini coefﬁcient computed over the time of the transactions paid (resp. was paid by) the smart contracts; • num addr in (resp. num addr out): the number of addresses (accounts) that paid to (resp. were paid by) this contract;

TABLE II: Statistics of Top 8 Behavior-based Feature Frequency

Feature
size info (bytes) nbr tx in*
lifetime (sec) num addr in gini amt in overlap addr gini time out avg time btw tx

Ponzi

avg

stdev

3848.47

3619.51

107.60

186.42

23M

31M

107.60

186.42

0.53

0.34

6.98

16.39

0.0003

0.0013

526079.02 1612850.48

non-Ponzi

avg

stdev

12514.90 7560.74

9594.61 40253.79

21M

15M

8349.56 38549.43

0.60

0.43

13.83

220.48

0.0002

0.0005

79009.68 153799.81

TABLE III: 0-day model performance comparison

Model J48
Random Forest SGD [8]

Precision 0.97 0.96 0.98 0.90

Recall 0.93 0.96 0.94 0.80

F-score 0.95 0.96 0.96 0.84

Table II shows the statistics of top 8 behavior-based features frequency in Ponzi and non-Ponzi smart contracts. Except for nbr tx in*, the rest of the top behavior-based features are new features.
V. PERFORMANCE EVALUATION
This section presents our behavior-based, 0-day, and fullfeature model’s performances compared to corresponding models in [8]. We also show that our full-feature model maintains high precision and recall from day 0 to day 248 of a smart contract’s lifetime. Each model was trained and tested using 10-fold cross-validation. Metrics may vary with the random seed used for the cross-validation. Therefore, averages of precision and recall were computed. All performance evaluations were done with Weka 3.8.3 [23].
A. 0-day model for early detection
Our 0-day model only uses features that are available on 0th day – i.e. as soon as the smart contract is uploaded to the blockchain. Table III shows how accuracy and recall of all three classiﬁcation models compares to the opcode-only model in prior work [8]. The best performance numbers are shown in bold. The strong performance of our 0-day model continues not only on day 0 but also on the following days as all the features rely on immutable properties of the smart contract. In other words, the 0-day model is effective not only for early detection but also Ponzi-scheme detection during the entire lifetime of a smart contract.
Table I above shows the top-10 strong features in 0-day model using information gain5.
B. Behavior-based model
Table IV shows our behavior-based models’ performance compared to the behavior-based model in prior work [8]. J48 shows the best recall of 0.872 among three classiﬁer models. Random Forest shows precision greater than Chen et al. [8].
5https://en.wikipedia.org/wiki/Information gain ratio

270

TABLE IV: Behavior-based model performance comparison

Model J48
Random Forest SGD [8]

Precision 0.93 0.98 1.00 0.74

Recall 0.87 0.84 0.08 0.32

F-score 0.90 0.91 0.15 0.44

While SGD resulted in better precision, the recall renders this model unusable, as shown by its F-score. Overall, the model using only behavior-based features did not perform as well as our own 0-day model but our new behavior-based features improved the classiﬁcation effectiveness.
Table II above shows top-8 behavior-based features according to their information gain. Note that size_info is the only feature included in both behavior-based and 0-day models, as this feature is available as soon as the contract is uploaded but also reﬂects the way the contract is written. The statistics in Table II provide insight into why these features help a model discriminate. We discuss two of our new features and their strengths in detail.
1) size info: Figure 2 illustrates the Ponzi smart contracts with a standard deviation less than half of the standard deviation of the non-Ponzi smart contracts. Our conjecture is that Ponzi smart contracts are often reused by different attackers as any smart contract can be downloaded from the blockchain and re-uploaded by a different user, which results in the signiﬁcantly smaller standard deviation. If the classiﬁcation model is known to the attackers, they may add unreachable or no-op codes to their smart contracts to change the smart contract sizes. However, such change is only feasible if the attackers have the source code to begin with. So the attackers who are copying and re-uploading existing Ponzi smart contracts are less likely to be able to defeat the classiﬁcation model.
2) lifetime: Figure 3 shows lifetime histograms for both Ponzi and non-Ponzi instances. Table II also shows that the standard deviation of non-Ponzi smart contracts is less than half of that of Ponzi ones. Lifetime is relatively easy to manipulate for attackers as they can pay the smart contract or get paid by the smart contract at a later date. However, all transactions require a transaction fee to be added to the canonical chain. The attackers would have to pay for lifetime change. This may discourage them from issuing transactions and changing the lifetime too often.
3) avg time btw tx: Table II shows a rather different result from the intense activity of the Ponzi schemes described in earlier work [6], showing much longer average elapsed time between transactions associated with Ponzi smart contracts than non-Ponzi – i.e., 526K versus 79K. This is due to some Ponzi schemes ﬁring transactions a year after their last sign of activity. The ﬁrst quartile of smart Ponzi is smaller than 6 minutes compared to 70 minutes for non-Ponzi, an observation that supports prior analysis [6]. Even when the classiﬁcation model is known to the attackers, it will be difﬁcult for an attacker to manipulate this feature as the attacker with many addresses can ﬁre transactions to shorten the elapsed time

(a) Ponzi smart contracts

(b) Non-Ponzi smart contracts Fig. 2: Bytecode size histograms

TABLE V: Full-feature model performance comparison

Model J48
Random Forest SGD [8]

Precision 0.98 0.93 0.99 0.94

Recall 0.97 0.92 0.94 0.81

F-score 0.97 0.93 0.96 0.86

between transactions, but cannot prevent transactions from happening and elongate the time between transactions.
C. Full-feature model
Table V shows our full-feature model’s performance, combining both code and behavior-based features. The best performance numbers are shown in bold.
We tested the full-feature model on days 0 to 248 from when the smart contract had been posted on the blockchain. Both precision and recall (and thus F-score as well) continued to show similar performance of over 0.98 precision and 0.94 recall. The performance over the ﬁrst 40 days from when the smart contract was uploaded is shown in Figure 4.
Overall, the full-feature model shows little improvement over the best performance of 0-day models. In fact, the

271

TABLE VI: Rankings of top 20-30 features on Days 0 and 50

day 0 size info SWAP7 Gini amt in SWAP5 overlap addr lifetime SWAP6 nbr tx in mean in gini time out
DUP7

day 50 size info SWAP7 overlap addr Gini amt in SWAP5 mean in SWAP6 gini time out
DUP7 sdev in Tot in

(a) Ponzi smart contracts
(b) Non-Ponzi smart contracts Fig. 3: Lifetime histograms
Fig. 4: Full-feature model’s perf. over the ﬁrst 40 days

size info feature is only listed at the 20th position in information gain ranking, while the top 19 features are all code features. Table VI shows how the top 20-30 features’ ranking changed from day 0 to day 50.
Interestingly, avg time btw tx is not listed as a top behavior-feature in the full-feature model. Instead, the average amount of investment (mean in) is useful on the ﬁrst day. Our conjecture is that non-Ponzi smart contracts are more likely to have investments starting on day 0 than Ponzi smart contracts. While this feature remains strong on day 50, lifetime becomes less important on day 50. Note that our lifetime feature is in seconds, and may differ greatly even in one day. By day 50, the discrimination power of lifetime is not as strong as sdev in or Tot in, which provide more information on investment patterns.
VI. CONCLUSION
While the blockchain is considered the next digital revolution, it is also perceived as an opportunity for exploitation by scammers. Ponzi smart contracts are presented as highreturn investment opportunities, while the risks involved are barely mentioned. We built data mining-based Ponzi detection models. The 0-day model can be used to ﬂag Ponzi smart contracts as soon as they are uploaded to the blockchain. It has a precision of 0.98 and recall of 0.96, improved from 0.90 and 0.80 in prior work [8]. Our behavior-based model has precision of 0.98 and 0.87, greatly improved from the earlier work’s 0.74 and 0.32, respectively. We also discussed behavior-based features in the case of active attackers who manipulate the smart contracts to evade the classiﬁer-based detection.
Our full-feature model exhibits a precision of 0.99 and recall of 0.97, improving over the prior work’s 0.94 and 0.81. In practice, this model can be used to ﬂag suspicious contracts so potential investors know about their risk. By testing on the thousands of contracts already on the blockchain and doing so over almost 250 days, we validated the usefulness of the models. Both our 0-day model and the full-feature model maintain high precision and recall (over 0.90) from the ﬁrst day the smart contract is uploaded (day 0) to day 248. Data mining-based Ponzi detection can server as the ﬁrst line of defense against fraudulent smart contracts.

272

ACKNOWLEDGEMENTS
We thank Bartoletti et al. for sharing the Ponzi data set and Howon Song for the Etherscan scraper used to extract (nonPonzi) smart contract addresses.
This work was funded in part by the National Science Foundation (NSF) under Grant ACI-1547467 and Department of Homeland Security (DHS) Science and Technology (S&T) Directorate under Contracts HSHQDC-16-C-00034 and HSHQDC-16-C-00024. The views and conclusions contained herein are the authors and should not be interpreted as necessarily representing the ofﬁcial policies or endorsements, either expressed or implied, of NSF, DHS or the US government.
REFERENCES
[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system, http://bitcoin.org/bitcoin.pdf,” 2009.
[2] M. Vasek and T. Moore, “There’s no free lunch, even using bitcoin: Tracking the popularity and proﬁts of virtual currency scams,” in Financial Cryptography and Data Security, 2015.
[3] “Quantstamp,” https://quantstamp.com/, 2017. [4] “Certik,” https://certik.org/, 2017. [5] “Distributed autonomous organization (dao),” https://en.wikipedia.org/
wiki/The DAO (organization), 2016. [6] M. Bartoletti, S. Carta, T. Cimoli, and R. Saia, “Dissecting ponzi
schemes on ethereum: identiﬁcation, analysis, and impact,” http://arxiv. org/abs/1703.03779, 2017. [7] M. Bartoletti, B. Pes, and S. Serusi, “Data mining for detecting bitcoin ponzi schemes,” http://arxiv.org/abs/1803.00646, 2018. [8] W. Chen, Z. Zheng, J. Cui, E. Ngai, P. Zheng, and Y. Zhou, “Detecting ponzi schemes on ethereum: Towards healthier blockchain technology,” in Proceedings of the WWW ’18. [9] “Zcash,” https://z.cash/, 2018. [10] “Monero,” https://ww.getmonero.org/, 2014. [11] J. Kamps and B. Kleinberg, “To the moon: deﬁning and detecting cryptocurrency pump-and-dumps,” Crime Science, vol. 7, no. 1, p. 18, Nov 2018. [12] I. Nikolic´, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding the greedy, prodigal, and suicidal contracts at scale,” in Proceedings of ACSAC ’18. [13] M. Bartoletti, S. Carta, T. Cimoli, and R. Saia, “Dataset of ponzi schemes,” https://goo.gl/CvdxBp, 2017. [14] S. Bian, Z. Deng, F. Li, W. Monroe, P. Shi, Z. Sun, W. Wu, S. Wang, W. Y. Wang, A. Yuan, T. Zhang, and J. Li, “Icorating: A deep-learning system for scam ICO identiﬁcation,” http://arxiv.org/abs/1803.03670, 2018. [15] M. Vasek and T. Moore, “Analyzing the bitcoin ponzi scheme ecosystem,” in The 5th Workshop on Bitcoin and Blockchain Research, 2018. [16] M. Rahouti, K. Xiong, and N. Ghani, “Bitcoin concepts, threats, and machine-learning security solutions,” IEEE Access, vol. 6, pp. 67 189– 67 205, 2018. [17] “Etherscan: the ethereum block explorer,” https://etherscan.io/, 2017. [18] V. Buterin, “A next generation smart contract and decentralized application platform,” Ethereum white paper, 2014. [19] S. Bhattacharyya, S. Jha, K. K. Tharakunnel, and J. C. Westland, “Data mining for credit card fraud: A comparative study,” Decision Support Systems, vol. 50, pp. 602–613, 2011. [20] D. Zambre and A. Shah, “Analysis of bitcoin network dataset for fraud,” http://snap.stanford.edu/class/cs224w-2013/projects2013/ cs224w-030-ﬁnal.pdf, 2013. [21] T. Pham and S. Lee, “Anomaly detection in bitcoin network using unsupervised learning methods,” http://arxiv.org/abs/1611.03941, 2016. [22] “Ethereum virtual machine opcodes,” https://ethervm.io/#opcodes, 2018. [23] E. Frank, M. A. Hall, and I. H. Witten, The WEKA Workbench. Online Appendix for ”Data Mining: Practical Machine Learning Tools and Techniques”, 4th ed. Morgan Kaufmann, 2016.
273

