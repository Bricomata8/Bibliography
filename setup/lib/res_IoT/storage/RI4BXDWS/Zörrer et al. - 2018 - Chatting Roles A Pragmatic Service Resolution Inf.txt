PIBPIPIBPIPnnnnrrrrreeffffooooooooorrcgccgccrrrrmmmmeeeeeaaeeeeemmaaaadddddttttooiiiiiiinnnnnoooo,, gggggnnnnIIttsssssaaCCCC,,,,,ll11111yyoooo,,66666nnnnJJttttttttthhhhhuurrrroooonnIIIIIFFFFFlllleeAAAAAPPPP11CCCCCrrrr11oooo--SSSSSbbbb11yyyyyllll33eeeemmmmm,,mmmm22ppppp00ssssooooo11iiiisssss88nnnniiiiiuuuuuMMMMmmmmmaaaannnnooooouuuunnnnnAffffvaaaaaccccttttiluuuuarrrrbiiiinnnnlegggg online at www.sciencedirect.com

BBIneeforrggrmaammatooio,, nIIttaaCllyyo,,nJJtuuronnleeP11r11o--b11l33e,,m2200s11i88n Manufacturing

Bergamo, Italy, June 11-13, 2018

ScienceDirect

IFAC PapersOnLine 51-11 (2018) 1379–1384
CCChhhoooCCCCRRRRrrrhhhheeeeeessssaaaaooooooottttgggttttllllrrruuuuiiiiaaannnnttttpppggggiiiioooohhhnnnnRRRRyyy ooooIIIIbbbnnnnllllaaaeeeeffffsssssssrrrr::::eeeaaaadddssssAAAAttttooorrrrPPPPuuuunnnccccrrrrPPPttttaaaauuuugggguuurrrrmmmmbbbeeeelllaaaaiiiffffttttsssooooiiiihhhrrrrcccc///SSSSSSSSSeeeeeeeuuurrrrrrrbbbvvvvvvvsssiiiiiiicccccccccrrreeeeeeeiiibbbeee CM M M M MhHHHHHaaaaa∗∗∗∗∗o∗∗∗∗∗eeeeerrrrr∗∗∗∗∗kkkkklllllrmmmmmSSSSSuuuuueaaaaasssssuuuuuolllllzzzzztttttVVVVVgbbbbbuuuuuZZZZZooooo(((((rrrrrr((((rrrrreeeee¨o¨o¨o¨o¨o(((((gggggeeeea-----dddddeeeee∗∗∗∗∗rrrrr----mmmmm-----UUUUUrrrrr∗∗∗∗∗peeeeemmmmPPPPPmmmmm∗∗∗∗∗eeeeerrrrraaaaannnnnRRRRRaaaahrrrrrwwwwwPPPPPaaaaaiiiiiiiiiiiiiilllllOOOOOiiiiivvvvv:::::∗∗∗∗∗llllrrrrryiiiiilllll::::eeeeeooooo:::::nnnnnFFFFFhhhhhGGGGGrrrrrssss22222gggggeeeeekkkkkAAAAAsssssiiiiFFFFFbeeeeelllllmmmmiiiiieeeeelllllmmmmmCCCCCtttttooooouuuuueeeeeoooooyyyyyaoooorrrrrtttttTTTTTrrrrruuuuurrrrrggggguuuuunnnnooooosttttt∗∗∗∗∗gggggOOOOO.....rrrrr.........wwwwwfffffeeeeeekkkkzzzzzSSSSSRRRRRW W W W W ooooorrrreeeeeAAAAAdGGGGGiiiiiaaaaeeeeeiiiiimmmmmpppppcccccGGGGGrrrrrnnnneeeeemmmmmhhhhhppppprrrrrzzzziiiiimmmmmoooooeeeeeohhhhhlllllccccceeeebbbbbiiiiirrrrrnnnnnaaaaarrrrhhhhheeeeeHHHHHbbbbbn@@@@@@@@@dddddrrrrrHHHHHhhhhh,,,,,tttttKKKKKPPPPPffff@@@@@aaaaaSSSSS,,,,,SSSSShhhhPRRRRRrrrrrrrcccccPPPPPSSSSS----tttttaaaaatttttiiiiieeeeessssOOOOOttttteeeeerrrrruaaaayyyyynnnnneeeee∗∗∗∗∗ooooonnnnnFFFFFllllrrrrr,,,,,yyyyyzzzzz22222zzzz∗∗∗∗∗cccccbAAAAA,,,,,rrrrrbbbb∗∗∗∗∗eeeeeFFFFFeeeee,,,,,AAAAAuuuuCCCCCsssssrrrrrluuuuuM M M M MAAAAA,,,,,rrrriuuuuuTTTTTttttt∗∗∗∗∗ggggsuuuuuSSSSS∗∗∗∗∗uuuuusssss....OOOOOaaaaa∗∗∗∗∗rrrrrtttttaaaahaasssssrrrrreeeeettttttttttccccRRRRRlllllDDDDDiiiii.....tttttrrrrrzzzzz/....aaaaaaaahhhhhbbbbbiiiii.....aaaaaaaaaaaatttttooooouuuuuSttttiiiii)))))ttttt))))rrrrraaaaarrrrr)))))ggggguiiiiisssssaaaaa,,,,, bnnnnnPPPPPAAAAAlllllsuuuuuPPPPPaaaaassssscsssssrrrrrtttttcccccrrrrrriiiiillllliiiiihhhhhilllllaaaaab∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗e
KTAoaSccKTAoaSccKTAoaScAoaSccKTAoaScK©oeoeoeoeoefffffeeeeehhhheeeeebbbbbnnnnnmmmmmlllllrrrrr2lllllyyyyyiiiiaaaaavvvvvtttttaaaaasssssnnnn0wwwwweeeeerrrrriiiiitttttbbbbb1ggggaaaaacccccttttttttttooooorrrrr8ooooohhhhhsssseeeeellllloooooaaaaarrrrr,,,,,rrrrrooooopppppdddddccccccccccIaaaaaCCCCCAAAAdddddooooosssssFiiiiittttttttttccccc:::::hhhhhoooooAiiiiiuuuu:::::-----ooooogggggrrrrrooooobbbbbSSSSSttttCnnnnnddddduuuuuIIIIIrrrrrooooaaaaaeeeeennnnneeeeeiiiiiiiiiinnnnrrrrrsssss(tttttnnnnndddddooooovvvvvIeeeeeaaaaaoooonaaaaaiiiiigggggtttttdddddiiiiisssssnnnnnmmmmtcccccttttthhhhhrrrrrkkkkkegggggiiiiieeeeeaaaaaeeeeeooooooooorsssssPPPPPpppppnuuuunnnnnCCCCCtttttiiiiiuuuuuahhhhhfffffnnnnnhhhhhssss.....ooooohhhhhtbbbbbyyyyyeeeeeilllllSSSSIIIIIoooooollllllllnnnnniiiiiooooonyyyyrrrrraaaaasssssiiiiidddddeeeeewwwwwmmmmmahhhhhssssnnnnnooooolttttuuuuu/////dddddiiiiipppppeeeegggggFnnnnnsssss(SSSSSmmmmlllllrrrrrttttteggegggeeeeeSSSSSuuuuuaaaaarrrrrd-mmmmmsssseeeeeyyyyybbbbbpppppmeaaaaa,,,,rrrrrrssssshhhhheeeee44444vvvvvaaPPPPcccccyyyyynnnnn.....mmmmmtiiiiirrrrri00000,,,,,rrrrcccccitttttliiiiio:aaaaaaaaabbbbbeeeeeiiiiiSSSSSn(((((nnnnnggggtttttseeeeeIIIIIeeeeeiiiiiIIIIIiiiimmmmi44444orrrrrooooommmmmnnnnnmf)))))vvvvvsssssnnnnnaaaatttttyyyyyAaaaaaiiiiioaaaaaeeeeettttcccccssssslllllnrrrrriiiiuooooonnnnneeeeeiiiiitttttccccooooossssstfffff.dddddeeeeeotttttkpppppRRRRRmmmmmIIIIiiiiimaaaaarIIIIInnnneeeeeccccceeeeeannnnnrrrrrttttasssssnbbbbbaaaaadddddeeeetiiiiiaaaaaooooosssssziaaaaarrrrbbbbbuuuuupppppcllllleoooouuuuusssssiiiiissssspppppppppprlllllCiiiiippppttttttttttiiiiiccccc@rrrrrrrrrrtttttrrrrriiiiieeeeoooooooooooyyyyyeeeeeiiiiirrrrnfSSSSSaaaaaaaaaannnnn.....sssssaaaahtllllleeeeeeeecccccrbbbb-TTTTTrrrrrnnnnnohhhhhIIIIIIIIIIsiiiivvvvvnnnnnnnnnnltttttallllhhhhh)iiiiiiiiieeeeeffffftttttlfffffttttiiiiicccccrrrrrzHeeeeedddddooooosssssyyyyeeeeeaaaaabrrrrrrrrrr.....,,,,osssssunnnnnSSSSSsRRRRRtttttOOOOIIIIIrteeeeepppppRRRRRrrrrritttttgttttteeeeenuuuuurrrrrrrrr.IIIIIsssssggggooooogoooooaccccccccccoooooaaaaccccctttttfffffccccccooooobllllluuueeuueeennnnaaaaa.uuuuuTTTTTmmmmmyasssssrrrrriiiinnnnntttttssssszzzzhhhhhteeeeebbbbbEiiiii)aaaaooooo,,,,,iiiiiiiiiibbbbbliiiiinnnnnttttsnnnnnnnnIIIIInnnnneeeeeiiieigggggnnnnneeeeeooootttttvssssssssssIIIIIdddddeeeeennnniuuuuunnnnnerrrrr(((((uuuuuaaaasssssraaaaaooooofffffIIIIIlllleeeeesssssrrrrrIIIIInnnnnpppppLtttttdddddaaaaaoooooIIIIrrrtrreeeeesssssnnnnTTTTTdiiiiirrrrriiiiittttttttaaaaattttnnnnn.aaaaarrrrr)))))oooooeeeelllllAuuuuufffffbbbbbrrrrsssssrrrrrIIIIIccccciiiiioooolrrrrreeeeeaaaaannnnnllllllttttteeeeeppppiiiiitttttssssstttttuuuuurtttttaaaaatttttttttteeeeeeeiyyyyyiiiiirrrrrlllllgrrrrrrrrrnnnnn,,,,,iiiiieeeeeuuuuuhaaaazzzzznnnnngggggtccccceeeeebbbbccceeeee(((((sssssstttttoooootttttiiiiSSSSSuuuuullllrrrrrrwwwwwnnnnniiiiRRRRReeeeeeooooorrrrrttttssssssiiiiissssseeeeeyyyyfffffiiiiittIIIItttIeiiiiisssss....)))))hhhhhrllllltttttviiiiiaaaaaoooooeeeeeiiiiifffffennnnnnnnuuuuunnnnnoooooddddddgggggrrrrrtttttttt. FIlFIlFIlFIlFITskIcSmnimiafs2IdTskIcSmnimiafs2IdTskIcSmnimiafs2IdTskIcSmnimiafs2IdTskIcSmnmiafs2Iduuuunnnnnnnnnooooo((((((((((nnnnnnnnnnnnnnnyeyeyeyeyeoooooeenn00en0eenn00eiieiieiieiieiioooooooooo2222211111uuutttuuttttttaaacccaazdszdscczdszdszdsrrrrrtttttttsssssyynnynyynn111mm11mmmdddddrrrrreeeee)))))))iiii)))tttttvvvvveeeeeuueeueuueeaaaaattttttttttccccciiiiibbbbbnnnoooo55nn555gggggiiiiirrrrrvvvvveeeeerrrrrrriirirriiiiiiihhhhhtttttrrrrsssaassaaannnnntttttpppppeeeeennnn)))ooo))ooeeeeeoooooccccceeeeeoStcTc”soStcTc”soStcTc”soStcTc”soStTc”suuuuuSSSSSnnnnnooooommmmmiiiiiiiieeeeeiiiiihhhhhnnnnn.....ooooogggggnnnnndddddeeeeeooooocccccnnnnnnnnnniiiiirrrrrhhhhhpppppeeeeewwwwwrrrrrpppppDDDDDqqqqqssssseeeeeeeeeeeeeeeaaaaannnnnhhhhheeeeetttttooooosssssttnnnnnuuuuu,,,,,nnnnnccccceeeeeuuuuuIIIIiiiiigggggooooottttteeeeerrrrrrrrrruuuuueeeeebbbbbiiiiioooooaaaaannnnnaaaaaaaaaagggggiiiiinnnnhhhhhcccccrrrrraaaaaiiiiitttttcccccvvvvvvvvvvrrrrrrrrrraaarrrrrrrrrssssshhhhhiiiiirrrrrrrllrlrrllsssssaaaaallllllllllaaaaannnnneeeeegggggrrrrroooooaaaaaffffeeeeeeeeeellllliiiiiiiiiirrrrreeeeeaaaaaeelllooooooooooeeeeeeeeekkkkkhhhhheeeeecccccrrrriiiiilllllrrrrraaaaacccccccsssssllllleeeeesososososofffffbbbbbccccccccccbbbbbnnnnnoooooaaaaaaaaaannnnnnnn,,,,,aaattttthhhhheeeeessssseeeeeeeeeeeeeeaaaaatttttllllltttttpppppmmmmmeeeeeooooogggggpppppiiiiiiiieeennneennllllltttttiiiiinnnnniiiii-----sssssgggggooooossssTTTTTTdddddrrrrrsssssooooolllllrrrrriiiiizzzzzlllllooooorrrrrnnnnnrrrrroooooeeeeetttttrrrrruuuuuttttiiiiiaaaaacccccgggggzzzzzdddddiiiiittttteeeeerrrrrsssssOOOOOCCCCCoooooeeeeeaaaaatttttfffffwwwwwiiiiihhhhhhoooootttttrrrrrtttttrrrrrrrrrrrrrrﬁﬁﬁﬁﬁeeeeefffffhhhhhlllllaaaaatttttnnnnneeeeeooooonnnnnyyyyydddddyyyyyhhhhhooooopppppdddddeeeeeuuuuiiiiitttttooooogggggiiiiiihhhhhooooonnnnnpppppdddddrrrrrgggggoooooooootttttaaaaaeeeeeeee.....tttttcccccnnnnnnssssstttttaaaaapppppeeeeehhhhhrrrrruuuuuccccccccceeeeiiiiirrrrroooooaaaaatttttuuuuurrrrrnnnnngggggiiiiiuuuuucccccLLLLLooooocccccggggggttttnnnnnhhhhhsssssiiiiieeeeeyyyyy(((((rrrrrcccccoooooooooorrrrrnnnnnpppppwwwwwrrrrrrrroooootttttppppppptttttnnnnnssssshhhhhcccccuuuunnnnnsssssW W W W W saaaaarrrrriiiiieeeeeeeeee11111ttttteeeeefffffaaaaaiiiiiccccceeeeeyyyyyrrrrriiiiinnnnncccccrrrrrtttttooooorrrrrrr,aaaaannnnnoooooiiiiiooooorrrrlllllaaaaasssssoooonnnnn.....eeeeedddddeeettttteepppppeeeeeooooottttttttttpppppooooooooooaaaaa(((((tttttccccceeeeooooobbbbbeeeeetttttgggggooooorrrrrAgggggrrrrrhhhhhuuuuusssssqqqqqhhhhhggggglllllcccccIIIIIrrrrrhhhhhooooodddddnnnnngggggrrrrrccccc))))eeeeeIIIIIkkkkkiiiiirrrrrrrreeeeeeeeeefffffsssssiiiiifffffiiiiioooooIIIIIeeeeeooooosssssuuuuuaaaaaccccceeeeeNNNNNeeeeennnnnuyyyyymmmmmlllllaaaaasssssddddduuuuuooooonnnnnoooooiiiii-----oooooiiiiihhhhhnnnnnllllltttttaaaaatttttiiiiisssssiiiiiiiiisssssﬂﬂﬂﬂﬂeeeeeeeepppppssssstttttttttttiiiiilllllpppppccccctttttnnnnn.....vvvvvnnnnTTTTTrrrrrTTTTTiiiiissssssssssssssaaaaaeeeeennnnnttttthhhhhlllllrrrrrtttttbbbbbyyyyyttttnnnnnoxxxxxeeeeeooooooooooooooohhhhhttttteeeeeooooorrrrriiiiieeeetttttrrrrroooootttttrrrrreeeeettttaaaaattttt)))))RRRRRaaaiiaaiiirrrrrsssnssaaaaawwwpppppwweeeeefffffiiiiidddooddooonnnnnyyyyyeeeeennnnlllllooooowwwwweeeeevvvvvoooooiiiiiiiiiipppppllllleeeeennnnnoooooiiiiitttttfffffrrrrrfffffcccccoccccc”””””sssssrrrrrdddddeeeeeooooonnnnnOOOOOllllleeeennnnniiiiissssscccccoooooeeeeeiiiiitttttsssssppppptttttooooossssstttttoooooaaaaacccccmccccciiiiinnnnneeeeuuuuunnnnneettttthhhhhssssseeeeerrrrrsscccccrrrrrsseeeeeeennnnnnnnneeeeeDDDDDeeeeeppppp(((((tttttcccccaaaaaiiiiieeeeeddddtttttuuuuueeeeeeeeeeyyyyyrrrrrcccccooooogggggaaaaannnnnppppprrdddddooooooCCCCCeeeeerrrrrsssssrrrrroooootttttaaaaasssssttttteeeeeoooooqqqqqeeeetttttpppppvvvvvUUUUUnnnnnsssssrrrrraaaaaaaaaaiiiiirrrrrdddddoooootttttnnnnnuccccciiiiipppppfffffnnnnnsssssrrrrraaaaaiiiiicccccaaaddddpppppttttteeeeeuuuuunnnnniiiiiooooopppppaaaaabbbbbnnnnnaaabbbbbhhhhhooooosssssaaaaatttttsCCCCCccccceeeeeeeeeeaaaaatttttaaadddddaarrrrroooooeeeeeiiiiiiiiiigggggnnnnncccccssssslllllyyyyyaaaaaooooonnnnneeeeeiiiiiooooobbbbbgggggeeeeeeeeeecccccmmmmmrrrrrbbbbbssssslllll.....ssssvvvvvllllrrrrr((((STTTTTeeeeessssstttttcccccrrrrrrr,,,,,fffffrrrrrllllleeeeeccccctttttiiiiimmmmmiiiiiyyyyyiiiiiaaaaaMMMMaaaaaoooooeeeeeoo,,,,,sssssuuuuulllllttttttttttiiiiittygggggtttttsssssnnnnneeeeelllllssssshhhhhdddddIIIIIyyyyy22222cccccmmmmmnnnnniiiiibbbbbsssssyyyyyrrrrrnnnnnnnn.....ssssssssssyyyyybbbbb(((((ooooollllluuuuuiiiiistttttOOOOOtttttaaaaannnnn,,,,,oooooaaaaaeeee00000lllll.....vvvvvaaaaaccccc=====iiiiidddddeeeeeteeeeesssssyyyyyfffffgggggaaaaaDDDDDyyyyylllllppppplllll(((((iiiiiiiiimmmmmlllllhhhhh11111oooooeeeeeeiiiiitttttttttNNNNNssssslllllsssssgggggIIIIIiiiiirrrrrsssscccccnnnnnlllllSSSSScccccnnnnnooooollllleeeeessssstttttiiinniineenneeeyyyyyyyyyy66666mrrrrrnnniiieeeeerrrrrﬂﬂﬂﬂﬂaaaaassssrrrrraaaaaeeeeessssspppppfffffbbbbbpppppdddddsssssyyyyyeeeeerrrrrRRRRRttttttttttmmmmmoooooﬁﬁﬁﬁﬁ;;;;;nnnnsssssaaaaasssss.....cccccpppppmmmmmeeeeellllleeeeeeeeeemmmmmlllllcccccsttttteeeeeoooootttttttttttttnnnnnrrrrreeeeetttttnnnnneeeeeeeeeIIIIIxxxxxaaaaaTTTTTxxxxxhhhhh(((((rrrrrlllllooooo,ssssshhhhhhhhhheeeeeeeeeeBBBBBhhhhhsssssccccceeeeeeeeeeeeeeennnnniiiiieeeeerrrrW W W W WeeeeeooooolllllaaaaaiiiiicccccyyyyymmmmmmmmmmiiiiiuuuuuzzzzzssssseeeeeoooooqqqqqPaaaaasssssiiiii.....(((((bbbbbnnnnnvvvvvaaaaa´´´´´eeeeetttttaaaaadddddooooohhhhhpppppnnnnnsssss,,,,,yyyyyeeeeeSSSSSsssssvvvvvooooouuuuueeeeiiiiittttteeeeelllllnnnnnnnnnneeeeerrrrrrrrrrrssssspppppssssstttttaaaaadddddiiiiieeeeeeeooooossssseettttt22222iiiiieeeeettttiiirrrrrlllllwwwwwaiiiiigggggnnnnnsssssiiiiirrrrraaaaaiiiiidddddnnnnnttttttttttooooorrrrrrrrrrrrrnnnnnrrrrrnnnnn.....ddddd00000rrrrroooooccccckkkkkooooogaaaaaaaaaapppppeeeeeaaaabbbbboooootttttaaaaaeeeoooooaaarrrrrgggggvvvvvgggggaaaasssss00000iiiiieeeeeaaaaalllllmhhhhhnnnnnmmmmmmmmmIIIIIlllllCCCCCaaaaarrrrrbbbbbdddddcccccxxxxxnnnnnrrrrreeeeetttttwwwwweeeeeiiiiiiiiiilllllllll-----88888,,,,,nnnnnlllllooooocccccaaaaannniinniiikkkkk....oooooeeeeesssssooooosssssnnnnniiiii,,,,,ss.....aaaaauuuuuammmmmzzzzzsss,,,,ss,,,,,aaaaaiiiiiwwwwwllllldddddppppp22222,,,,,eeeeedddddyyyyyssssstttttwwwwwrrrrrgggggtttttaaaaaiiiiittttt.....sssssaaaaatrrrrrcccccsssssiiiiiwwwwwppppp00000tttttuuuuuhhhhh)))))ssssseeeeeuuuuuiiiii22222iiiii2222oooooeeeeeaaaaannnnninnnnnrrrrrhhhhhiiiiiOOOOOttttteeeeeyyyyyRRRRRoooootttttiiiii.....tt00000ccccccaaaaa11111ooooosssssnnnnnttttt000000000ccccceeeeeyyyyyeeeeeiiiiinnnnnsssssdddddhhhhheeeeeiiiiinnnnntttttttttttttootooo77777ggggg22222uuuuuTTTTTrrrrrtttttnnnnneeeeennnnn11111ggggg1111.....tttttiiiiifffffImmmmmsssssrrrrrooooohhhhhaaaaanngagangnngagaiiiii)))))rrrrr77777sssssssssshhhhhoooootttttttttt444446666neeeeeiiiiiooooobbbbbhhhhhuuuuu:::::bbbbbeeeeeaaatttaattooooorrrrralllalloooooooooolllllaaaaaaaaaa)))))rrrrrssssssssss)))iiiii))))))t.....nnnnnyyyyyaaaaaaaaooaaoooyyyyyeeeeeeeeeeeeeeeeeeessssstttttttttt------------ffffffffff..............lllll....ll,,l,ll,,eropIbw(2IedsstpaIaSsReTamaeIciatsIbw(2IedsstpaIaSsReTamaeIciatsIbw(2IedstpaIaSsReTamaeIciatsIbw(2IedstpaIaSsReTamaeIciatsIbw(2IedstpaIaSsReTmaeIciatennnnnnnnnnnnnnnnnnnnnnnnEhoEhoEhoEhoEhomememememeieieieieixoxoxoxoxo.a.a.a.a.a0ud0ud0ud0ud0udlprlprlprlprlpraaaaairuiruiruiruirunnnnnooooorhhhhhgggggeeeeeiiiiivvvvveeeeesssssrrrrrrrrrtttttfffffmmmmmccccceeeeeiiiiittt11111stvstvstvstvstvzzzzzpppppSSSSSabbbbbeeeeesssssrrrrr.....rrrrraaaaaaaaaaagagagagagvvvvvvvvvcccccnnnnneeeeeoooooeeeeehhhhhtttttoooooeeeee66666eeeeecccccaaaaaﬃﬃﬃﬃﬃoooookkkkkbrrrrraaaaaBBBBBsssssbbbbbuuuuutttttllllldldldldldlnnnnniiiiiiiiippppphhhhhnnnnntttttllllldddddsssssnnnnneeeee;;;;;ooooollllleeeeennnnncccccccccccccclllvvvvvﬂﬂﬂﬂﬂeeeeesssssipppppaaaaarrrrroooooeeeeeeeeeevvvvveeeeeeeeeelllll)))))eeeeeuuuuusssssaaaaarrrrrcccccleeeeeeeeeoooooaaaaarrrrrtttttttttteeeeeeeHHHHHrrrrroooootttttfffffisssssaaaaattttteeeeeiiiiiaaaaaccccctttttpppppoooooiiiiirrrrriiiiitttttsssssssssaaaaa-----tmmmmmoooooccccceeeeedddddoootttttiiiiieeeeettttthhhhhwwwwwaaaaaaaaaabbbbbddddduuuuupppppnnnnnfffffSSSSSuuiiiiinnnnnyoooooaaaaaooooohhhhhiiiiigggggnnnnnrrrrrnnnnnnnnnnoooooooooo)))))aaaaaiiiiirrrrreeeeeooooohhhhheeeeerrrrrttttt,eeeeeoooooRRRRRcccccnnnnnmmmmmiiiiieeeeeIIIIIeeeeennnnnaaaa.....tttttllllleeeeennnnnssssscccccmmmmmtttttrrrrrnnnnnnnniiiiiaaaaannnnnrrrrrBBBBBoooooaaaaatttttuuuuulllllO.....ttttttttttnnnn....oooooyyyyyIIIIIoooooIIIggggguuuuutttttiiiiidddddIIIIIpppppTTTTTcccccmmmmmyyyyyaaaaaaaaaasssssHHHHHIIIIIaaaaapppppW W W W W uuuuuddddd.....ddddnnnnnpppppwwwwwiiiiiIIIIIeeeeerooooorrrrr,,,,,rrrrrnnnnnkkkkktttttnnntttttsssssuuuuuooooonnnnnoooooHHHHHrrrrrsssssaaaaagfffffdddddooooopppppeeeeeeeeeerrrrreeeeemmmmmhhhhhiiiiiiiiiieeeeefffffooooorrrrreeeeeeeefffffdddddiiiiiddddssssssssssTTTTTaaaaammmmmooooosssssarrrrrnnnnnrrrrrssssseeeeerrrrrnnnnneeeeeppppsssssooooonnnnnaaaaaaaeeeeeooooodddddfffffeeeeeeeeeeeeeeeggggggggggeeeeeaaaaapppppfffffdddddnvvvvvtttttcccccgggggrrrrrwwwwweeeeerrrrssssstttttcccccttttt,,,,,fffffeeeeeaaaaauuuuuooooovvvvvnnnnnhhhhhrrrrrssssseeeeeaaaaaiiiiisssssoooooaaaaaiiiiiuuuuuiaaaaatttttooootttttsssssooooonnnnniiiiiuuuuuyyyyycccccmmmmmzeeeeetttttiiiiimmssssstttttnnnnnwwwwwaaaaaaammmmmgggggrrrrrfffffsssssiiiiirrrrrwwwwwlllllcccccccccccccclllllrrrrreeeeeiiiiiavvvvvgggggiiiiiooooosssssiiiiisssssuuuuucccccuuuuulllllvvvvveeeeellllllllllllllliiiiittttteeeennnnnnnnnneeeeesssssaaaaauuuuuiiiiiaaaaaeeeeesssssaaaaa.....eeeeetttttooooozzzzztPPPPPeeeeepppppllllltttttdddddrrrrreeeeeiiiiinnnnncccccssss,,,,,ssssslllllgggggrrrrreeeeegggggooooonnnnnirrrrruuuuucccccaaaaaoooooaabbbbbrrrrrbbbbbeeeeeoooooaaaaassssttttt.....iiiiiorrrrr22222aaaaaeeeeemmmmmpppppggggg,,,,,22222nnnnntttttpppppttttttttttnnnnnssssslllll.....rrrrruuuuueeeeoooooaaaaatttttwwwwwaaaaaooooorrrrrtttttn.....sssssnnnnnooooouuuuueeeeeiiiiiOOOOO00000iiiiirrrrreeeeelllllrrrrrooooosssseeeeeooooorrrrrlllllsssssrrrrrIIIIIooooocccccoouuuuunnnnntttttyyyyyauuuuuttttteeeeeeeeeecccccrrrrrdddddeeeee11111aaaaayyyyyeeeeennnnnaaaaaAAAAAhhhhheeeeesssssnnnnnuuuuuccccctttttpppppooooosssssdddddeeeeelooooosssssrrrrraaaaa33333tttttrrrrrooooosssssyyyyyccccpppppssttttteeeeeeeeee(((((eeeeeaaaaabbbbbaaaaaeeeeerrrrruuuuuPPPPPmmmmmdddddaaaaaeeeeeIdddddhhhhhccccc)))))(((((tttttssssshhhhaaaa((((pppppKKKKKsssssrrrrrnnnnnnnnnnrrrrrccccctttttnnnnnlllllnaaaaabbbbbrrrrr.....TTTTTeeeeehhhhhaaaaasssssCCCCCtttttoooooaaaaaiiiiinnnnPPPPPooooossssseeeeetttttoooootttttttpppppwwwwwtttttMMMMMgggggmmmmmssssstoooooyyyyyuuuuueeeeetttttiiiiiiiiiiPPPPPiiiiipppppppaaaaaiiiiivvvvvrrrrrbbbbbnnnnneeeeettttttttttRRRRRerrrrrlllllmmmmmfffffmmmmmhhhhheeeeemmmmpppppaaaaaiiiiinnnnnrrrrrpppppeeeeeiiiiitttttoooooeeeeeeeeeeaaaaaaaaaaPPPPPsssssddddd(((((roooooccccctttttSSSSSbbbbsssssdddddeeeeelllllaaaaapppppOOOOOlllrrrrriiiiixxxxxiiiiirrrrreeeeecccccoppppplllllppppphhhhhrrrrriiiiiyyyyylllllsssssdddddvvvvvtttttoooooaaaaaeeeeSSSSSeeeeelllllRRRRReeeeezzzzzuuuuuaaaaa.....ttttttttttpmmmmmfffffnnnnnrrrrroooooooooollllloooosssssAAAAAeeeeeaaaaagggggpppppeeeeerrrrrllllldddddaaaaaIIIIIuuuuuoooooiiiiieeeeebbbbbeeeeesssssdddddooooo.....iiiiiwwwwwnnnnneoooooaaaaauuuuuIIIIIaaaaalllll)))))rrrrr.....rrrhhhhhzzzzztttttiiiiitttttrrrrreeeeeeeeeCCCCCaaaaaaaaaarrrrriiiiiaaaaaiiiiisssssr,,,,,vvvvvcccccooooo)))))lllllttttteeeeeiiiiilllllCCCCCaaaaaeeeeesssssssssssssssssaaaaaeeeeesssnnnnnlllllcccccacccccoooooiiiiihhhhh,,,,,aaaaaHHHHHeeeeewwwwwnnnnnsssssaaaaaaaaaa.....cccccttttttttthhhhhyyyyysssssttttttttttttwwwwwnnnnnhhhhhhhhhhcccccbhhhhhnnnnneeeeellllliiiiirrrrraaaaeeeeerrrrryyyyyiiiii,,,,,eeeeessssslllllllllleeeeeeeeeeiiiiihhhhheeeeetttttdddddeeeeeFFFFFooooolllll.....sssssnnnnniiiiiTTTTTiaaaaaiiiiigggggsssssnnnnnhhhhhbbbbrrrrrrrrrrnnnnnwwwww,,,,,eeeeebbbbbtttttlmmmmmnnnnnpppppeeeeedddddeeeeebbbbbnnnnnaaaaattttttttttooooohhhhhiiiiiiaaaaaiiiiiooooollllppppphhhhhtttttcccccrrrrruuuuutttttnnnnnNNNNNtrrrrrssssstttttsssscccccuuuuutttttiiiiiiiiinnnnn22222eeeeegggggeeeeedddddbbbbbeeeeetttttpppppvvvvvyssssrrrrraaaaaiiiiitttttsssssyyyyyiiiiiiiiiihhhhhtttttooooottttt00000lllllsssssdddddrrrrruuuuuoooooeeeeetttttooooonnnnnhhhhaaaaahhhhhaaaaaooooottttt.lllllvvvvviiiiirrrrriiiiiiiiiieeeeessssswwwwwfffffpppppeeeee00000hhhhhccccchhhhhnnnnncccccnnnnnnnnnnrrrrrtttttllllltttttnnnnngggggeeeeaaaaatttttdddddiiiiiiiiiisssss-----ttttteeeeebbbbbppppp88888rrrrreeeeeaaaaawwwwweeeeeiiiiiuuuuusssssoooooeeeeeeeeegggggddddsssssmmmmmrrrrr’’’’’cccccbbbbbccccchhhhhiiiiieeeee;;;;;ttttttttttooooommmmmoooooooooodddddiiiiimmmmmRRRRRoooottttteeeeesssssfffffoooooeeeeeoooooiiiiibbbbbaaaaaaaaaaiiiiieeeeennnnnuuuuuooooohhhhhwwwwwaaaaauuuuupppppeeeeetttttsssssnnnnnfffffooooooooooW W W W W ooooorrrrrbbbbooooossssseeeeetttttaaaaatttttsssssvvvvvrrrrrlllllpppppiiiiisssssaaaaadddddvvvvvssssslllllcccccnnnnnppppprrrrreeeeeiiiiiiiiiiiiiiisssssccccctttttlllllnnnnnlllllyyyyiiiiitttttooooonnnnnaaaaattttttttttsssssooooohhhhhnnnnnrrrrreeeeedddddmmmmmeeeeeiiiiibbbbbeeeeeiiiiieeedddddiiiiaaaaarrrrrhhhhhgggggaaaaahhhhhgggggrrrrrsssssiiiiipppppfffffooooonnnnnsssssnnnnnrrrrreeeeeiiiii(((((tttttoooooiiiiilllllllllluuuuuiiiiiuuuoooooeeeeecccccßßßßßssssstttttyyyyynnnnnvvvvveeeeeeeeeevvvvvBBBBBsssssaaaaauuuulllllsssssnnnnnwwwwweeeeePPPPPddddduuuuueeeeessssseeeeennnnnnnnnnrrrrrSSSSS.....dddddtttttiiiiiaaaaabbbbbiiiiicccccsssstttttaaaaaoooooeeeeePPPPPuuuuuiiiiieeeeedddddooocccccfffffsssssuuuuueeeeerrrrr.....mmmmmccccceeeeetttttiiiiiiiiioooookkkkkoooootttttmmmmmllllluuuuupppppsssssfffffssssssssssaaaaaaaaaaeeeeennnnrrrrrtttttccccc.....oooooeeeeetttteeeeerrrrrMMMMMbbbbbiiiiiIIIIIfffffmmmmmpppppkkkkktttttpppppoooooeeeeetttttiiiiitttttTTTTTtttttvvvvvﬁﬁﬁﬁﬁggggpppppaaaaaIIIIIbbbbblllllooooouuuuuttttttttttttttiiiiiiiiiiaaaaaiiiiinnnnneeeeennnnnoooooiiiiirrrrrfffffiiiirrrrrNNNNNnnnnnnnnnnoooooooooolllllaaaaaaaaaannhhhhhhhhhhhhhhhhhhhuuuuusssssnnnnncccccooooocccccrrrrrooooolllllttttteeeeeeeeeeTTTTT.....iiiiinnnnndddddnnnnn.....hhhhhdddddnnnnlllllaaaagggggeeeeeeeeeeeeeeeeeeeeeeeeeessssssssss)))))tttttssssssssssrrrrr---------------,,,,,lllll CCCCCl2P1uooooo40etppppp0.ei15yyyyyor0-rrrrrn1r8iiiiieggggg69v/6hhhhhIij3nettttt.iw©©©©©ff©aruca222222ons000000ldt.111112re888880ru,1IIIIIcrIFFFFF8eFtAAAAA.s0uApCCCCC8roC.e3n3)s(5iIbniistleitrynnaeotefidoInnetadelrFn(aeMdtieoernaisatslionFneeodrferAeatutitoaonml.o,afti2Ac0uC1too6mn)t11111.ar44444toi00000lc)55555CsHeoornsvttirinocgle.sby aEnlsdeviperrLotcde.sAsellsrigchatns rebseerveeds.tablished by using a

IFAC INCOM 2018 B13e8r0gamo, Italy, June 11-13, 2018

Helmut Zörrer et al. / IFAC PapersOnLine 51-11 (2018) 1379–1384

message A B { enum enSubType { A x , // A−>B : Data : B y , // B−>A : Data : A z , // A−>B : Data : }
enSubType SubType ; data x ; data x and y ; data y ; data z ; }

data x , data y data z

data x and y

Fig. 1. Pragmatic Message Types
message based approach. To reach process and service interoperability, semantic and technical interoperability have to be established ﬁrst.
Topic-Based Publish/Subscribe Infrastructures (TbPSI) (Eugster et al., 2003) allow systems to publish messages with respect to a certain topic. All systems subscribed to that particular topic will receive those messages.
The semantics of the messages and topics needs to be established ﬁrst - topic labels, message types and protocols must be known to all systems involved. If a lot of communication between systems is required, many message types and topics must be speciﬁed. One solution to limit the number of message types, is the ’Data Type Channel Message Selector’ Hohpe and Woolf (2003) pattern. We describe a pragmatic solution to reduce the number of message types in the next section.
2.1 Pragmatic Message Types - a pattern for less message types
Production systems may take on diﬀerent roles. Each (physical) system serves diﬀerent roles when interacting with other systems. The proposed methodology, provides only one message type A B for all interactions required between roles A and B. To determine the step / state in the interaction protocol, a SubType property is available in the message type. All properties required for any of the subtypes have to be available in this message type. Figure 1 shows SubTypes x . . . z. In the subtype list messages are sorted as they occur in the choreography. The left side of the message name A B contains the role (A), that starts the interaction between A and B and we don’t deﬁne a B A. (see Figure 1).
The semantics of A B implies that roles A and B are communicating. A B holds the set of concepts both A and B need to understand. The advantage is, that much less message types need to be deﬁned. The disadvantage is, that properties are present even if they are not used in the current state. So detailed documentation is required.
2.2 Chatting Roles - methodology
A instance rz of a role represents a system. In this discussion, two roles are involved - role A and role B. Instances of these roles are ax and by, which will use message type A B for communication. A major task that every SRI must support is service discovery. In context of roles service discovery can be solved by mediating an appropriate role-player instance of B to an ax = role discovery.

To implement a role discovery choreography, we mimicked people searching for a service or collaboration using a ’chat-program’. One system starts chatting in a public chat group which covers a relevant topic. Other participants of the group will send a reply message to do some work together. Finally multiple participants could chat on a private level determining the particularities of the collaboration.
Following this, the approach demands an infrastructure with the following communication mechanisms:
• limit communication to a subset of role-instances (= ’public group level’ = Community)
• multicast communication from one role-instance to all opposite role-instances (= ’send to opposites’)
• individual communication between opposite roleinstances that know each other (= ’private message’)
Using a TbPSI and some methology, we can implement these communication mechanisms:
• For any role-instance deﬁne a proper Community to use. Only role instances that use the same Community setting will be able to talk with others.
• Any role-instance rz must have an unique Id. This is deﬁned via conﬁguration ﬁeld SystemIdrz .
• Both roles role A and role B use the proposed Pragmatic Message Types - pattern (see section 2.1) for the exchange of messages. So the only concrete message type used in communication of these roles is A B.
• Any message of type A B contains a MetaData ﬁeld to hold a senders SystemId and any rz sets it to SystemIdrz whenever it sends a message.
• For any message type A B reserve a least a base topic - path. For simplicity reasons we call this base-path A B here. But we suggest to precede this path with a name space, to ensure worldwide uniqueness!
• In code specify · what message A B to use · what concrete role A or B to play.
Now we are either an ax or a by. • Any ax then must subscribe the following topics:
· A B/Community/A · A B/Community/A/Systems/SystemIdax • Any by must subscribe the following topics: · A B/Community/B · A B/Community/B/Systems/SystemIdby • This enables to implement the following functions: · ax.SendPrivate(SystemIdby ,oMsg) = publish the
message to topic A B/Community/B/Systems/SystemIdby (by) · by.SendToOpposites(oMsg) = publish the message to the topic A B/Community/A (all ax)
Figure 2 depicts the proposed usage of topics. Private messages are shown with dotted links. Using the Pragmatic Message Types - pattern (see section 2.1) the same message type will be used for all topics. As a consequence of the recipe above, any ax now is listening to it’s private message topic and to a global message topic that all As are listening too and vice versa the same is true for any by. Multicast messages are realized using 2 separated topics, one for each role. Usually no A sends to other As. This prevents unnecessary or cycle-messages per default.

1406

IFAC INCOM 2018 Bergamo, Italy, June 11-13, 2018

Helmut Zörrer et al. / IFAC PapersOnLine 51-11 (2018) 1379–1384

1381

Fig. 2. Chatting Roles - Proposed Usage of Topics for Roles
Role-instances can only talk to each other, if they all have conﬁgured the same Community. Sending private messages to other opposite roles demands knowledge of the opposite role’s private SystemId ﬁrst. This data can be transmitted using appropriate role interactions.

Fig. 3. WannaAB - how ax and by ﬁnd each other
sage ﬁelds, timeouts or special behavior on ax resp. by .
In the following a service discovery protocol using the ChattingRoles Infrastructure is described. An ax want’s to be mediated to one dedicated by to realize the choreography A B together then (˜Discovery)

2.3 Testing Chatting Roles ﬁtness to fulﬁll some Service 2.4 WannaAB - a basic Discovery Choreography using

Interaction Patterns

Chatting Roles

Service Interaction Patterns are used to benchmark languages for the ability to express advanced conversations(Weske, 2007). We assume that an algorithm/system supporting these patterns, enables the implementation of a service choreography system. We examined whether using topic-based publish/subscribe and our proposed method above, can be used as a base to implement the required patterns (Weske, 2007):
Send represents a one-way interaction between two participants seen from the perspective of the sender : If an ax want’s to send a Message to a by, with SystemIdby , it publishes to A B/Community/B/Systems/SystemIdby and vice versa by.
Receive describes a one-way interaction between two participants seen from the perspective of the receiver : Any ax has subscribed it’s private topic A B/Community/A/Systems/SystemIdax . So it can receive individual messages and vice versa any by.
Send / Receive a participant sends a request to another participant who then returns a response message: Can be realized by placing correlation information inside the message (Weske, 2007)
One-To-Many-Send a participant sends out several messages to other participants in parallel : Any ax can send to A B/Community/Systems/B which any by has subscribed.
One-From-Many-Receive one participant waits for messages to arrive from other participants, and each of these participants can send exactly one message: Can be solved on the receiver side, by only accepting e.g. the ﬁrst or last message of any sender in the context of this One-From-Many-Receive within a special time frame.
other One-To-Many Send/Receive, Racing Incoming Messages, Multi-Request. . . : These patterns can also be solved using special mes-

Figure 3 shows the suggested ﬂow of messages and topic usage. ax starts using ax.SendToOpposites(A WannaAB). As prepared by our architecture, this will be delivered to all Bs. ax may repeat the search in a conﬁgurable interval. Any concrete by willing to perform A B may wait now for multiple As to choose the best partner. It may rank As on nearest location, or cheapest price, etc. However, it ﬁnally answers by.SendPrivate(SystemIdax , B WannaAB). ax can also analyze multiple answers for best ﬁtting candidates. Finally it decides, if it really want’s to realize A B with this concrete by. It now reacts with ax.SendPrivate(SystemIdby , A OK ForAB) (or A NOK ForAB). by receiving A OK ForAB can decide to agree or regret the communication and answer either B OK ForAB or B NOK ForAB to ax. Finally ax receiving B OK ForAB starts the private conversation the Payload-Choreography with the concrete given private SystemIdby . ax and by can execute their A B choreography as long as needed. If choreographic faults or timeouts are detected they may fallback to discovery again. As an alternative to sending messages after mediation ax can provide (REST) services to by and vice versa, if some message-data contains hints on how to use these services (e.g. URIs, IP-address, . . . ). What solution to choose for payload communication only depends on architectural preferences.
3. IMPLEMENTATION
The chatting role system has been implemented in a concrete scenario, where automated guided vehicle (AGV) implement a transport service between an assembly and a manual packaging area (see Figure 4). An initial assembly step takes place, resulting in a part being available after Ts = 4 time ticks. An AGV picks up the part and transports it to an available packaging station, where Tp = 3 time ticks are needed to complete this simple process. There are no

1407

IFAC INCOM 2018 B13e8r2gamo, Italy, June 11-13, 2018

Helmut Zörrer et al. / IFAC PapersOnLine 51-11 (2018) 1379–1384

Fig. 4. AGV Transport Scenario

message AGVPickup ProducerTransportNeed {

MetaData MetaData ;

enum enSubType {

Protocol ;

// D e l e g a t i n g ’WannaAB t h i n g s ’

AGV DeliverPart ;

// AGV−>P r o d u c e r

P r o d u c e r P a r t D e l i v e r e d ; // P r o d u c e r −>AGV [ P a r t D a t a ]

}

enSubType SubType ;

PartData Part ;

}

message AGVDelivery ConsumerPartNeed {

MetaData MetaData ;

enum enSubType {

Protocol ;

// D e l e g a t i n g ’WannaAB t h i n g s ’

AGV TakePart ;

// AGV−>Consumer [ P a r t D a t a ]

Consumer PartTaken ; // Consumer−>AGV

}

enSubType SubType ;

PartData Part ;

}

message MetaData {

string Id ;

// message id

s t r i n g SystemRole ; // what r o l e plays the sender

string SystemId ;

// who s e n t t h e message

string Topic ;

// t o p i c t h i s message was sent to

string SessionId ;

// communication context

float Lat ;

// l o c a t i o n −i n f o

float Long ;

// e . g . to p r e f e r nearest device

float AvailableAt ; // time ( seconds ) when a v a i l a b l e

int32 Priority ;

enum e n P r o t o c o l T y p e { // on any X Y naming r e m a i n s A, B !

Default ;

//

A WannaAB ;

// A i n i t i a t e s d i s c o v e r y f o r Bs

B WannaAB ;

// a l l Bs w i l l i n g t o p l a y respond

A OK ForAB ;

// f i n a l l y A accepts one B

A NOK ForAB ;

// or A r e g r e t s a B

B OK ForAB ;

// f i n a l l y B accepts one A

B NOK ForAB ;

// or B r e g r e t s to play with A

}

e n P r o t o c o l T y p e PROTOCOLTYPE;

}

Fig. 5. GPB Message Types in Scenario
buﬀers at stations, implying that not working transports block the overall processes. AGVs driving times are shown in ﬁgure 4. The minimum transport time T mind is given as 1 time tick. We depict the usage of message types (Figure 5) roles communities and choreography in Figure 6.
We implemented our approach in a .NET environment using Google Protocol Buﬀers (GPB https://developers.google. com/protocol-buffers/ ) for messages. As TbPSI infrastructure we used RabbitMQ and Advanced Message Queuing Pro-

Fig. 6. BPMN - Representation of Choreography
tocol (AMQP). We developed a test-framework to start and stop instances of assemblies, packages and AGVs as needed (mapping 1 second to 1 time tick). For our environment we used an initial time factor tf of 100ms. We then calculated the following variables as:
• W AIT F OR M U LT IP LE OP P OSIT ES = tf ∗ 2 = Maximum time to wait for opposites
• REP EAT M U LT IP LE W AIT = tf ∗ 3 = interval to repeat searching
• W AIT F OR RESP ON SE = tf ∗ 4 = Maximum time to wait for a response for W annaAB
This ﬁrst prototype was used to evaluate the functionality of the service discovery mechanism. It worked as expected in the CrSRI framework. In a second step the W aitF orM ultipleM essages function was implemented, to be used by the searching role to ﬁlter and rank messages received from agreeing partners. This enabled us to implement dispatching rules on AGV searcher side (e.g. prefer shortest path). So instead of using some external control to mediate opposites, in our infrastructure this can be done by the devices themself.
In a next step we implemented a preventive transport (P t) approach to reduce transport times. With P t intelligent assemblies and packagings can contact AGVs while they are still working. As an additional information they also publish their ﬁnish time (MetaData ’AvailableAt’). AGVs

1408

IFAC INCOM 2018 Bergamo, Italy, June 11-13, 2018

Helmut Zörrer et al. / IFAC PapersOnLine 51-11 (2018) 1379–1384

1383

Table 1. Computational Results

And we closed down Packaging 3 later during production, without production suﬀering. Additional areas of production after packaging (e.g. shipping) can be supported, by using the same message types but additional communities (As indicated at the end of Figure 6). If an AGV shall serve in another production area (or in another company), the only things to change are the two communities used for pickup and delivery (and the broker url). If a part shall not visit all production areas, the AGV can take the concrete work plan from the part it transports. Either the AGV always carries the same part for production, or it may return to it’s base community after delivery, or it may always search in multiple/all communities for transport jobs.

4. RELATED WORK

Fig. 7. Gantt Output for a Dynamic Scenario in Development Environment

that support P t only accept opposites, if driving time is

less than the given part ﬁnish time.

Using Ns = 3 assembly stations, each producing Ps =

10 parts and Np = 3 packaging stations, we conducted

diﬀerent experiments and executed each of them in 10

runs. To understand whether things have improved, we

implemented the following simple rating function.

Rt =

Ns ∗Ps n=1

(tC

ompletionn

−(Ts

+Tp

+T

mind

))/(Ns

∗Ps

)

Rt calculates the average transportation waste per part

for a solution. The range of Rt for each experiment

is shown in Table 1 (Experiment Naming convention:

e.g. 2ASpP t(50ms) : 2A = 2 AGVs are used. Sp =

AGVs prefer shortest paths. P t = assembly and packaging

support preventive transport. (50ms) = instead of tf =

100ms we used 50ms).

Our experiments revealed, that preventive transport is in our scenario more eﬃcient than using additional AGVs. Timings have to be chosen carefully, since timings have a high impact on the overall performance. The longer roles wait for receipt the longer the total dispatching process will take. But if roles do not wait long enough, they may miss a better ﬁtting opposite, and more messages have to be processed by the broker too. Max Msg/Second of about 40 and average message size measured in communication of 120 bytes leads to a network traﬃc of about 5kB/s for our scenario. In Figure 7 we show results from a more dynamic scenario where entities involved use diﬀerent strategies resp. software versions. In this scenario we conﬁgured only the ﬁrst packaging and the ﬁrst assembly to support preventive transport. This leads to less Blocking times on Assembly 1 and less Waiting time on Packaging 1). Additionally we started a third AGV 3 after a few seconds.

In this section we compare our approach to related works. First two Enterprise Service Bus (ESB) based engines are presented. This is followed by realtime and IoT focused approaches.
The main focus of the ChorSystem (Weiß et al., 2016) framework is to manage the complete life cycle of choreographies, from modeling workﬂows through deployment to execution and monitoring. A central ESB based workﬂow engine is used to mediate services of participants registerd at the global ChorSystem service registry . The ESB based CHOReOS/CHOReVolution (Hamida et al., 2013) project enables the execution of large-scale IoT service choreographies and discovery of services during runtime. Both approaches focus more in networking of larger infrastructures, than in supporting multiple autonomous cells. Trends of resource discovery in IoT are analyzed in (Vandana, 2016). Discovery is incomplete without retrieving information and ranking it up. ”IoT devices are mostly power constrained, so to save power, they wake up or become active only when required to perform a speciﬁc function”(Vandana, 2016, p3085) and analyze the challenges when using IoT resource discovery in constrained application protocol (CoAP). Eﬃcient Ranking in CoAP seems not to be supported. Other limitations in CoAPRD based resource discovery are lacking scalability and unclear speciﬁcation (Vandana, 2016). Using CrSRI we can rank things for mediation. To save energy chatting only sometimes may be a solution. And dedicated brokers may be a solution to solve the high communication demand. The huge amount of IoT devices will still remain a hard challenge. CrSRI may be more useful for mediumsized cooperative CPPS scenarios. Kothmayr et al. (2016) propose a real-time service oriented architecture (rtSOA) for instant service choreographies, but service discovery was out of the scope in the TDMA based approach. Publish/subscribe architectures can also be used in real-time settings (Paikan et al., 2015). Self assembling robotic systems (Liu and Winﬁeld, 2012) describes robots recruiting strategies and the behaviors they use. They use infrared communication with a limited range of maximal 150cm. We assume that their recruitment state could be a good candidate to be implemented with CrSRI, if ﬁnding bots in a larger area is of interest. The AGV scenario has some analogy to foraging robots in collective robotic area (Winﬁeld, 2009). In foraging a robot usually is in one of 4 states: searching, grabbing, homing or depositing. For

1409

IFAC INCOM 2018 B13e8r4gamo, Italy, June 11-13, 2018

Helmut Zörrer et al. / IFAC PapersOnLine 51-11 (2018) 1379–1384

AGVs searching can be seen as the task to ’search an assembly that has a part to carry’ and homing is the task to ’search for a free packaging’. Whereas foraging robots usually only sense their near environment for food, in our scenario food is intelligent enough to tell where it can be found. So in our AGV scenario search tasks can be done using CrSRI and W annaAB. The search discovery scope is deﬁned by the community and roles the AGVs use.
5. CONCLUSIONS AND FUTURE WORK
We implemented a pragmatic Chatting Roles Service Resolution Infrastructure (CrSRI) and evaluated its performance. Our evaluation showed that our simple SRI can be used to enable resilient cooperation of IIoT devices. Process interoperability between the diﬀerent systems is supported, but requires technical, and semantic interoperability by implementing a ﬁxed set of the message types ﬁrst. The presented approach is not only suited for IoT but also for socio-technical systems (with human work and completion time variations). The system allows human operators to ﬁnish their tasks without imposing a global schedule. We are working on the following future research:
• For publish/subscribe without topics (e.g. Google’s Nearby API ) or broadcast networks, topics can be surrogated if sending roles set the message MetaData Topic ﬁeld. Receiving roles must ignore unwanted types of message and ﬁlter the remaining by means of this Topic ﬁeld = process only ’subscribed’ messages.
• Implement software update for devices. Use e.g. Sof twareU pdater RoleX messages to deliver the new software and let devices sense on that messages.
ACKNOWLEDGEMENTS
The research described in this paper has been partially funded by the European Union and the state of Upper Austria within the strategic economic and research program Innovative Upper Austria 2020 and the projects ”Smart Factory Lab” and ”DigiManu”.
First basic considerations on the use of topics in TbPSI were made in the Intelligent Maintenance Planner project (Kranzer et al., 2017). Additional thanks go to Alexander H¨ammerle for fruitful discussions.
REFERENCES
B´enaben, F., Mu, W., Boissel-Dallier, N., Barthe-Delanoe, A.M., Zribi, S., and Pingaud, H. (2015). Supporting interoperability of collaborative networks through engineering of a service-based mediation information system (mise 2.0). Enterprise Information Systems, 9(5-6), 556– 582. doi:10.1080/17517575.2014.928949.
Carbone, M., Honda, K., and Yoshida, N. (2008). Theoretical aspects of communication-centred programming. Electronic Notes in Theoretical Computer Science, 209, 125 – 133.
Eugster, P.T., Felber, P.A., Guerraoui, R., and Kermarrec, A.M. (2003). The many faces of publish/subscribe. ACM Comput. Surv., 35(2), 114–131. doi:10.1145/ 857076.857078.
Hamida, A.B., Kon, F., Lago, N., Zarras, A., Athanasopoulos, D., Pilios, D., Vassiliadis, P., Georgantas, N.,

Issarny, V., Mathioudakis, G., Bouloukakis, G., Jarma, Y., Hachem, S., and Pathak, A. (2013). Integrated choreos middleware - enabling large-scale, qos-aware adaptive choreographies. URL https://hal.inria. fr/hal-00912882. Hohpe, G. and Woolf, B. (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA. Kopp, O., van Lessen, T., and Nitzsche, J. (2008). The need for a choreography-aware service bus. In The 3rd European Young Researchers Workshop on Service Oriented Computing (YRSOC 2008), 30–36. Kothmayr, T., Kemper, A., Scholz, A., and Heuer, J. (2016). Instant service choreographies for reconﬁgurable manufacturing systems - a demonstrator. In 2016 IEEE 21st International Conference on Emerging Technologies and Factory Automation (ETFA), 1–8. doi:10.1109/ ETFA.2016.7733606. Kranzer, S., Prill, D., Aghajanpour, D., Merz, R., Strasser, R., Mayr, R., Zoerrer, H., Plasch, M., and Steringer, R. (2017). An intelligent maintenance planning framework prototype for production systems. In 2017 IEEE International Conference on Industrial Technology (ICIT), 1124–1129. doi:10.1109/ICIT.2017.7915520. Liu, W. and Winﬁeld, A.F.T. (2012). Distributed Autonomous Morphogenesis in a Self-Assembling Robotic System, 89–113. Springer Berlin Heidelberg. Meissner, S., Debortol, S., Sperner, K., Magerkurth, C., and Dobre (2016). Internet of things architecture - a project deliverable d2.3 - orchestration of distributed iot service interactions. http://www.meet-iot.eu/ deliverables-IOTA/D2_3.pdf. Last visited 2016-0901. Paikan, A., Domenichelli, D., and Natale, L. (2015). Communication channel prioritization in a publish-subscribe architecture. In 2015 IEEE 8th Workshop on Software Engineering and Architectures for Realtime Interactive Systems (SEARIS), 41–45. doi:10.1109/SEARIS.2015. 7854100. Tu, Z., Zacharewicz, G., and Chen, D. (2014). A federated approach to develop enterprise interoperability. Journal of Intelligent Manufacturing, 27(1), 11–31. doi:10.1007/ s10845-013-0868-1. Vandana, C. (2016). Study of resource discovery trends in internet of things (iot). Int. J. Advanced Networking and Applications, 08(03), 3084–3089. Weichhart, G., Molina, A., Chen, D., Whitman, L., and Vernadat, F. (2016). Challenges and current developments for sensing, smart and sustainable enterprise systems. Computers in Industry, 79, 34–46. doi:10.1016/ j.compind.2015.07.002. Weiß, A., Andrikopoulos, V., Hahn, M., and Karastoyanova, D. (2016). ChorSystem: A Message-based System for the Life Cycle Management of Choreographies. In On the Move to Meaningful Internet Systems: OTM 2016, 503–521. Springer-Verlag. Weske, M. (2007). Business Process Management: Concepts, Languages, Architectures. Springer-Verlag New York, Inc. Winﬁeld, A.F. (2009). Foraging Robots, 3682–3700. Springer New York, New York, NY.

1410

