ac ro
v2.9

2019/02/17

Typeset Acronyms and other Abbreviations
Clemens Niederberger
https://bitbucket.org/cgnieder/acro/
contact@mychemistry.eu

ac r o allows you to define and use abbreviations in a simple way. Abbreviations can be divided into different classes of abbreviations. Lists
of abbreviations can be created (also of separate classes of abbreviations)
and printed wherever you want the lists to appear.
acro provides an option single which ignores abbreviations that are
used only once in the whole document.
As an experimental feature ac r o also offers the option sort which
automatically sorts the list created by \printacronyms.
ac r o also has the feature of creating local lists

Table of Contents
1. Licence and Requirements

2

2. Basics
2.1. Creating New Acronyms . . .
2.2. Logging of Acronyms . . . . .
2.3. Using the Acronyms – the
Commands . . . . . . . . . . .
2.4. Plural Forms . . . . . . . . . .
2.5. Alternative Short Forms . . . .
2.6. Extra Information for the List
Entry . . . . . . . . . . . . . .
2.7. Foreign Language Acronyms .

2
2
6

3.4. Fetching the Single Appearance
3.5. Using Classes . . . . . . . . .
3.6. Reset or Mark as Used, Test if
Acronym Has Been Used . . .
3.7. \ac and Friends in PDF Bookmarks, Accessibility Support,
Tooltips . . . . . . . . . . . . .
3.7.1. PDF Bookmarks . . . .
3.7.2. Accessibility Support .
3.7.3. Tooltips . . . . . . . .
3.8. Adding Acronyms to the Index

7
8
10
10
11

4. Printing the List
3. Additional Commands and Possibilities
3.1. Indefinite Forms . . . . . . . .
3.2. Uppercasing . . . . . . . . . .
3.3. Simulating the First Appearance

12 5. Options and Customization
12
5.1. General Options . . . . . . . .
13
5.2. Options Regarding Acronyms
13
5.3. Options Regarding the List . .

1

13
14
14
15
15
16
16
17
17
19
19
21
23

1. Licence and Requirements

6. Trailing Tokens and Special Action

24

7. About Page Ranges

27

8. Dividing Your Document Into
Pieces – Creating Local Lists

27

9. Language Support

28

10. hyperref Support

28

13. More on Customization
13.1. Background Information .
13.2. Lists . . . . . . . . . . . . .
13.2.1. Own List Style . .
13.2.2. Own List Heading
Command . . . . .
13.3. First Styles . . . . . . . . .
13.4. Extra Styles . . . . . . . .
13.5. Page Number Styles . . . .
13.6. Configuration Files . . . .

11. Defining Own Acronym Macros

28

A. All Acronyms Used in this Documentation

41

B. References

42

12. About Plural Forms, Possessive
Forms and Similar Constructs –
the Concept of Endings

33 C. Index

. .
. .
. .

35
35
35
35

.
.
.
.
.

38
38
39
40
41

.
.
.
.
.

43

1. Licence and Requirements
Permission is granted to copy, distribute and/or modify this software under the terms of the LATEX
Project Public License (LPPL), version 1.3 or later (http://www.latex-project.org/lppl.txt).
The software has the status “maintained.”
ac r o loads and needs the following packages: expl3,1 xparse, xtemplate, l3keys2e,2 zrefabspage3 and translations4 [Nie15].

2. Basics
2.1. Creating New Acronyms
Acronyms are created with the command \DeclareAcronym.
\DeclareAcronym{hidi}{hlist

of keysi}
The basic command for declaring an acronym.
This command understands a number of keys which are listed below. Some of them are not
described immediately but at appropriate places in the documentation.
(required)
The short form of the acronym. This option is required: an acronym must have a short form.
If this is set it must be set as first option! If another option is set first and notices the short

short = {htexti}

1. on CTAN
2. on CTAN
3. on CTAN
4. on CTAN

as l3kernel: http://mirrors.ctan.org/macros/latex/contrib/l3kernel/
as l3packages: http://mirrors.ctan.org/macros/latex/contrib/l3packages/
as oberdiek: http://mirrors.ctan.org/macros/latex/contrib/oberdiek/
as translations: http://mirrors.ctan.org/macros/latex/contrib/translations/

2

2. Basics
option missing it assumes that the id should be used as short version and sets it accordingly. A
warning will be written to the log then.
(required)
The long form of the acronym. This option is required: an acronym must have a description.

long = {htexti}

short-plural = {htexti}

The plural ending appended to the short form.

Default: s

short-plural-form = {htexti}

Introduced in
version 2.0

The plural short form of the acronym; replaces the short form when used instead of appending
the plural ending.
Default: s

long-plural = {htexti}

The plural ending appended to the long form.
long-plural-form = {htexti}

Plural long form of the acronym; replaces the long form when used instead of appending the
plural ending.
alt-plural = {htexti}

Introduced in
version 2.0

The plural ending appended to the alternative form.

Default: s

alt-plural-form = {htexti}

Introduced in
version 2.0

The plural alternative form of the acronym; replaces the alternative form when used instead of
appending the plural ending.
foreign-plural = {htexti}

Introduced in
version 2.9

The plural ending appended to the foreign form.

Default: s

long-plural-form = {htexti}

Introduced in
version 2.9

Plural lforeign form of the acronym; replaces the foreign form when used instead of appending
the plural ending.
list = {htexti}

If specified this will be written in the list as description instead of the long form.
Default: a

short-indefinite = {htexti}

Indefinite article for the short form.

Default: a

long-indefinite = {htexti}

Indefinite article for the long form.
long-pre = {htexti}

htexti is prepended to the long form in the text but not in the list of acronyms.
long-post = {htexti}

htexti is appended to the long form in the text but not in the list of acronyms.

3

2. Basics
post = {htexti}

Introduced in
version 2.8

htexti is appended to the acronym in the text but not in the list of acronyms.
alt = {htexti}

Alternative short form.
Default: a

alt-indefinite = {htexti}

Indefinite article for the alternative form.
extra = {htexti}

Extra information to be added in the list of acronyms.
foreign = {horiginal

long formi}
Can be useful when dealing with acronyms in foreign languages, see section 2.7 on page 11 for
details.

foreign-lang = {hlanguagei}

Introduced in
version 2.3

The babel [Bra16] or polyglossia [Cha15] language of the foreign form. This language is used
to wrap the entry with \foreignlanguage{hlanguagei} if either babel or polyglossia is loaded.
You’ll need to take care that the corresponding language is loaded by babel or polyglossia.
single = {htexti}

Introduced in
version 2.3

If provided htexti will be used instead of the long form if the acronym is only used a single time
and the option single = {true} is active.
sort = {htexti}

If used the acronym will be sorted according to this key instead of its id.
class = {hcsv

Changed in
version 2.4

listi}
The class(es) the acronym belongs to.

cite = {[hprenotei][hpostnotei]{hcitation

keysi}}
A citation that is printed to the acronym according to an option explained later.

short-format = {hTEX

codei}
The format used for the short form of the acronym.

long-format = {hTEX

codei}
The format used for the long form of the acronym.

first-long-format = {hTEX

codei}
The format used for the first long form of the acronym as set with \ac, \acf or \acflike and
their uppercase, plural and indefinite forms.

single-format = {hTEX

Introduced in
version 2.3

codei}
The format used for the acronym if the acronym is only used a single time.

first-style = default | empty | square | short | long | reversed | footnote | sidenote |
footnote-reversed|sidenote-reversed

Introduced in
version 2.3

The style of the first appearance of the acronym, see also section 5.2.

4

2. Basics
pdfstring = {htexti/hplural

Changed in
version 2.4b

endingi}
Used as PDF string replacement in bookmarks when used together with the hyperref package.
The appended plural ending is optional. If you leave it (and the /) the default ending is used.
htexti is expanded before it is saved.

accsupp = {htexti}

Sets the ActualText key as presented by the accsupp package for the acronym.
tooltip = {htexti}

Introduced in
version 2.1

Sets the tooltip description for an acronym. For actually getting tooltips you also need an
appropriate setting of the tooltip-cmd option or to set the package option tooltip.
index-sort = {htexti}

If you use the package option index every occurrence of an acronym is recorded to the index
and sorted by its id or (if set) by the value of the sort key. This key allows to set an individual
sorting option for the index. See section 3.8 on page 17 for details.
index = {htexti}

This key allows to overwrite the automatic index entry with an arbitrary one. See section 3.8
on page 17 for details.
index-cmd = {hcontrol

sequencei}
This key let’s you set an individual index creating command for this acronym. It should be a
command that takes one mandatory argument. See section 3.8 on page 17 for details.
In its simplest form an acronym needs a short and a long form. Please note that both keys
must be set and that the short key must always be the first key that is set.

1
2
3
4
5

% preamble:
\DeclareAcronym{test}{
short = ST ,
long = Some Test
}

This creates the acronym “ST” with the id “test” and the long form “Some Test.”
The format key allows you to choose a specific format for the short form of an acronym:

1
2
3
4
5
6

% preamble:
\DeclareAcronym{ot}{
short
= ot ,
long
= Other Test ,
short-format = \scshape
}

5

2. Basics

The short form now looks like this: ot.
The cite key needs a bit explaining. It expects arguments like the standard \cite command,
i.e., two optional arguments setting the hprenotei and hpostnotei and one mandatory argument
setting the citation key.

1
2
3
4
5
6
7
8

1
2
3
4
5
6

% preamble:
\DeclareAcronym{ny}{
short
= NY ,
short-plural = ,
long
= New York ,
long-plural = ,
cite
= {NewYork}
}

% bib file for use with biber/biblatex:
@online{NewYork,
author = {Wikipedia},
title
= {New York City},
urldate = {2012-09-27},
url
= {http://en.wikipedia.org/wiki/New_York_City},
year

7
8

= {2012}

}

The first appearance now looks as follows5: New York (NY) [Wik12].

2.2. Logging of Acronyms
Introduced in
version 2.5

When you activate acro’s option log acro’ writes information about the acronyms it defines
to the log file.
Default: false
When set to true/silent acro writes the main properties of an acronym to the log file. When
set to verbose ac r o’ writes all properties of an acronym to the log file.

log = true|false|silent|verbose

This is an example of the logging info with log = {true} or log = {silent}.
5. The appearance of the citation of course depends on the citation style you’re using.

6

2. Basics

1
2
3
4
5
6
7
8
9
10
11
12
13
14

=================================================
| acro info -- defining new acronym:
|
ID = {jpg}
|
short = {JPEG}
|
long = {Joint Photographic Experts Group}
|
alt = {JPG}
|
sort = {jpeg}
|
class = {}
|
list = {}
|
extra = {}
|
foreign = {}
|
pdfstring = {}
|
cite = {}
=================================================

2.3. Using the Acronyms – the Commands
Acronyms are used with one of the following commands:
\ac*{hidi}

basic command; the first output is different from subsequent ones.

\Ac*{hidi}

same as \ac but capitalizes the first letter of the long form.

\acs*{hidi}

short form; the actual acronym.

\acl*{hidi}

long form; the meaning of the acronym.

\Acl*{hidi}

same as \acl but capitalizes first letter.

\aca*{hidi}

alternative short form as specified in the alt key of \DeclareAcronym; if it hasn’t been specified
this is identical to \acs.

\acf*{hidi}

first form; output like the first time \ac is output.

\Acf*{hidi}

same as \acf but capitalizes first letter of the long form.

\acp*{hidi}

plural form of \ac;

7

2. Basics
\Acp*{hidi}

same as \acp but capitalizes first letter of the long form.

\acsp*{hidi}

plural form of \acs;

\aclp*{hidi}

plural form of \acl;

\Aclp*{hidi}
same as \aclp

but capitalizes first letter.

\acap*{hidi}

plural form of \aca;

\acfp*{hidi}

plural form of \acf;

\Acfp*{hidi}
same as \acfp

but capitalizes first letter of the long form.

If an acronym is used the first time with \ac its output is different from subsequent uses. To be
clear on this: the first time! If the acronym has been used with any of the output commands
before it is not the first time any more.
If you use the starred variant an acronym will not be marked as used. This proves useful if
an acronym is typeset in a section title, for example, since then the appearance in the table of
contents won’t mark it as used.

1
2
3
4
5
6
7
8
9
10
11
12
13
14

% preamble:
% \DeclareAcronym{cd}{
%
short
= cd ,
%
long
= Compact Disc ,
%
short-format = \scshape
% }
first time: \ac{cd} \\
second time: \ac{cd} \\
short: \acs{cd} \\
alternative: \aca{cd} \\
first again: \acf{cd} \\
long: \acl{cd} \\
short plural: \acsp{cd} \\
long plural: \aclp{cd}

first time: Compact Disc (cd)
second time: cd
short: cd
alternative: cd
first again: Compact Disc (cd)
long: Compact Disc
short plural: cd
long plural: Compact Discs

2.4. Plural Forms
If an acronym is defined in the standard way acro uses an ‘s’ that’s appended to both the short
and the long form when one of the plural commands is used. However, that is not always the

8

2. Basics
best solution. For one thing not all acronyms may have a plural form. Second, the plural form
especially of the long forms may be formed differently. And third, other languages can have
other plural endings.
For these reasons \DeclareAcronym can get the following keys:
Default: s

short-plural = {htexti}

The plural ending of the short form.

Default: s

long-plural = {htexti}

The plural ending of the long form.
long-plural-form = {htexti}

An alternative plural form for the long form.
These keys are optional. If they’re not used, the default setting is s. If you use long-plural-form
the long form will be replaced by the specified plural form when necessary.
Suppose we define the following acronyms:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

\DeclareAcronym{cd}{
short
= cd ,
long
= Compact Disc ,
short-format = \scshape
}
\DeclareAcronym{ny}{
short
= NY ,
short-plural = ,
long
= New York ,
long-plural =
}
\DeclareAcronym{sw}{
short
= SW ,
long
= Sammelwerk ,
long-plural = e
}
\DeclareAcronym{MP}{
short
= MP ,
long
= Member of Parliament ,
long-plural-form = Members of Parliament
}

These acronyms now have the following plural appearances:

9

2. Basics

1
2
3
4

\acsp{cd},
\acsp{ny},
\acsp{sw},
\acsp{MP},

cd, Compact Discs
NY, New York
SW, Sammelwerke
MP, Members of Parliament

\aclp{cd} \\
\aclp{ny} \\
\aclp{sw} \\
\aclp{MP}

In the default setting the format of the long or short form is not extended to the plural ending
which might look strange if you choose bold weight as format, for example. In this case you
can tell ac r o to extend the format.
format-include-endings = true|false

Introduced in
version 2.8

Tell acr o to use the format of the base form for the endings, too.

Default: false

For a more general view on endings please read section 12 on page 33.

2.5. Alternative Short Forms
For some acronyms it might be useful to have alternative forms. For this \DeclareAcronym has
another key:
alt = {htexti}

Alternative short form.

1
2
3
4
5
6
7
8
9

% preamble:
% \DeclareAcronym{jpg}{
%
short = JPEG ,
%
sort = jpeg ,
%
alt
= JPG ,
%
long = Joint Photographic Experts Group
% }
default: \acs{jpg} \\
alt.: \aca{jpg}

default: JPEG
alt.: JPEG

The alternative form uses the same plural ending as the default short form and is formatted in
the same way.

2.6. Extra Information for the List Entry
Of course you can print a list of acronyms where their meaning is explained. Sometimes it can be
useful to add additional information there. This is done with another key to \DeclareAcronym:

10

2. Basics
extra = {htexti}

Additional information for the list of acronyms.
These information will only be displayed in the list. See section 4 on page 17 for the impact of
the following example.

1
2
3
4
5
6
7
8
9
10
11
12

% preamble:
% \DeclareAcronym{nato}{
%
short
= nato ,
%
long
= North Atlantic Treaty Organization ,
%
extra
= \textit{deutsch}: Organisation des Nordatlantikvertrags ,
%
short-format = \scshape
% }
The \ac{nato} is an intergovernmental military alliance based on the
North Atlantic Treaty which was signed on 4~April 1949. \ac{nato}
headquarters are in Brussels, Belgium, one of the 28 member states
across North America and Europe, the newest of which, Albania and
Croatia, joined in April 2009.

The North Atlantic Treaty Organization (nato) is an intergovernmental military alliance
based on the North Atlantic Treaty which was signed on 4 April 1949. nato headquarters
are in Brussels, Belgium, one of the 28 member states across North America and Europe,
the newest of which, Albania and Croatia, joined in April 2009.

2.7. Foreign Language Acronyms
I repeatedly read the wish for being able to add translations to acronyms when the acronyms
stem from another language than the document language, i.e., something like the following in a
German document:

1
2

Steuergerät (Electronic Control Unit, ECU)
ECU

\ac{ecu}\\
\ac{ecu}

That’s why I decided to add the following properties:
foreign = {horiginal

long formi}
A description for an acronym originating in another language than the document language.

foreign-lang = {hlanguagei}

Introduced in
version 2.3

The babel [Bra16] or polyglossia [Cha15] language of the foreign form. This language is used
to wrap the entry with \foreignlanguage{hlanguagei}.

11

3. Additional Commands and Possibilities
Here is the definition of the above mentioned ECU acronym:

1
2
3
4
5
6

\DeclareAcronym{ecu}{
short
= ECU ,
long
= Steuerger\"at ,
foreign = Electronic Control Unit ,
foreign-lang = english
}

As you have seen this adds the foreign entry to the first appearance of an acronym. It is also
added in parentheses to the list of acronyms after the long entry. Actually the entry there is
the argument to the following command:
\acroenparen{hargumenti}

Places hargumenti in parentheses: \acroenparen{example}: (example). See page 22 for a way
to customize this other than redefining it.

3. Additional Commands and Possibilities
3.1. Indefinite Forms
Unlike many other languages 6 in English the indefinite article is not determined by the grammatical case, gender or number but by the pronounciation of the following word. This means
that the short and the long form of an acronym can have different indefinite articles. For these
cases acro offers the keys short-indefinite, alt-indefinite and long-indefinite whose
default is a. For every lowercase singular command two alternatives exist, preceded by i and I,
respectively, which output the lowercase and uppercase version of the corresponding indefinite
article.

1
2
3
4
5
6
7

% preamble:
% \DeclareAcronym{ufo}{
%
short
= UFO ,
%
long
= unidentified flying object ,
%
long-indefinite = an
% }
\Iac{ufo}; \iacs{ufo}; \iacl{ufo}

An unidentified flying object (UFO); a UFO; an unidentified flying object
6. Let’s better say: unlike the other languages where I know at least the basics.

12

3. Additional Commands and Possibilities

3.2. Uppercasing
\acfirstupper{htoken

listi}
This command uppercases the first token in htoken listi. The command is less powerful than
\makefirstuc that is provided by the mfirstuc package [Tal15] but it is expandable. Obvious
downsides are for example that it does not uppercase accented letters.

3.3. Simulating the First Appearance
Users told me7 that there are cases when it might be useful to have the the acronym typeset
according to the first-style but with another text than the long form. For such cases ac r o
offers the following commands.
\acflike*{hidi}{hinstead

of long formi}
Write some alternative long form for acronym with id hidi as if it were the first time the
acronym was used.

\acfplike*{hidi}{hinstead
Plural form of \acflike.

1
2

of long formi}

NY a

\acsetup{first-style=footnote}
\acflike{ny}{the big apple}

a. the big apple [Wik12]

The plural ending in \acfplike is only appended to the short form. It makes no sense to
append it to the text that is inserted manually anyway. Note that whatever text you’re inserting
might be gobbled depending on the first-style you’re using.

3.4. Fetching the Single Appearance
Introduced in
version 2.3

There are macros that fetch the single appearance of an acronym even if it has been used more
than once and the single option is active.
\acsingle*{hidi}

Write acronym as if it were used only a single time.

\Acsingle*{hidi}

Uppercase form of \acsingle.

1

New York [Wik12]

\acsingle{ny}

7. Well – one, to be precise ;)

13

3. Additional Commands and Possibilities

3.5. Using Classes
The acronyms of ac r o can be divided into different classes. This doesn’t change the output
but allows different acronym lists, see section 4 on page 17. For this \DeclareAcronym has an
additional key:
class = {hcsv

Changed in
version 2.4

listi}
Associated class(es) for an acronym.
This might be useful if you can and want to divide your acronyms into different types,
technical and grammatical ones, say, that shall be listed in different lists. Since every acronym
can get a list of associated classes those classes can effectively be used like tags for filtering
acronyms.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

% preamble:
% \DeclareAcronym{la}{
%
short
= LA ,
%
short-plural = ,
%
long
= Los Angeles ,
%
long-plural = ,
%
class
= city
% }
% \DeclareAcronym{ny}{
%
short
= NY ,
%
short-plural = ,
%
long
= New York ,
%
long-plural = ,
%
class
= city ,
%
cite
= NewYork
% }
\acl{la} (\acs{la}) \\
\acl{ny} (\acs{ny})

Los Angeles (LA)
New York (NY)

3.6. Reset or Mark as Used, Test if Acronym Has Been Used
If you want for some reason to fool ac r o into thinking that an acronym is used for the first
time you can call one of these commands:
\acreset{hcomma

separated list of idsi}
This will reset a used acronym such that the next use of \ac will again print it as if it were used
the first time. This will not remove an acronym from being printed in the list if it actually has
been used before.

\acresetall

Reset all acronyms.

14

3. Additional Commands and Possibilities
\acifused{hidi}{htruei}{hfalsei}

This command tests if the acronym with id hidi has already been used and either puts true or
false in the input stream.
\aciffirst{htruei}{hfalsei}

Introduced in
version 2.8

To be used inside of acronym definitions in order to test if we are inside the first instance of the
acronym or not.

1

New York (NY) [Wik12]

\acreset{ny}\ac{ny}

Beware that both commands act globally! There are also commands that effectively do the
opposite of \acreset, i.e., mark acronyms as used:
\acuse{hcomma

separated list of idsi}
This has the same effect as if an acronym had been used twice, that is, further uses of \ac will
print the short form and the acronym will in any case be printed in the list (as long as its class
is not excluded).

\acuseall

Mark all acronyms as used.
Then there are two further commands related to using acronyms:
\acswitchoff

Introduced in
version 2.6

This command is for patching in certain situations. For example some table environments like
tabularx or tabu pass their content two or more times for determining the width of the table
columns. Those can be patched to add \acswitchoff to their trial phase.
\acswitchon

Introduced in
version 2.6

Effectively the opposite of \acswitchoff – this command should probably never be needed.

3.7. \ac and Friends in PDF Bookmarks, Accessibility Support, Tooltips
3.7.1. PDF Bookmarks
acro’s commands usually are not expandable which means they’d leave unallowed tokens in
PDF bookmarks. hyperref offers \texorpdfstring to circumvent that issue manually but that
isn’t really a nice solution. What’s the point of having macros to get output for you if you have
to specify it manually after all?
That is why ac r o offers a preliminary solution for this. In a bookmark every \ac like
command falls back to a simple text string typesetting what \acs would do (or \acsp for plural
forms). These text strings both can accessed manually and can be modified to an output reserved
for PDF bookmarks.

15

3. Additional Commands and Possibilities
\acpdfstring{hidi}

Access the text string used in PDF bookmarks.
\acpdfstringplural{hidi}

Access the plural form of the text string used in PDF bookmarks.
pdfstring = {{hpdfstringi/hplural

endingi}}
Key for \DeclareAcronym to declare a custom text string for PDF bookmarks. The plural ending
can be set optionally.
For example the PDF acronym used in the title for this section is defined as follows:

1
2
3
4
5
6
7

\DeclareAcronym{pdf}{
short
= pdf ,
long
= Portable Document Format ,
format
= \scshape ,
pdfstring = PDF ,
accsupp
= PDF
}

3.7.2. Accessibility Support
The last example also demonstrates the accsupp key. The idea is to have something different
visible in the PDF file compared to what you get when you select and copy the corresponding
string. In the example visible string is a lowercase pdf in small caps while the string copied is
an uppercase PDF.
For this to work you need to use the package option accsupp, too, which will load the package
accsupp if it isn’t loaded by the user already. Then the key accsupp will set the ActualText
property of \BeginAccSupp. Please refer to accsupp’s documentation for details. To see its effect
copy PDF and paste it into a text file. You should get uppercase letters instead of lowercase
ones.
accsupp = {htexti}

Key for \DeclareAcronym to set the ActualText property of \BeginAccSupp (see accsupp’s
documentation for details) to be used for an acronym. It only has an effect when the package
option accsupp is used, too.
3.7.3. Tooltips
The idea of a tooltip is to have some text shown when you hover with the mouse over the short
form of an acronym. This is only available in some PDF viewers, though. On possibility for
such tooltips is loading the pdfcomment package [Kle12] and using its \pdftooltip macro.

16

4. Printing the List
Default: false
This options loads the pdfcomment package and sets the command for creating tooltips to
\pdftooltip.

tooltip = true|false

Introduced in
version 2.1

sequencei}
Default: \@firstoftwo
This allows users using another macro for tooltips – maybe one provided by another package
or some own macro. It needs to be a macro with two mandatory arguments, the first being the
string typeset in the PDF, the second being the tooltip description text.

tooltip-cmd = {hcontrol

Introduced in
version 2.1

For using this with acronyms they have a property tooltip which can be used inside
for specifying the description text of the tooltip. If the tooltip package
option is used but the property is not set for an acronym then the long property is used instead.
If an acronym is used inside of another acronym then the tooltips of the “inner” acronyms
are disabled.
\DeclareAcronym

3.8. Adding Acronyms to the Index
acro has the package option index. If it is used an index entry will be recorded every time an
unstarred acronym command is used. The index entry will be hidi@hshorti, hsorti@hshorti if the
sort key has been set, hindex-sorti@hshorti if the index-sort has been set, or hindexi if the key
index has been set for the specific acronym. The short versions appearing there are formatted
according to the chosen format of the corresponding acronym, of course.
This document demonstrates the feature. You can find every acronym that has been declared
in the index. In order to allow flexibility the indexing command can be chosen both globally via
package option and individually for every acronym. This would allow to add acronyms to a
specific index if more than one index is used, for example with help of the imakeidx package.
I’m not yet convinced this is a feature many people if anyone needs and if they do if it is
flexible enough. If you have any thoughts on this I’d appreciate an email.

4. Printing the List
Printing the whole list of acronyms is easy: just place \printacronyms where ever you want
the list to be.
\printacronyms[hoptionsi]

Print the list of acronyms.
The commands takes a few options, namely the following ones:
include-classes = {hlist

of classesi}
Takes a comma-separated list of the classes of acronyms that should be in the list.

exclude-classes = {hlist

of classesi}
Takes a comma-separated list of the classes of acronyms that should not be in the list. Note
that this list overwrites any entries in include-classes! If a class is both included and excluded
then the corresponding acronyms will not be added to the list.

17

4. Printing the List
name = {hname

of the listi}
sets the name for the list.
command without leading backslashi}
Default: section*
Sets the sectioning command for the heading of the list. A special value is none which suppresses
the heading.

heading = {hsectioning

Default: true

sort = true|false

Set sorting for this list only.

Default: false
This option can be used to create a list of only the acronyms of the current “barrier group”, see
section 8.

local-to-barriers = true|false

Introduced in
version 2.4

1
2

\acsetup{extra-style=comma}
\printacronyms[exclude-classes=city]

3
4

\printacronyms[include-classes=city,name={City Acronyms}]

Acronyms
cd Compact Disc
CTAN Comprehensive TEX Archive Network
ECU Steuergerät (Electronic Control Unit)
id identification string
JPEG Joint Photographic Experts Group
LPPL LATEX Project Public License
MP Member of Parliament
nato North Atlantic Treaty Organization, deutsch: Organisation des Nordatlantikvertrags
PDF Portable Document Format
SW Sammelwerk
ST Some Test

18

5. Options and Customization
UFO unidentified flying object

City Acronyms
LA Los Angeles
NY New York
You can see that the default layout is a description list with a \section* title. Both can be
changed, see section 5.
The command \printacronyms needs two LATEX runs. This is a precaution to avoid error
messages with a possibly empty list. But since almost all documents need at least two runs and
often are compiled much more often than that, this fact shouldn’t cause too much inconvenience.

5. Options and Customization
5.1. General Options
There are a few options which change the general behaviour of ac r o. Underlined values are
used if no value is given.
Default: loud
Setting messages = {silent} will turn all of ac r o’s error messages into warnings and all of
acro’s warnings into info messages. Be sure to check the log file carefully if you decide to set
this option.

messages = silent|loud

Default: false
If set to true an acronym that’s used only once (with \ac) in a document will only print the
acronym in a specified form and will not be printed in the list.

single = true|false

Default: long
Determines how a single appearance of an acronym is printed if single = {true} has been
chosen.

single-form = long|short|alt|first

Introduced in
version 2.0

hyperref = true|false

If set to true the short forms of the acronyms will be linked to their list entry.

Default: false

Default: false
If set to true this option will place \label{hprefixihidi} the first time the acronym with id hidi
is used.

label = true|false

label-prefix = {htexti}

The prefix for the \label that is placed when option label = {true} is used.

Default: ac:

Default: true
This option is true as default. It means that only acronyms that are actually used in the

only-used = true|false

19

5. Options and Customization
document are printed in the list. If false, all acronyms defined with \DeclareAcronym will be
written to the list.
Default: any
This option determines wether an acronym is mark as used when the first form is used the first
time (with \ac, \acf or \acflike and their uppercase, plural and indefinite forms) or when any
of the \ac-like commands is used.

mark-as-used = first|any

Default: false
If set to true this option will create a macro \hidi for each acronym as a shortcut for \ac{hidi}.
Already existing macros will not be overwritten.

macros = true|false

Default: false
If set to true this option will append \xspace from the xspace package to the commands created
with the macros option.

xspace = true|false

Default: false
If set to true and the option macros = {true} is in effect then already existing macros will be
overwritten.

strict = true|false

Default: true
If set to true the acronym list will be sorted automatically. The entries are sorted by their id
ignoring upper and lower case. This option needs the experimental package l3sort (from the
l3experimental bundle) and can only be set in the preamble.

sort = true|false

Default: first
This option decides whether citations that are added via cite are added to each first, every or
no appearance of an acronym. If first is chosen, the option single = {true} is active and an
acronym appears only once it still will get the citation.

cite = all|first|none

Changed in
version 2.4b

sequencei}
Default: \cite
This option determines which command is used for the citation. Each citation command that
takes the cite key as argument is valid, for example biblatex’s \footcite.

cite-cmd = {hcontrol

Default: \nobreakspace
Depending on the citation command in use a space should be inserted before the citation or
maybe not (e.g. \footcite. . . ). This option allows you to set this. Actually it can be used to
place arbitrary code right before the citation.

cite-connect = {hcodei}

Default: false
If set to true the short form (or the long form) and the citation of an acronym will be printed
together in parentheses when an acronym is used the first time.

group-citation = true|false

Introduced in
version 2.0

sequencei}
Default: \cite
This option determines which command is used for the citation when an acronym is used the
first time and group-citation = {true}. Each citation command that takes the cite key as
argument is valid, for example biblatex’s \footcite.

group-cite-cmd = {hcontrol

Introduced in
version 2.0

20

5. Options and Customization
Default: ,\nobreakspace
When group-citation = {true} this is inserted between the long/short form of the acronym
and the citation within the parentheses.

group-cite-connect = {hcodei}

Introduced in
version 2.0

Default: false
If set to true an index entry will be recorded every time an unstarred acronym command is
used for the corresponding acronym.

index = true|false

sequencei}
Default: \index
Chooses the index command that is used when option index has been set to true.

index-cmd = {hcontrol

accsupp = true|false

Activates the access support as provided by the accsupp package.
tooltip = true|false

Introduced in
version 2.1

Activates tooltip support for ac r o using the pdfcomment package.

Default: false
Default: false

sequencei}
Default: \@firstoftwo
A macro taking two mandatory arguments, the first being the short form of the acronym and
the second being some tooltip description.

tooltip-cmd = {hcontrol

Introduced in
version 2.1

sequencei}
Default: \acfirstupper
The command that is used to capitalize the first word in the \Ac and the like commands. You
can change it to another one like for example \makefirstuc 8 or \MakeTextUppercase.9

uc-cmd = {hcontrol

All options of this and the following sections can be set up either as package options or via
the setup command:
\acsetup{hoptionsi}

Set up ac r o anywhere in the document. Or separate package loading from setup.

1
2

% with \acsetup{macros}
we could have used these before: \nato, \ny

we could have used these before: nato, NY

5.2. Options Regarding Acronyms
The options described in this section all influence the layout of one of the possible output forms
of the acronyms.
8. from the mfirstuc package
9. from the textcase package

21

5. Options and Customization
(initially empty)
Sets a format for all short forms. For example short-format = {\scshape} would print all
short forms in small caps.

short-format = {hformati}

(initially empty)

long-format = {hformati}

The same for the long forms.

(initially empty)
The format for the foreign entry when it appears as part of the first appearance of an acronym.

foreign-format = {hformati}

(initially empty)
The format for the acronym when it is used only once. If not specified the formatting according
to single-form is used.

single-format = {hformati}

Introduced in
version 2.3

(initially empty)
The format for the long form on first usage (with \ac, \acf or \acflike and their uppercase,
plural and indefinite forms).

first-long-format = {hformati}

(initially empty)
An extra format for the short entries in the list. If not used this is the same as short-format.
Please be aware that a call of short-format after this one will overwrite it again.

list-short-format = {hformati}

Default: 3em
This option controls the width reserved for the short forms of the acronyms in the lof list style.

list-short-width = {hdimi}

Introduced in
version 2.1

(initially empty)
An extra format for the long entries in the list. If not used this is the same as long-format.
Please be aware that a call of long-format after this one will overwrite it again.

list-long-format = {hformati}

Default: \acroenparen
The format for the foreign entry as it appears in the list. This may be code that ends with a
macro that takes a mandatory argument.

list-foreign-format = {hformati}

(initially empty)

extra-format = {hformati}

The same for the extra information.

first-style = default | empty | square | short | long | reversed | footnote | sidenote |

Default: default
The basic style of the first appearance of an acronym. The value sidenote needs the command
\sidenote to be defined (for example by the sidenotes package).
footnote-reversed|sidenote-reversed

extra-style = default|plain|comma|paren|bracket

Defines the way the extra information is printed in the list.

Default: s/s
With this option the default plural ending can be set. The appended hlongi ending is optional.
If you leave it (and the /) the hshorti ending is used for both short and long versions.

plural-ending = {hshorti/hlongi}

Changed in
version 2.4b

Default: default

22

5. Options and Customization

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

% (Keep in mind that we're in
% a minipage here!)
\acsetup{first-style=empty}
empty: \acf{ny} \\
\acsetup{first-style=footnote}
footnote: \acf{ny} \\
\acsetup{first-style=square}
square: \acf{ny} \\
\acsetup{first-style=short}
short: \acf{ny} \\
\acsetup{first-style=long}
long: \acf{ny} \\
\acsetup{first-style=reversed}
reversed: \acf{ny} \\
\acsetup{
first-style = footnote-reversed
}
footnote-reversed: \acf{ny}

empty: NY
footnote: NY a
square: New York [NY] [Wik12]
short: NY [Wik12]
long: New York [Wik12]
reversed: NY (New York) [Wik12]
footnote-reversed: New York b
a. New York [Wik12]
b. NY [Wik12]

5.3. Options Regarding the List
Default: none
If this option is set to a value other than none the page numbers of the an acronym appeared on
are printed in the list. Please note that this is an experimental feature and might fail in quite a
number of cases. If you notice anything please send me an email!

page-style = none|plain|comma|paren

Default: all
If the option page-style has any value other than none this option determines wether all usages
of the acronyms are listed or only the first time. Implicitly sets label = {true}.

pages = all|first

namei}
Default: p.\@\,
The “name” of the page label. This is automatically translated to the active language. However
for the time being there are many translations missing, yet. Please notify me if you find your
language missing.

page-name = {hpage

name plurali}
Default: pp.\@\,
The “name” of the page label when there are more than one page. This is automatically translated
to the active language. However for the time being there are many translations missing, yet.
Please notify me if you find your language missing.

pages-name = {hpage

Default: false
If set to true a page range in the list of acronyms that consists of two pages will be written by
the first page and an appended f. This depends on the option next-page.

following-page = true|false

Default: false
If set to true a page range in the list of acronyms that set consists of more than two pages will
be written by the first page and an appended ff. This depends on the option next-pages.

following-pages = true|false

23

6. Trailing Tokens and Special Action
Default: false
If set to true this sets both options following-page = {true} and following-pages = {true}.
false sets following-page = {false} and following-pages = {false}.

following-pages* = true|false

Introduced in
version 2.5

Default: \,f.\@
Appended to a page number when following-page is set to true and the range is only 2 pages
long. This is automatically translated to the active language. However, for the time being there
are many translations missing, yet. Please notify me if you find your language missing.

next-page = {htexti}

Default: \,ff.\@
Appended to a page number when following-pages is set to true and the range is more than 2
pages long. This is automatically translated to the active language. However, for the time being
there are many translations missing, yet. Please notify me if you find your language missing.

next-pages = {htexti}

list-style = description | lof | longtable | extra-longtable | extra-longtable-rev |

Default: description
Choose with which style the list of acronyms should be typeset. If you choose hlongtablei,
extra-longtable or extra-longtable-rev you have to load the longtable [Car14] package in
your preamble. The values extra-hsomethingi put the extra information in a column of it own.
Be aware that per default all extra-table styles only use l columns. Since acronym descriptions
can easily get longer that a line you should probably define your own style if you want to use them.
See section 13.2 on page 35 for details.
extra-tabular|extra-tabular-rev|tabular|toc

Changed in
version 2.2

list-heading = chapter | chapter* | section | section* | subsection | subsection* |
subsubsection|subsubsection*|addchap|addsec|none
Default: section*

Changed in
version 2.0

The heading type of the list. The last two only work with a KOMA-Script class that also defines
the appropriate command. A special value is none which suppresses the heading.

namei}
Default: Acronyms
The name of the list. This is what’s written in the list-heading. This is automatically translated
to the active language. However, for the time being there are many translations missing, yet.
Please notify me if you find your language missing.

list-name = {hlist

list-caps = true|false

Print the first letters of the long form capitalized.

Default: false

6. Trailing Tokens and Special Action
Introduced in
version 2.0

acro has the possibility to look ahead for certain tokens and switch a boolean if it finds them.
Per default acro knows about three tokens: the “dot” (.), the “dash” (-) and the “babel-hyphen”
(\babelhyphen).
A token is made known to ac r o with the following macro:
\AcroRegisterTrailinghtokeni{hnamei}

This registers the token htokeni so ac r o looks if it follows directly after an acronym macro.
hnamei is the internal name for this token.

24

6. Trailing Tokens and Special Action
The acr o package already registers the above mentioned tokens:

1
2
3

\AcroRegisterTrailing . {dot}
\AcroRegisterTrailing - {dash}
\AcroRegisterTrailing \babelhyphen {babel-hyphen}

If a token is registered it doesn’t mean that ac r o looks for it. The token must first be
activated for this:
activate-trailing-tokens = {hcsv

list of token namesi}
Tell acro to look for trailing tokens. This is done by giving a csv list of the internal names of
the tokens. Per default only dot is activated.

deactivate-trailing-tokens = {hcsv

list of token namesi}
Tell acro not to look for trailing tokens. This is done by giving a csv list of the internal names
of the tokens.
All of the above on its own does nothing visible. However: inside of an acronym, i. e., for
example inside the long or the short form it can be tested for those trailing tokens:

\aciftrailing{hcsv

list of token namesi}{htruei}{hfalsei}
Check if one of the tokens listed in hcsv list of token namesi is following and either place htruei
or hfalsei in the input stream.

acro uses this to define to further macros:
\acdot

Inserts a . if no dot follows.
\acspace

Inserts a \space if no dash or babel-hyphen follows.
The definitions are equivalent10 to the following code:

1
2

\newcommand*\acdot{\aciftrailing{dot}{}{.\@}}
\newcommand*\acspace{\aciftrailing{dash,babel-hyphen}{}{\space}}

This could be used to define an acronym as follows:

10. Not quite: acro’s definitions are engine protected.

25

6. Trailing Tokens and Special Action

1
2
3
4
5

\DeclareAcronym{etc}{
short = {\textit{etc}\acdot} ,
long = {\textit{et cetera}} ,
short-plural = , long-plural =
}

If now you somewhere use

1

\ac{etc}.

there won’t be two dots printed.
The command \acspace is used already in the definition of the first appearance of a macro.
Let’s say you’re a German chemist and you have

1
2
3
4

\DeclareAcronym{PU}{
long = Polyurethan ,
long-plural = e
}

and you use it the first time like this:

1

\ac{PU}-Hartschaum

then according to German orthography and typesetting rules this should be printed as
“Polyurethan(PU)-Hartschaum”
i. e., with no space between long and short form. This is exactly what happens it you say

1

\acsetup{activate-trailing-tokens = {dash,babel-hyphen}}

in the preamble.

26

7. About Page Ranges

7. About Page Ranges
If you enable the page-style option ac r o adds page numbers to the list of acronyms. In
version 0.* it would add a page reference for an acronym in the list of acronyms that used
\pageref to refer to the first appearance of an acronym. This is retained using pages = {first}.
Version 1.0 uses a different approach that doesn’t use a label but instead will list all pages an
acronym appeared on. With hyperref the pages are referenced using \hyperpage.
There are some options that control how this list will be typeset, e.g., following-page,
next-pages or the option page-style itself. It is important to mention that the page list will
always take at least two compilation runs until changes in the options or the actual page
numbers affect it. This is due to the fact that the updated sequence is first written to the aux file
and only read in during the next run.

8. Dividing Your Document Into Pieces – Creating Local Lists
Introduced in
version 2.4

acro introduces the concept of barriers which can divide the document into parts. It is possible
to create lists of only those acronyms used between two such barriers.
\acbarrier

Sets a barrier at the point of use in the document. The begin and the end of the document mark
implicit barriers.
Default: false
If you want to use barriers and local lists you have to activate the feature first. This should
be set in the preamble in order to work reliably. Make sure to watch out for log file messages
asking you to rerun.

use-barriers = true|false

Introduced in
version 2.5

reset-at-barriers = true|false

If this option is set to true \acbarrier implicitly calls \acresetall.

Default: false

Default: false
This option can only be used as option to the \printacronyms command. It then prints a list of
only the acronyms of the current “barrier group”.

local-to-barriers = true|false

1
2
3
4

\acbarrier
\printacronyms[local-to-barriers]
\ac{ctan} and \ac{lppl}
\acbarrier

27

9. Language Support

Acronyms
CTAN Comprehensive TEX Archive Network
LPPL LATEX Project Public License
CTAN and LPPL

9. Language Support
ac r o detects if packages babel [Bra16] or polyglossia [Bra16] are being loaded and tries to
adapt certain strings to match the chosen language. However, due to my limited language
knowledge only a few translations are provided. I’ll show how the English translations are
defined so you can add the translations to your preamble if needed. Even better would be you’d
send me a short email to contact@mychemistry.eu with the appropriate translations for your
language and I’ll add them to ac r o.

1
2
3
4
5

\DeclareTranslation{English}{acronym-list-name}{Acronyms}
\DeclareTranslation{English}{acronym-page-name}{p.}
\DeclareTranslation{English}{acronym-pages-name}{pp.}
\DeclareTranslation{English}{acronym-next-page}{f.}
\DeclareTranslation{English}{acronym-next-pages}{ff.}

10. hyperref Support
The option hyperref = {true} adds internal links from all short (or alternative) forms to their
respective list entries. Of course this only works if you have loaded the hyperref package in your
preamble. You should use this option with care: if you don’t use \printacronyms anywhere
this option will result in loads of hyperref warnings. Also printing several lists can result in
warnings if don’t clearly separate the lists into different classes. If an acronym appears in more
than one list there will also be more than one hypertarget for this acronym.
Using hyperref will also add \hyperpage to the page numbers in the list (provided they are
displayed in the style chosen). Like with an index the references will thus not point to the
acronyms directly but to the page they’re on.

11. Defining Own Acronym Macros
Introduced in
version 2.0

The commands explained in section 2.3 on page 7 have all been defined with a dedicated
command – there is a family of dedicated commands, actually:

28

11. Defining Own Acronym Macros
\NewAcroCommand{hcsi}{hcodei}

Defines a new acro acronym command hcsi. This sets up the necessary framework needed by
acronym commands and defines hcsi with an optional star argument and a mandatory argument
for the acronym id using xparse’s \NewDocumentCommand. Inside hcodei one can refer to the id
hidi with #1.
\RenewAcroCommand{hcsi}{hcodei}

Defines a new acro acronym command hcsi. This sets up the necessary framework needed by
acronym commands and defines hcsi with an optional star argument and a mandatory argument
for the acronym id using xparse’s \RenewDocumentCommand. Inside hcodei one can refer to the
id hidi with #1.
\DeclareAcroCommand{hcsi}{hcodei}

Defines a new acro acronym command hcsi. This sets up the necessary framework needed by
acronym commands and defines hcsi with an optional star argument and a mandatory argument
for the acronym id using xparse’s \DeclareDocumentCommand. Inside hcodei one can refer to
the id hidi with #1.
\ProvideAcroCommand{hcsi}{hcodei}

Defines a new acro acronym command hcsi. This sets up the necessary framework needed by
acronym commands and defines hcsi with an optional star argument and a mandatory argument
for the acronym id using xparse’s \ProvideDocumentCommand. Inside hcodei one can refer to
the id hidi with #1.
Inside these macros one can use a number of low-level expl3 commands.11
Acronym fetching commands
\acro_use:n {hidi}

Fetches the acronym using either the first or the short form depending on earlier uses.
\acro_short:n {hidi}

Fetches the short form of the acronym.
\acro_long:n {hidi}

Fetches the long form of the acronym.
\acro_alt:n {hidi}

Fetches the alternative short form of the acronym.
\acro_foreign:n {hidi}

Fetches the foreign property of the acronym if available.
\acro_extra:n {hidi}

Fetches the extra property of the acronym if available.
11. Which is why you need to use them inside an expl3 programming environment. This means in the preamble
surround the definitions with \ExplSyntaxOn and \ExplSyntaxOff.

29

11. Defining Own Acronym Macros

Acronym setup commands
\acro_first_upper:

ac r o setup command which tells the macros above that we want to uppercase the first letter
of the long version. Should be used before one of the acronym fetching commands.
\acro_plural:

ac r o setup command which tells the macros above that we want to use plural forms. Should
be used before one of the acronym fetching commands.
\acro_indefinite:

acro setup command which tells the macros above that we want to add the indefinite article.
Should be used before one of the acronym fetching commands.
\acro_cite:

acro setup command which tells the macros above that we want to add the citation in any case
independent of the option cite. Should be used before one of the acronym fetching commands.
\acro_no_cite:

acro setup command which tells the macros above that we want to have no citation independent
of the option cite. Should be used before one of the acronym fetching commands.
\acro_index:

ac r o setup command which tells the macros above that we want to add an index entry in
any case independent of the option index. Should be used before one of the acronym fetching
commands.
\acro_reset_specials:

Introduced in
version 2.0b

This macro is called implicitly by \NewAcroCommand and \NewPseudoAcroCommand. If you plan
to define an ac r o command by yourself using \NewDocumentCommand this should be the first
macro after \acro_begin:. It ensures that in nested acronyms the inner acronyms don’t inherit
indefinite articles, uppercasing, endings. . .
Additional macros for further uses
\acro_begin:

When an acronym macro is defined “by hand”, i. e., not using \NewAcroCommand then this must
be the first macro in the code. Must have a matching \acro_end:.
\acro_end:

When an acronym macro is defined “by hand”, i. e., not using \NewAcroCommand then this must
be the last macro in the code. Must have a matching \acro_begin:.
\acro_check_and_mark_if:nn {hboolean

expressioni} {hidi}
Checks if the acronym with the id hidi exists and marks it as used when hbooleani expression
evaluates to true. This macro is used inside \NewAcroCommand and friends implicitly.

30

11. Defining Own Acronym Macros
\acro_check_acronym:nn {hidi} {true|false}

Checks if the acronym with the id hidi exists and marks it as used if true or doesn’t. This
macro is used inside \acro_check_and_mark_if:nn.
\acro_use_acronym:n {true|false}
Tell \acro_use:n and similar commands

wether to mark the acronym as used or not. This
macro is used inside \acro_check_acronym:nn. If this macro is used explicitly it should be used
before \acro_use:n (or a similar command) otherwise it has no effect. An acronym marked as
used cannot be unmarked.

\acro_mark_as_used:n {hidi}

Explicitly use the acronym with the id hidi. This is the expl3 macro applied to all entries in
\acuse.
∗ \acro_if_acronym_used:nTF {hidi} {htruei} {hfalsei}
The code-level version of \acifused. This macro is expandable.
\acro_for_all_acronyms_do:n {hcodei}

Loops over all acronyms known when the macro is used. Inside of hcodei you can refer to the
id hidi of an acronym with #1.
\acro_barrier:

The code-level version of \acbarrier.
\acro_switch_off:

Introduced in
version 2.6

The expl3 version of \acswitchoff.
\acro_switch_on:

Introduced in
version 2.6
Introduced in
version 2.7

The expl3 version of \acswitchon.
\acro_add_action:n {hcodei}
Adds code to \acro_get:n. Inside

of hcodei you can refer to the id of the acronym with #1.

\acro_get_property:nnTF {hidi} {hpropertyi} {htruei} {hfalsei}

Introduced in
version 2.7

Introduced in
version 2.7

Fetches the property hpropertyi of the acronym hidi and stores it in a tokenlist variable \l__acro_hpropertyi_tl
where all dashes in the property names are replaced with underscores. htruei is placed in the
input stream if the property had been set, hfalsei otherwise.
\acro_get_property:nn{hidi} {hpropertyi}
Like \acro_get_property:nnTF, but without

the htruei and hfalsei arguments.

\acro_if_property:nnTF {hidi} {hpropertyi} {htruei} {hfalsei}

Introduced in
version 2.7

Checks if the property hpropertyi of the acronym hidi is set and places htruei is in the input
stream if yes and hfalsei otherwise.

31

11. Defining Own Acronym Macros
Examples The usage of above macros is best explained with a few examples. The following
definition is done by ac r o:

1

\NewAcroCommand \ac { \acro_use:n {#1} }

An equivalent definition for \ac would be

1
2
3
4
5
6
7
8

\NewDocumentCommand \ac {sm}
{
\acro_begin:
\acro_reset_specials:
\acro_check_and_mark_if:nn {#1} {#2}
\acro_use:n {#2}
\acro_end:
}

which should explain what the actual framework is which \NewAcroCommand adds.
Other definitions by ac r o are for example the following ones:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

\NewAcroCommand \Ac
{
\acro_first_upper:
\acro_use:n {#1}
}
\NewAcroCommand \iac
{
\acro_indefinite:
\acro_use:n {#1}
}
\NewAcroCommand \acp
{
\acro_plural:
\acro_use:n {#1}
}
\NewAcroCommand \Acp
{
\acro_plural:
\acro_first_upper:
\acro_use:n {#1}

32

12. About Plural Forms, Possessive Forms and Similar Constructs – the Concept of Endings

21
22
23
24
25
26
27

}
\NewAcroCommand \Aclp
{
\acro_plural:
\acro_first_upper:
\acro_long:n {#1}
}

12. About Plural Forms, Possessive Forms and Similar Constructs
– the Concept of Endings
acro has a concept of endings. All of ac r o’s plural options are defined by saying

1

\ProvideAcroEnding {plural} {s} {s}

The command’s syntax and what it does is as follows:
\ProvideAcroEnding{hnamei}{hshort

defaulti}{hlong defaulti}

This macro defines the options
•hnamei-ending,
•short-hnamei-ending,
•alt-hnamei-ending,
•long-hnamei-ending and
•foreign-hnamei-ending.
It also defines the acronym properties
•short-hnamei,
•short-hnamei-form,
•alt-hnamei,
•alt-hnamei-form,
•long-hnamei,
•long-hnamei-form,
•foreign-hnamei and
•foreign-hnamei-form.

33

12. About Plural Forms, Possessive Forms and Similar Constructs – the Concept of Endings

Changed in
version 2.4b

Additionally it defines a setup macro as described in section 11 on page 28, \acro_hnamei:. If
hnamei contains a - (dash) it is replaced by _ before \acro_hnamei: is built. So if you choose
my-name the corresponding macro is named \acro_my_name:. If you use any other non-letters
you are on your own. If you use the command with the same hnamei a second time the command
only resets the defaults.
Note that you must use \ProvideAcroEnding before any acronym definition!
This could be used together with the macros described in section 11 on page 28 for adding
support for possessive forms:

1
2
3
4

\ExplSyntaxOn
% this now only works because I've used the same already in the preamble so
% it does nothing here:
\ProvideAcroEnding {possessive} {'s} {'s}

5
6
7
8
9
10
11
12

\ProvideAcroCommand \acg
{
\acro_possessive:
\acro_use:n {#1}
}
\ExplSyntaxOff
The \acg{cd} booklet says\ldots

The cd booklet says. . .

Please note that different endings are cumulative which you probably want to avoid! Imagine
a macro

1
2
3
4
5
6

\NewAcroCommand \acgp
{
\acro_possessive:
\acro_plural:
\acro_use:n {#1}
}

This would give “cds’s” instead of “cds’”. To solve this you might want to consider

34

13. More on Customization

1
2

\ProvideAcroEnding {possessive-singular} {'s} {'s}
\ProvideAcroEnding {possessive-plural}
{s'} {s'}

13. More on Customization
13.1. Background Information
Several of acro’s objects are customized using templates. For each of these objects it is possible
to define own templates.12 Possibly more interesting: it is easily possible to define further
instances of an object using a certain template. How this works is explained in the following
sections. However, the basics are always the same. There is a command
\DeclareAcrohobject

typeiStyle{hnamei}{htemplatei}{hoptionsi}
which allows to define a new style (i. e., instance) for the object hobject typei using the template
{htemplatei}.

13.2. Lists
13.2.1. Own List Style
The different existing list styles are all built from four different templates, list, list-of,
table and extra-table. Those templates are defined with the help of the xtemplate package
(from [L3P]). Each of these templates has a few options which are described in table 1 on the
following page. New list styles now are defined via the following macro:
\DeclareAcroListStyle{hnamei}{htemplatei}{hoptionsi}

Declares a new ac r o list style hnamei. hnamei will be the value which can be chosen in the
option list-style. htemplatei is the name of the template to be used by the style. Available
templates are listed in table 1. hoptionsi are the option settings for the corresponding template.
For defining new styles you need some information on what the different templates and
options do:
• The option list of the list template sets the list environment. This must be a classic
LATEX list where items are listed with \item. In those lists short entries will always be fed
as optional argument to \item:
\item[hshorti]hlongihextraihpagei
• The template list-of simulates a table of contents or a list of figures. This can be chosen
by setting the option style to either toc or lof.

12. This requires some knowledge of xtemplate and expl3. Plans are to provide a documented interface for users of
ac r o in the future.

35

13. More on Customization

Ta b l e 1 : Available List Templates and Their Options

Template

Option

Option Type

Default

list

list

tokenlist

description

foreign-sep

tokenlist

\space

reverse

boolean

false

before

tokenlist

after

tokenlist

style

tokenlist

toc

foreign-sep

tokenlist

\space

reverse

boolean

false

list-of

table

extra-table

before

tokenlist

after

tokenlist

table

tokenlist

tabular

table-spec

tokenlist

lp{.7\linewidth}

foreign-sep

tokenlist

\space

reverse

boolean

false

before

tokenlist

after

tokenlist

table

tokenlist

tabular

table-spec

tokenlist

llll

foreign-sep

tokenlist

\space

reverse

boolean

false

before

tokenlist

after

tokenlist

36

13. More on Customization
• The template table typesets the list in a table with two columns:
hshorti & hlongihextraihpagei \tabularnewline
• The template extra-table typesets the list in a table with four columns:
hshorti & hlongi & hextrai & hpagei \tabularnewline
• The option foreign-sep is the code inserted between long form and foreign entry (if a
foreign entry is present).
• The options before and after are inserted directly before and after the complete list.
• The option reverse switches the place of hlongi with hextrai.
• The option table-spec sets the column types for the table templates. It must correspond
to the number of columns the corresponding template uses.
As an example let’s define a style longtabu which uses the corresponding table environment
from the package tabu [Che11]:

1
2
3
4
5
6

\usepackage{tabu,longtable}
\DeclareAcroListStyle{longtabu}{table}{
table = longtabu ,
table-spec = @{}>{\bfseries}lX@{}
}
\acsetup{list-style=longtabu}

As another example let’s define a new list with the help of the enumitem package [Bez11]:

1
2
3
4
5
6
7
8
9
10
11
12

% preamble:
% \usepackage{enumitem}
\newlist{acronyms}{description}{1}
\newcommand*\addcolon[1]{#1:}
\setlist[acronyms]{
labelwidth = 3em,
leftmargin = 3.5em,
noitemsep,
itemindent = 0pt,
font=\addcolon}
\DeclareAcroListStyle{mystyle}{list}{ list = acronyms }
\acsetup{ list-style = mystyle }

This would look as follows:

37

13. More on Customization

Acronyms
cd:
CTAN:
ECU:
id:
JPEG:
LA:
LPPL:
MP:
nato:
NY:
PDF:
SW:
ST:
UFO:

Compact Disc
Comprehensive TEX Archive Network
Steuergerät (Electronic Control Unit)
identification string
Joint Photographic Experts Group
Los Angeles
LATEX Project Public License
Member of Parliament
North Atlantic Treaty Organization. deutsch: Organisation des Nordatlantikvertrags
New York
Portable Document Format
Sammelwerk
Some Test
unidentified flying object

13.2.2. Own List Heading Command
With the option list-heading you can choose which command prints the heading of the list.
If you need a different choice than what’s already provided you can use the following command
to define a new option:
\DeclareAcroListHeading{hnamei}{hcontrol

sequencei}

Defines a new value hnamei for the option list-heading. hcontrol sequencei must be a control
sequence which takes one mandatory argument.
As an example here is how the value section is defined:

1

\DeclareAcroListHeading{section}{\section}

13.3. First Styles
The first styles define how an acronym is typeset when it is used for the first time. It is set with
the option first-style. Legal values for this option are defined with the following command:
\DeclareAcroFirstStyle{hnamei}{htemplatei}{hoptionsi}

Declares a new ac r o first style hnamei. hnamei will be the value which can be chosen in the
option first-style. htemplatei is the name of the template to be used by the style. Available
templates are listed in table 2. hoptionsi are the option settings for the corresponding template.
Here are two examples of the already available styles and how they are defined:

38

13. More on Customization

1
2
3
4
5
6
7
8

\DeclareAcroFirstStyle{short}{inline}{
only-short = true ,
brackets
= false
}
\DeclareAcroFirstStyle{sidenote-reversed}{note}{
note-command = \sidenote{#1} ,
reversed
= true
}

Ta b l e 2 : Available First Style Templates and Their Options

Template

Option

Option Type

Default

inline

brackets

boolean

true

brackets-type

tokenlist

()

only-short

boolean

false

only-long

boolean

false

reversed

boolean

false

between

tokenlist

foreign-sep

tokenlist

,~

use-note

boolean

true

note-command

function

\footnote{#1}

reversed

boolean

false

foreign-sep

tokenlist

,~

note

13.4. Extra Styles
The extra styles define how the extra information of an acronym is typeset in the list. It is
set with the option extra-style. Legal values for this option are defined with the following
command:
\DeclareAcroExtraStyle{hnamei}{htemplatei}{hoptionsi}

Declares a new acro extra style hnamei. hnamei will be the value which can be chosen in the
option extra-style. htemplatei is the name of the template to be used by the style. Available
templates are listed in table 3. hoptionsi are the option settings for the corresponding template.
Here are two examples of the already available styles and how they are defined:

1
2

\DeclareAcroExtraStyle{default}{inline}{
brackets
= false ,

39

13. More on Customization

Ta b l e 3 : Available Extra Style Templates and Their Options

3
4
5
6
7
8
9
10

Template

Option

Option Type

Default

inline

punct

boolean

true

punct-symbol

tokenlist

,

brackets

boolean

true

brackets-type

tokenlist

()

punct
= true ,
punct-symbol = .
}
\DeclareAcroExtraStyle{paren}{inline}{
brackets
= true ,
punct
= true ,
punct-symbol =
}

13.5. Page Number Styles
The page number styles define how the page numbers where acronyms have been used are
typeset in the list. It is set with the option page-style. Legal values for this option are defined
with the following command:
\DeclareAcroPageStyle{hnamei}{htemplatei}{hoptionsi}

Declares a new acro extra style hnamei. hnamei will be the value which can be chosen in the
option page-style. htemplatei is the name of the template to be used by the style. Available
templates are listed in table 4. hoptionsi are the option settings for the corresponding template.
Here are two examples of the already available styles and how they are defined:

1
2
3
4
5
6
7
8

\DeclareAcroPageStyle{default}{inline}{
punct = true ,
punct-symbol = .
}
\DeclareAcroPageStyle{paren}{inline}{
brackets=true ,
punct-symbol = ~
}

40

A. All Acronyms Used in this Documentation

13.6. Configuration Files
Introduced in
version 2.2

If you repeatedly have the same setup and definitions for acro in your preamble 13 you might
want to place those in a configuration file. If acro finds a file named acro.cfg present it inputs
it at the end of the package. The only thing to be aware of is that this file is input like a package
which means that @ is treated as a letter (category code 11).

A. All Acronyms Used in this Documentation
cd Compact Disc, pp. 8 f., 34
CTAN Comprehensive TEX Archive Network, pp. 2, 27
ECU Steuergerät (Electronic Control Unit), p. 11
id identification string, pp. 2, 4 f., 13 f., 19 f., 28 ff.
JPEG Joint Photographic Experts Group, p. 10
LA Los Angeles, p. 14
LPPL LATEX Project Public License, pp. 2, 27
MP Member of Parliament, p. 9
nato North Atlantic Treaty Organization, deutsch: Organisation des Nordatlantikvertrags,
pp. 11, 21
NY New York, pp. 6, 9, 13 ff., 21 f.
PDF Portable Document Format, pp. 4, 15 ff.
SW Sammelwerk, p. 9
13. For example defining new endings, acro commands, list styles, . . .

Ta b l e 4 : Available Page Number Style Templates and Their Options

Template

Option

Option Type

Default

inline

display

boolean

true

punct

boolean

false

punct-symbol

tokenlist

,

brackets

boolean

false

brackets-type

tokenlist

()

space

skip

.333333em plus
.166666em minus
.111111em

41

B. References
ST Some Test, p. 5
UFO unidentified flying object, p. 12

B. References
[Bez11]

Javier B e z o s. enumitem. version 3.5.2, Sept. 28, 2011 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/enumitem/.

[Bra16]

Johannes B r a a m s, current maintainer: Javier B e z o s.
babel. version 3.9q, Feb. 24, 2016 (or newer).
u r l: http://mirror.ctan.org/macros/latex/required/babel/.

[Car14]

David C a r l i s l e. longtable. version 4.11, Oct. 28, 2014 (or newer).
u r l: http://mirror.ctan.org/macros/latex/required/tools/.

[Cha15]

François C h a r e t t e, current maintainer: Arthur R e u t e n au e r.
polyglossia. version 1.42.0, Aug. 6, 2015 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/polyglossia/.

[Che11]

Florent C h e r v e t. tabu. version 2.8, Feb. 26, 2011 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/tabu/.

[Kle12]

Josef K l e b e r. pdfcomment. version 2.3a, Sept. 28, 2012 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/pdfcomment/.

[L3P]

T h e LATEX 3 P r o j e c t T e a m.
l3packages. version SVN 6377, Jan. 19, 2016 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/l3packages/.

[Nie15]

Clemens N i e d e r b e r g e r. translations. version 1.2e, Nov. 7, 2015 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/translations/.

[Tal15]

Nicola L.C. Ta l b ot. mfirstuc. version 2.02, Dec. 17, 2015 (or newer).
u r l: http://mirror.ctan.org/macros/latex/contrib/glossaries/.

[Wik12]

Wi k i p e d i a. New York City. 2012.
u r l: http://en.wikipedia.org/wiki/New_York_City (visited on 09/27/2012).

42

C. Index
\acuse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15,

31
\Ac . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7, 21, 32 \acuseall . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
\ac . . . . . . . . . . 4, 7 f., 11, 14 f., 19 f., 22, 26 f., 32 alt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4, 7, 10
\aca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 f., 10 alt-indefinite . . . . . . . . . . . . . . . . . . . . . . 4, 12
\acap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 alt-plural . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
\acbarrier . . . . . . . . . . . . . . . . . . . . . . . . . 27, 31 alt-plural-form . . . . . . . . . . . . . . . . . . . . . . . . 3
accsupp . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 16, 21
accsupp (package) . . . . . . . . . . . . . . . . . 5, 16, 21 B
\acdot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 f. babel (package) . . . . . . . . . . . . . . . . . . . . 4, 11, 28
\Acf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 B e z o s, Javier . . . . . . . . . . . . . . . . . . 4, 11, 28, 37
\acf . . . . . . . . . . . . . . . . . . . . . . . . . 4, 7 f., 20, 22 f. B r a a m s, Johannes . . . . . . . . . . . . . . . . 4, 11, 28
\acfirstupper . . . . . . . . . . . . . . . . . . . . . . 13, 21
C
\acflike . . . . . . . . . . . . . . . . . . . . . . 4, 13, 20, 22
C a r l i s l e, David . . . . . . . . . . . . . . . . . . . . . . . 24
\Acfp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
c d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8, 10, 34
\acfp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
C h a r e t t e, François . . . . . . . . . . . . . . . . . 4, 11
\acfplike . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
C h e r v e t, Florent . . . . . . . . . . . . . . . . . . . . . . 37
\acg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
cite . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4, 6, 20, 30
\aciffirst . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
cite-cmd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
\aciftrailing . . . . . . . . . . . . . . . . . . . . . . . . . 25
cite-connect . . . . . . . . . . . . . . . . . . . . . . . . . . 20
\acifused . . . . . . . . . . . . . . . . . . . . . . . . . . . 15, 31
class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4, 14
\Acl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
c ta n . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2, 28
\acl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 f., 14
\Aclp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8, 33 D
\aclp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8, 10 deactivate-trailing-tokens . . . . . . . . . . . 25
\Acp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8, 32 \DeclareAcroCommand . . . . . . . . . . . . . . . . . . . 29
\acp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 f., 32 \DeclareAcroExtraStyle . . . . . . . . . . . . . . 39 f.
\acpdfstring . . . . . . . . . . . . . . . . . . . . . . . . . . 16 \DeclareAcroFirstStyle . . . . . . . . . . . . . . 38 f.
\acpdfstringplural . . . . . . . . . . . . . . . . . . . . 16 \DeclareAcroListHeading . . . . . . . . . . . . . . 38
\acreset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 f. \DeclareAcroListStyle . . . . . . . . . . . . . 35, 37
\acresetall . . . . . . . . . . . . . . . . . . . . . . . . 14, 27 \DeclareAcronym . 2, 5 ff., 9 f., 12, 14, 16 f., 20,
\acroenparen . . . . . . . . . . . . . . . . . . . . . . . 12, 22
26
\AcroRegisterTrailing . . . . . . . . . . . . . . . 24 f. \DeclareAcroPageStyle . . . . . . . . . . . . . . . . 40
\acs . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 f., 10, 14 f.
\acsetup . . . . . . . . . . . . . . . 13, 18, 21, 23, 26, 37 E
\Acsingle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 ECU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 f.
\acsingle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 enumitem (package) . . . . . . . . . . . . . . . . . . . . . 37
\acsp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8, 10, 15 exclude-classes . . . . . . . . . . . . . . . . . . . . . . . 17
\acspace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 f. expl3 (package) . . . . . . . . . . . . . . . . . . . . . . . . . . 2
\acswitchoff . . . . . . . . . . . . . . . . . . . . . . . 15, 31 extra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4, 11
\acswitchon . . . . . . . . . . . . . . . . . . . . . . . . 15, 31 extra-format . . . . . . . . . . . . . . . . . . . . . . . . . . 22
activate-trailing-tokens . . . . . . . . . . . . . 25 extra-style . . . . . . . . . . . . . . . . . . . . . . . . 22, 39

A

43

Index

F
first-long-format . . . . . . . . . . . . . . . . . . . 4,

22
13, 22, 38
following-page . . . . . . . . . . . . . . . . . . . 23 f., 27
following-pages . . . . . . . . . . . . . . . . . . . . . . 23 f.
following-pages* . . . . . . . . . . . . . . . . . . . . . . 24
foreign . . . . . . . . . . . . . . . . . . . . . . . . . 4, 11 f., 22
foreign-format . . . . . . . . . . . . . . . . . . . . . . . . 22
foreign-lang . . . . . . . . . . . . . . . . . . . . . . . . 4, 11
foreign-plural . . . . . . . . . . . . . . . . . . . . . . . . . 3
format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
format-include-endings . . . . . . . . . . . . . . . 10
first-style . . . . . . . . . . . . . . . . . . . 4,

G
group-citation . . . . . . . . . . . . . . . . . . . . . . . 20 f.
group-cite-cmd

. . . . . . . . . . . . . . . . . . . . . . . . 20

group-cite-connect . . . . . . . . . . . . . . . . . . . . 21

H
heading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
hyperref . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19,

28
hyperref (package) . . . . . . . . . . . . . . . . 5, 15, 27 f.
I
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
\iacl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
\iacs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
id . . . . . . . . . . . . . . . . . . . . 3 ff., 13, 15, 19 f., 29 ff.
include-classes . . . . . . . . . . . . . . . . . . . . . . . 17
index . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 17, 21, 30
index-cmd . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 21
index-sort . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 17

LA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
label . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19, 23
label-prefix . . . . . . . . . . . . . . . . . . . . . . . . . . 19
list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
list-caps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
list-foreign-format . . . . . . . . . . . . . . . . . . . 22
list-heading . . . . . . . . . . . . . . . . . . . . . . . 24, 38
list-long-format . . . . . . . . . . . . . . . . . . . . . . 22
list-name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
list-short-format . . . . . . . . . . . . . . . . . . . . . 22
list-short-width . . . . . . . . . . . . . . . . . . . . . . 22
list-style . . . . . . . . . . . . . . . . . . . . . . . . . 24, 35
local-to-barriers . . . . . . . . . . . . . . . . . . 18, 27
log . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
long . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3, 12, 17
long-format . . . . . . . . . . . . . . . . . . . . . . . . . 4, 22
long-indefinite . . . . . . . . . . . . . . . . . . . . . 3, 12
long-plural . . . . . . . . . . . . . . . . . . . . . . . . . . 3, 9
long-plural-form . . . . . . . . . . . . . . . . . . . . . 3, 9
long-post . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
long-pre . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
longtable (package) . . . . . . . . . . . . . . . . . . . . . . 24
lppl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2

\Iac

M

\iac

macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20

. . . . . . . . . . . . . . . . . . . . . . . . . . 13
mark-as-used . . . . . . . . . . . . . . . . . . . . . . . . . . 20
messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
mfirstuc (package) . . . . . . . . . . . . . . . . . . . 13, 21
MP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
\makefirstuc

N
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
n ato . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11, 21
New York City . . . . . . . . . . . . . . . . . . 6, 13, 15, 23
\NewAcroCommand . . . . . . . . . . . . . . . . 29 f., 32 ff.
\NewPseudoAcroCommand . . . . . . . . . . . . . . . . 30
next-page . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 f.
next-pages . . . . . . . . . . . . . . . . . . . . . . . . 23 f., 27
N i e d e r b e r g e r, Clemens . . . . . . . . . . . . . . . 2
NY . . . . . . . . . . . . . . . . . . . . . . . 6, 10, 13 ff., 21, 23
name

J
JPEG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
K
Kleber, Josef . . . . . . . . . . . . . . . . . . . . . . . . . . 16
L
l3experimental (package) . . . . . . . . . . . . . . . . 20
l3keys2e (package) . . . . . . . . . . . . . . . . . . . . . . . 2
l3packages (bundle) . . . . . . . . . . . . . . . . . . . . . 35
l3sort (package) . . . . . . . . . . . . . . . . . . . . . . . . . 20

O
only-used . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

44

Index
ot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 single-form . . . . . . . . . . . . . . . . . . . . . . . . 19, 22
single-format . . . . . . . . . . . . . . . . . . . . . . . 4, 22
P
sort . . . . . . . . . . . . . . . . . . . . . . . . . 1, 4 f., 17 f., 20
page-name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 strict . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
page-style . . . . . . . . . . . . . . . . . . . . . . 23, 27, 40 SW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23, 27
pages-name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 T
pdf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 15 ff. tabu (package) . . . . . . . . . . . . . . . . . . . . . . . . . . 37
pdfcomment (package) . . . . . . . . . . . . . . 16 f., 21 Ta l b ot, Nicola L.C. . . . . . . . . . . . . . . . . . . . . 13
pdfstring . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 16 ST . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
plural-ending . . . . . . . . . . . . . . . . . . . . . . . . . 22 T h e LATEX 3 P r o j e c t T e a m . . . . . . . . . . . 35
polyglossia (package) . . . . . . . . . . . . . . 4, 11, 28 tooltip . . . . . . . . . . . . . . . . . . . . . . . . . . . 5, 17, 21
post . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 tooltip-cmd . . . . . . . . . . . . . . . . . . . . . . 5, 17, 21
\printacronyms . . . . . . . . . . . . . . . 1, 17 ff., 27 f. translations (package) . . . . . . . . . . . . . . . . . . . . 2
\ProvideAcroCommand . . . . . . . . . . . . . . . 29, 34
U
\ProvideAcroEnding . . . . . . . . . . . . . . . . . . 33 ff.
uc-cmd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
UFO . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
R
\RenewAcroCommand . . . . . . . . . . . . . . . . . . . . . 29 use-barriers . . . . . . . . . . . . . . . . . . . . . . . . . . 27

reset-at-barriers . . . . . . . . . . . . . . . . . . . . . 27
W
Reuten au e r, Arthur . . . . . . . . . . . . . . . . 4, 11
Wi k i p e d i a . . . . . . . . . . . . . . . . . . . 6, 13, 15, 23

S
short . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2,

5
short-format . . . . . . . . . . . . . . . . . . . . . . . . 4, 22
short-indefinite . . . . . . . . . . . . . . . . . . . . 3, 12
short-plural . . . . . . . . . . . . . . . . . . . . . . . . . 3, 9
short-plural-form . . . . . . . . . . . . . . . . . . . . . . 3
single . . . . . . . . . . . . . . . . . . . . . . . . 1, 4, 13, 19 f.

X
xparse (package) . . . . . . . . . . . . . . . . . . . . . . 2, 29
xspace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
xtemplate (package) . . . . . . . . . . . . . . . . . . . 2, 35

45

Z
zref-abspage (package) . . . . . . . . . . . . . . . . . . . 2

