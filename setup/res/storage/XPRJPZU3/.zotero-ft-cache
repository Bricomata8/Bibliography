Red Swarm: Smart Mobility in Cities with EAs
Daniel H. Stolﬁ, Enrique Alba
LCC, University of Malaga ETSI Informática, Campus de Teatinos
29071, Málaga, Spain
{dhstolﬁ,eat}@lcc.uma.es

ABSTRACT
This work presents an original approach to regulate traﬃc by using an on-line system controlled by an EA. Our proposal uses computational spots with WiFi connectivity located at traﬃc lights (the Red Swarm), which are used to suggest alternative individual routes to vehicles. An evolutionary algorithm is also proposed in order to ﬁnd a conﬁguration for the Red Swarm spots which reduces the travel time of the vehicles and also prevents traﬃc jams. We solve real scenarios in the city of Malaga (Spain), thus enriching the OpenStreetMap info by adding traﬃc lights, sensors, routes and vehicle ﬂows. The result is then imported into the SUMO traﬃc simulator to be used as a method for calculating the ﬁtness of solutions. Our results are competitive compared to the common solutions from experts in terms of travel and stop time, and also with respect to other similar proposals but with the added value of solving a real, big instance.
Categories and Subject Descriptors
I.6.3 [Simulation and Modeling]: Applications
Keywords
Application, evolutionary algorithm, road traﬃc, smart city, smart mobility, WiFi connections
1. INTRODUCTION
Nowadays, cities are evolving quickly. Most citizens are living in, using the services of, or thinking about moving to big cities, which is a new source of complex problems. Smart Cities is a world initiative leading to better exploit on of the resources in a city in order to oﬀer higher level services to people. Smart cities are related to sensing the city’s status and acting in new intelligent ways at diﬀerent levels: people, government, cars, transport, communications, energy, buildings, neighborhoods, resource storage, etc.
One of the headlines of the strategy Europe 2020 is the reduction of greenhouse gas emissions by at least 20% com-
.

pared to 1990 levels, an increment of the share of renewable energy sources in the ﬁnal energy consumption to 20%, and a 20% increase in energy eﬃciency [1].
We believe that proposals like the one described here are directly related to the strategy Europe 2020 as well as to the smart cities initiative because we focus on the reduction of travel times, fuel consumption, and CO2 emissions. We do so by reducing traﬃc jams so that the daily life of citizens in a smartcity improves.
To do this, we take advantage of the existent infrastructure in cities, such as traﬃc lights, open WiFi network, etc., in order to deploy several spots as a part of a collective system, called Red Swarm, each one placed in junctions with traﬃc lights and with the purpose of redirecting traﬃc based on each vehicle’s destination. New routes are constructed with paths between Red Swarm spots, which relieve congested roads by distributing vehicles in alternative itineraries. Drivers are informed of the reroute proposed by using an On Board Unit (OBU) installed inside the vehicle which communicates with the infrastructure (V2I - car or smartphone to Red Swarm spot), by using the electronic panels placed around the city, or by using a portable device such as a smartphone or tablet.
Traﬃc optimization has always been a healthy line of research; now, even more so, with the utilization of ICT. There are solutions that focus on adjusting the traﬃc light cycles by using Particle Swarm Optimization (PSO) [4], or by using a Genetic Algorithm (GA) and a Cellular Automaton (CA) based traﬃc simulator [9], or by using optical information systems to calculate the size of the jam at the aﬀected junction [7]. However, they do not modify the route of vehicles in advance, allowing drivers to make intelligent decisions as they move around the city.
In [3], bus lanes are opened when an additional traﬃc demand is recognized and in [5], a solution based on virtual police agents which are aware of the traﬃc conditions in their vicinity is presented. The former, only adds new lanes to existing roads and does not reroute vehicles while the later changes routes based on local information.
Recently, an approach which uses periodically emitted beacons to analyze the current traﬃc state via VANETs [6] was presented. It depends on V2V communications and the number of vehicles emitting beacons. Our proposal does not rely on the number of vehicles with a communication device to reroute them (oﬀ-line), although it is necessary to tell the driver of the suggested new route to follow.
The rest of this paper is organized as follows. In the next section we introduce the System Architecture proposed in-

Figure 1: Component Schema of Red Swarm.

cluding the Evolutionary Algorithm and the steps taken to deﬁne its parameters and also the Rerouting Algorithm used in each Red Swarm spot. Section 3 presents the optimization results as well as the comparative between the experts’ solution and the Red Swarm one, and ﬁnally in Section 4 conclusions and future work are given.
2. SYSTEM ARCHITECTURE
Our proposal, Red Swarm, is a computational system which consists of:
1. Several Red Swarm spots distributed throughout the city, installed at traﬃc lights which were chosen with the aim of redirecting the traﬃc eﬃciently.
2. The Evolutionary Algorithm which obtains the conﬁguration of each spot.
3. The Rerouting Algorithm which suggests alternative routes based on the conﬁguration of the system, so that drivers can take one of these routes when they enter the zone covered by a spot (WiFi)
In order to evaluate a conﬁguration for the system we used the traﬃc simulator SUMO (Simulator of Urban Mobility) [2] in conjunction with TraCI (Traﬃc Control Interface) [10, 11]. SUMO is a microscopic traﬃc simulator which uses a microscopic model of discrete time and continuous space. Each moving vehicle implements the car-following model developed by Stefan Krauß in [8]. TraCI is an API which allows an external source (the Rerouting Algorithm in our case) to control SUMO as well as to obtain the state of the simulation and change it properly.
Figure 1 presents a schema with the components of Red Swarm. It shows the relation between the Evolutionary Algorithm, the map of the city, the simulator SUMO, and the conﬁguration of the Red Swarm spots at design time. During execution time, the Rerouting Algorithm reads data from the conﬁguration while it exchanges information with vehicles by using the Red Swarm spots. Each spot runs the same rerouting algorithm but only uses the conﬁguration portion related to its own sensors.
2.1 Real Scenario
The scenario chosen is an area of the city of Malaga (in Spain) which is well-known for suﬀering traﬃc congestion at peak times, and it represents a typical challenge found in most European cities (non linear streets). The area is bordered to the north by Carreter´ıa Street, to the east by Gutemberg Street, to the west by the Guadalmedina River, and to the south by the Mediterranean Sea. In Figure 2

Figure 2: Malaga scenario for our smart mobility proposal.
we show the map of the zone chosen, obtained from the OpenStreetMap Project.
This zone contains eight inputs and eight outputs which represent real streets of the urban area. As we stated before, we used SUMO in order to simulate this vehicular environment by importing it from the project OpenStreetMap. This technique could be applied to any other middle-sized city in the world with little eﬀort.
In order to implement the real model in SUMO, we had to divide each Red Swarm spot into a number of sensors which detect vehicles as they enter the area covered by the radio link of the spot. The real system could have sensors freely located or the detection could even be estimated oﬀ-line by the traﬃc municipal service.
Then, we deﬁned all possible journeys between inputs and outputs from the zone in which vehicles follow the fastest path. As a result, we had 64 itineraries available. Furthermore, we deﬁned four diﬀerent kinds of vehicles (sedan, van, wagon, and transport), which are presented in Table 1 with the purpose of analyzing a truly general scenario.

Table 1: Type and characteristics of vehicles.

Type

Arriving MaxSpd. Accel. Decel. Length prob. (Km/h) (m/s2) (m/s2) (m)

sedan

0.50

160 0.9 5.0 3.8

van

0.25

100 0.8 4.5 4.2

wagon

0.15

50 0.7 4.0 4.3

transport

0.10

40 0.6 3.5 4.5

Finally, a problem instance was deﬁned by diﬀerent distributions of vehicle types, arriving time, arriving points and destinations (ﬂows). In the experiments conducted we worked with three diﬀerent instances. They were called Sim1, Sim2, and Sim3.
2.2 Evolutionary Algorithm
As this is a very complex problem, the technique developed for obtaining a conﬁguration for the group of spots placed in the scenario was based on an Evolutionary Algorithm. By using it we were able to explore the solution space, looking to improve the current traﬃc ﬂow in the city.

2.2.1 Representation
The structure deﬁned, which contains the conﬁguration of each input to a Red Swarm spot (sensors) and the destinations of the vehicles, is illustrated in Figure 3.

Figure 3: Problem representation.
If we look at the sensor S1 for example, it contains all the possible destinations deﬁned for the city (D1 to D8), and each destination contains all the probabilities for all the routes which start in S1. For the routes of D1 in S1, there are RK1 diﬀerent paths, some of them to the rest of sensors and others to D1 itself. Therefore, for the routes of D2 in S1, there are RK2 diﬀerent paths, and so on. Consequently, the solution vector contains all the probabilities associated with routes from sensors to other sensors and from sensors to destinations, arranged in blocks. In the scenario described, the solution vector is made up of 1119 probabilities values, which denotes the extreme complexity of this problem.
As presented in Equation 1, the result of the summation of the probabilities for the routes inside a destination block have to be equal to 1.0. Note that the subindex N identiﬁes the sensor, the subindex M identiﬁes the destination, and the subindex Ri, i ∈ [1−KN,M ] identiﬁes the diﬀerent KN,M routes starting with the sensor SN and belonging to the destination block DM .

PSN DM = PN,M,R1 + · · · + PN,M,RKN,M

KN,M

=

PN,M,Ri = 1.0

(1)

i=1

2.2.2 Fitness Function
In order to evaluate each individual, we deﬁne the ﬁtness function presented in Equation 2 which is done by the addition of three terms.

F = α1(N − ntrips) + α2

ttrip N

+ α3

tdelay N

(2)

The ﬁrst one represents the penalization for the vehicles which are still in the city when the simulation is over. There, N is the total number of vehicles in the scenario (800 in this case), ntrips is the number of vehicles which complete their trip during the simulation, and α1 is the weight of this term in the ﬁtness function.
The second term represents the average travel time for the vehicles which complete the journey, being ttrip the travel time of each one. The third term is the average time spent by each vehicle waiting to enter the area because of red lights or traﬃc jams. This time is called tdelay in the equation.
Finally, α2 and α3 are the weights applied to the average travel time and to the average delay time, respectively. All values involved in the calculation of the ﬁtness function are obtained from the results of the simulation run in SUMO

when it is conﬁgured with the Red Swarm spots or with the experts’ algorithm.
2.2.3 Recombination Operator
We propose two diﬀerent recombination operators: Sensor Recombination and Destination Recombination. The ﬁrst one consists of a two-point recombination which selects a range of sensors and their conﬁgurations from two individuals and exchanges them. As a consequence, the oﬀspring obtained preserve part of their original sensor conﬁguration and get a new conﬁguration for only some of them, as depicted in Figure 4. Additionally, the initial position and the range of sensors are randomly chosen. Note that all the random selections made by the operators (recombination and mutation) are based on the uniform distribution implemented by the pseudo-random number generator included in the programming language, Python.
Figure 4: Sensor Crossover.
The second one, the Destination Crossover, preserves the conﬁguration of the sensors along the routes that are being crossed, the exact opposite of what the other operator does. This behavior keeps the routes of each destination block unaltered after the crossing operation. Therefore, the oﬀspring will be composed by complete routes obtained from both parents after the recombination.
2.2.4 Mutation Operators
We also propose several mutation operators. Each operator makes changes to the probabilities of the routes for sensors and destinations so that vehicles would take diﬀerent routes when the Red Swarm spots are conﬁgured with diﬀerent individuals. In this approach, we assigned probabilities equal to either 0 or 1, keeping only one route active in a destination block.
The ADOS operator (All Destinations - One Sensor) modiﬁes the probabilities for all routes and all destinations in one sensor. Note that the sensor is randomly chosen, as depicted in Figure 6(a), where all routes for all destinations in S2 are modiﬁed (shown in dark). This operator makes a number of changes to the status vector but it only aﬀects one sensor.
The MDOS operator (Multiple Destination - One Sensor) changes all the routes for a few destination blocks in one sensor. The sensor and the destination blocks are randomly selected. As Figure 6(b) shows, this operator on average modiﬁes fewer routes than the previous one but more than the next one. In this example, routes of blocks D2 and D8 in S2 are modiﬁed. The destination blocks whose routes are changed are shown in a dark color.
The next operator, called ODOS (One Destination - One Sensor), makes the least number of changes of the status vector with respect to ADOS and MDOS. It selects only a random sensor and a random destination block and changes the routes associated with them. In Figure 6(c), we can observe that S2 and D2 have been selected as the target of the mutation operator.
The last two operators, ASMD (All Sensors - Multiple Destinations) and ASOD (All Sensors - One Destination),

Figure 5: Destination Crossover.

(a) ADOS: All Destinations - One Sensor

(b) MDOS: Multiple Destination - One Sensor

(c) ODOS: One Destination - One Sensor

(d) ASMD: All Sensors - Multiple Destinations
(e) ASOD: All Sensors - One Destination
Figure 6: Mutation Operators.
make changes to each ﬂow individually. In the example presented in Figure 6(d) we can see how the routes in D2 and D8 are modiﬁed in all sensors, while in Figure 6(e), only D2 is modiﬁed in all the sensors. Note that the selection of the destination blocks is made according to a uniform distribution of probability as in the rest of the operators.
2.2.5 Parameterization
First of all we need to evaluate the instances to know how long it takes for vehicles to complete their itineraries, and obtain a ﬁtness value for each one in order to compare them with the solutions that we later calculate.
We worked with three diﬀerent simulations called EXP1, EXP2, and EXP3, corresponding with the simulations in which routes are deﬁned by using the experts’ algorithm, run in the scenarios sim1, sim2 and sim3 respectively.
As stated before, we assigned 100 vehicles to each one of the eight ﬂows to obtain the values presented in Table 2. Vehicles arrived in the scenario in the ﬁrst 100 seconds and after 1500 seconds all the vehicles had left the city, as depicted in Figure 7. Based on this value, we set the maximum simulation time to 1800 seconds (30 minutes), in order not

Figure 7: Vehicles in the city during the ﬁrst 1800 seconds.

to excessively penalize solutions which last for more than the longest time spent in the EXPx simulations, but which could have a lower than average travel time.

Table 2: Results produced by the experts’ algorithm.

Metric # Trips Completed Simulation Time (s) Minimum Fitness

EXP1 800
1283 532.9

EXP2 800
1253 530.8

EXP3 800
1385 549.0

The parameters for the Evolutionary Algorithm implemented are presented in Table 3. We worked with a population of ten individuals and in each new generation, two new descendants were created (crossover probability equal to 1.00), in order to implement a (10+2)-EA algorithm. Then, three in four descendants were mutated (mutation probability equal to 0.75) to provide genetic variety and ﬁnally, the new generation was updated following an elitist strategy. The algorithm was executed for 5000 generations to achieve each solution.
Additionally, α1 was set to 900 (half of the simulation time), and α2 and α3 were set to one. By using these values, we penalized vehicles which did not ﬁnish their itinerary (α1) and therefore were still stuck on their journey through the city when the simulation ended. Moreover, we assigned the

Table 3: Parameters of the Evolutionary Algorithm.

Simulation Time (s) Population Size Oﬀspring Size Crossover Probability Mutation Probability Number of Generations (α1, α2, α3)

1800 10 2
1.00 0.75 5000 (900, 1, 1)

same weight to the travel time (α2) and to the delay time (α3) because they are equally important for us.
Once the algorithm had been conﬁgured, we evaluated the proposed operators. The results are reported in Table 4.

Table 4: Evaluation of operators.

Operators

Avg. StdDev. Min. Conver.

Sensor: ADOS

3557.9 11403.5 555.8 93.8%

Sensor: MDOS

5057.4 9660.2 551.1 93.8%

Sensor: ODOS

6732.9 16455.4 548.4 81.3%

Sensor: ADOS-ODOS 1066.2 2901.1 512.7 94.6%

Sensor: ADOS-MDOS 1329.6 2908.2 516.0 100.0%

Dest.: ADOS

2347.5 6744.8 548.0 100.0%

Dest.: ODOS

803.5 700.8 555.9 100.0%

Dest.: ASMD

36199.5 18174.6 13309.0 87.5%

Dest.: ASOD

5273.9 16606.8 576.2 100.0%

Dest.: ADOS-ODOS 906.9 1758.6 518.8 90.0%

Dest.: ASMD-ASOD 5101.2 11110.6 591.9 43.3%

Note that we also tested combined mutation operators within the algorithm because they allowed us to get better results by using a faster mutation operator at the beginning of the execution, and then switching to a slower one when the ﬁtness of the best individual is lower than a threshold. The value of the threshold was empirically set to 1000.
Based on the data in Table 4 we selected the Sensor Crossover as the recombination operator, while for the mutation operators we decided to start with ADOS and later change to ODOS. This combination was selected because it produced the best minimum value in spite of the fact that the average and the convergence percentage (Conver.) were not the best of the comparative.
Using the ﬁrst mutation operator (ADOS) we quickly explore the data space. Then, when all the vehicles have ﬁnished their itineraries within the simulation time (which makes the best ﬁtness of the population fall below the threshold value), we switch to the second one (ODOS).
By using the ODOS mutation, the search space is carefully explored by mutating only the probability of the routes included in just one destination block in one sensor. This only aﬀects a small proportion of the Red Swarm spots, allowing the improvement of the solution in small steps.
2.3 Rerouting Algorithm
When a vehicle enters the simulation, SUMO assigns one of the eight destinations available as well as the corresponding route to it. Later, when the vehicle enters the coverage area of the Red Swarm spot (in the simulation it is detected by a sensor), the Rerouting Algorithm presented in Algorithm 1, is executed.

Algorithm 1 Rerouting Algorithm.
procedure Rerouting(vehicle) currentRoad ← getRoad(vehicle) if isDestination(currentRoad) then newroute ← currentRoad else routes ← getDestinationRoutes(currentRoad) if routes = [] then routes ← getSensorRoutes(currentRoad) newroute ← getRouteByP robability(routes) end if end if setN ewRoute(newroute, vehicle)
end procedure

First, the current road is obtained from the vehicle and the destination is checked because if the vehicle is on the last road of its itinerary, no rerouting is done. Otherwise, all the routes from the current road to the destination of the vehicle are obtained from the conﬁguration.
Then, if there are no routes to the destination (it is not reachable from the current position), the algorithm will obtain all routes from the current road to the rest of sensors.
Next, one of the routes from the current road to another road containing a sensor is chosen taking into account the probability stored in the conﬁguration.
Finally, the route of the vehicle is changed to the new one and the process ends.
2.4 Experimental Settings
To optimize each traﬃc distribution we carried out 35 independent runs on the cluster belonging to the NEO (Networking and Emerging Optimization) group, consisting of 16 nodes, each equipped with an Intel Core2 Quad CPU (Q9400) @ 2.66GHz and 3.5 GB of RAM, running GNU/Linux 3.2.0-34. By using this hardware, each new generation took about 15 seconds to be calculated, and each execution of the algorithm lasted about 22 hours, having spent about 9 days of computation on the whole optimization process.
3. ANALYSIS OF RESULTS
Table 5 presents the number of trips completed (# Trips Comp.), the total simulation time (Total Time), and the minimum ﬁtness value (Min. Fitness) for the scenarios which are routed according to experts’ criteria implemented in SUMO. These results were achieved by optimizing the three scenarios separately.

Table 5: Comparison between the experts’ algorithm and Red Swarm.

Metric

Experts’ algorithm

Red Swarm

Sim1 Sim2 Sim3 Sim1 Sim2 Sim3

# Trips Comp. 800 800 800 800 800 800

Total Time (s) 1283 1253 1385 1154 1201 1194

Min. Fitness 532.9 530.8 549.0 512.7 530.2 513.0

With this data, we conducted the robustness test by applying the three best available solutions (belonging to the three traﬃc distributions) to the other simulations in order to discover which one was the most robust. That is, Sim1

was simulated with the conﬁguration of the solutions sol2 and sol3 ; Sim2, with the conﬁguration of sol1 and sol3 ; and ﬁnally, Sim3, with sol1 and sol2.
Table 6 demonstrates the improvement of using sol1 to conﬁgure the second simulation instead of using sol2. Although sol3 is a better conﬁguration than sol1 for Sim3, the average value achieved by sol1 is the best of the three. These results encouraged us to select sol1 as the most robust solution to conﬁgure the Red Swarm spots.

Table 6: Minimum ﬁtnesses obtained from the robustness test.

Sim1 Sim2 Sim3 Average

Red Swarm sol1 sol2 sol3 512.7 552.2 546.9 523.5 530.1 555.4 533.3 546.4 513.0 523.2 542.9 538.4

Expert
532.9 530.8 549.0 537.6

In tables 7 and 8 we present the best results achieved with the aim of optimizing the traﬃc in the city center of Malaga. The average values of waiting time and travel time for all Red Swarm simulations are lower than the experts’ solution. There are values such us the initial delay and route length which were not improved by our Red Swarm system, especially the latter as it is not included in the ﬁtness function. Initial delays are higher (avg. 2.3%) mainly due to the traﬃc lights situated near the input streets where the vehicles arriving still need to be rerouted by a Red Swarm spot. Route lengths are also longer (avg. 5.3%) because we were rerouting vehicles via roads which are not part of the best path selected by the experts.
However, we achieved a maximum improvement of 20.2% in the average waiting time and 5.3% in the average travel time. So, it seems that experts just take into consideration the traveled distance, while the time is much better if we want to consider the comfort of reduced waiting at traﬃc lights and at traﬃc jams, and the reduced gas emissions thanks to this (continuous driving).
The distribution of the results is demonstrated in Figure 8 where the improvement achieved is presented in four box plots. Note that waiting times and travel times present lower values for R-S than the experts’ solution.
Furthermore, we compare the total time needed by the vehicles to leave the city when we increment the number of arrivals in each input, in steps of 80 vehicles (ten per input). Figure 9 indicates how the Red Swarm system is actually an eﬀective solution when the number of vehicles is higher than a certain value. So, when the number of vehicles in the area being studied is above 360 (400, 540) the utilization of our Red Swarm is proﬁtable for the city. This number of cars is of course realistic for this part of the city (many more in general), thus explaining why the town hall is currently interested in a prototype.
Finally, we compare our proposal with the best conﬁguration obtained from the execution against the RANDOM algorithm, which randomly looks for solutions during a time equivalent to that spent by the Evolutionary Algorithm we used. The results obtained by using a random search show a highly negative impact on the quality of solutions: cars are not advised of useful routes to their destinations. Many vehicles even remain in the system at the end of the pe-

(a) Initial delay

(b) Waiting time

(c) Travel time

(d) Route length

Figure 8: Box plot representation of the distribution of the results for the experts’ solution (EXP) and the Red Swarm (R-S).

(a) Sim1

(b) Sim2

(c) Sim3
Figure 9: Exit Time vs Number of Vehicles. Note that the vertical line indicates the lowest number of vehicles, from which the optimization is eﬀective.
riod studied (63 vehicles for Sim1, 90 for Sim2, and 152 for Sim3 ). The reader might be thinking why we are reporting the behavior of a pure random algorithm: the reason is to perform a sanity check on the validity of our EA. It is

Table 7: Metrics of experts’ solution, Red Swarm, and RANDOM.

Metric
# Trips Completed Total Time (s) Minimum Fitness

Experts’ solution Sim1 Sim2 Sim3
800 800 800 1283 1253 1385 532.9 530.8 549.0

Red Swarm Sim1 Sim2 Sim3
800 800 800 1154 1164 1206 512.7 523.5 533.3

RANDOM

Sim1 Sim2

Sim3

737

710

648

1800 1800

1800

57459.5 81797.6 137547.3

Table 8: Results of experts’ solution and Red Swarm.

sim1 sim2 sim3

Metric
Initial delay (s) Waiting time (s) Travel time (s) Route length (m) Initial delay (s) Waiting time (s) Travel time (s) Route length (m) Initial delay (s) Waiting time (s) Travel time (s) Route length (m)

Experts’ algorithm

Avg. StdDev. Median

123.0 103.1

92.0

151.8 130.3 121.0

409.9 237.8 389.5

1491.4 767.6 1577.1

124.7 102.5

96.5

146.3 127.4 113.0

406.1 234.1 388.0

1477.7 777.9 1570.2

127.0 107.3

94.0

161.2 153.3 114.0

422.0 260.3 392.5

1506.9 753.9 1598.0

Red Swarm

Avg. StdDev. Median

123.4 104.1

95.0

128.6 106.4 112.0

389.2 214.2 383.5

1565.4 853.6 1595.5

127.8 104.8

98.0

129.1

98.1 110.0

395.7 213.8 377.0

1566.3 845.9 1593.0

132.7 111.2

98.5

134.1 110.9 112.5

400.6 213.7 405.0

1594.8 834.3 1803.9

Rate (Avg.)
0.3% -18.0%
-5.3% 4.7% 2.4% -13.3% -2.6% 5.7% 4.3% -20.2% -5.3% 5.5%

quite common for researchers to not carry out such a sanity check, reporting results of algorithms that can be beaten by random search. We simply do not want this to happen here, and that is why we include its numerical results.
Data from the RANDOM executions are presented in Table 7. While in Figure 10 the graphs of the number of vehicles in the city vs. the total time for the three executions are illustrated.
The main reason for such a poor performance of RANDOM is that there were a number of vehicles moving in circles around the city because the Red Swarm spots did not reroute them properly towards their destination due to a suboptimal conﬁguration.
In Figure 11 we show two photorealistic snapshots exported from SUMO to Google EarthTM. The ﬁrst one shows the path followed by a vehicle routed by the experts’ algorithm and the second one presents the new route set by the Red Swarm spot placed at the junction in the center of the ﬁgure. This behavior is repeated each time a vehicle arrives in the surrounding area of a Red Swarm spot and the new route will depend on the destination of each vehicle as well as the conﬁguration of the spot.
4. CONCLUSIONS
In this paper, we have presented an innovative approach for preventing traﬃc jams. The results conﬁrm that road traﬃc can be improved by using our proposal, especially in high density conditions (e.g. peak times, construction, accidents reducing the available streets, etc.). Although the average travel time was only 5.3% better than the solution of the experts, we lowered the waiting time of the vehicles by 20.2%. That means that drivers are wasting less time

(a) Sim1

(b) Sim2

(c) Sim3
Figure 10: Traﬃc Density for experts’ algorithm (EXP), RANDOM (RND), and Red Swarm (R-S).
(about 23 second less on average) waiting at a red light and in each traﬃc jam.
As a matter for future work, we plan to expand the size of the analyzed region as well as include a larger number of

Figure 11: Route computed by experts’ algorithm vs. route computed using Red Swarm.

Red Swarm spots which will also provide more alternative routes between each other.
For preliminary results for our future work, we have tested Red Swarm in 30 extra scenarios, diﬀerent from the ones analyzed here. Our proposal not only has worked in all these scenarios but has also outperformed the experts’ solution in 20 of them (66.7%).
Red Swarm will not only provide alternative routes for every single car in the city, but will also be able to collect information from the cars (in an anonymous way) permitting local authorities to better know the on-line and historical data of the city to actually help the evolution to a modern smart city.
We are also working on reducing green house emissions. As road traﬃc is one of the main sources of pollution, in future work we will include metrics of pollutant emissions and fuel consumption as SUMO implements them.
5. ACKNOWLEDGMENTS
Authors acknowledge funds from the Ministry of Economy and Competitiveness and FEDER under contract TIN201128194 (roadME http://roadme.lcc.uma.es).
6. REFERENCES
[1] Communication From the Commission - Europe 2020. Technical report, 2010. A strategy for smart, sustainable and inclusive growth.
[2] M. Behrisch, L. Bieker, J. Erdmann, and D. Krajzewicz. SUMO - Simulation of Urban MObility: An Overview. In SIMUL 2011, The Third International Conference on Advances in System Simulation, pages 63–68, October 2011.
[3] L. Bieker and D. Krajzewicz. Evaluation of opening bus lanes for private traﬃc triggered via V2X communication. In Integrated and Sustainable Transportation System (FISTS), 2011 IEEE Forum on, pages 48–53. IEEE, 2011.
[4] J. Garcia-Nieto, E. Alba, and A. Olivera. Enhancing the urban road traﬃc with Swarm Intelligence: A case

study of Co´rdoba city downtown. In Intelligent Systems Design and Applications (ISDA), 2011 11th International Conference on, pages 368–373. IEEE, 2011.
[5] A. Gomez, G. Diaz, and K. Boussetta. How Virtual Police Agents can help in the traﬃc guidance? In Wireless Communications and Networking Conference
Workshops (WCNCW), 2012 IEEE, pages 360–364. IEEE, 2012.
[6] F. Knorr, D. Baselt, M. Schreckenberg, and M. Mauve. Reducing Traﬃc Jams via VANETs. Vehicular Technology, IEEE Transactions on, 61(8):3490–3498, oct. 2012.
[7] D. Krajzewicz, E. Brockfeld, J. Mikat, J. Ringel, C. R¨ossel, W. Tuchscheerer, P. Wagner, and R. W¨osler. Simulation of modern traﬃc lights control systems using the open source traﬃc simulation SUMO. In Proceedings of the 3rd industrial simulation conference, pages 299–302, 2005.
[8] S. Krauß. Microscopic modeling of traﬃc ﬂow: Investigation of collision free vehicle dynamics. PhD thesis, Universitat zu Koln., 1998.
[9] J. Sa´nchez, M. Gala´n, and E. Rubio. Applying a traﬃc lights evolutionary optimization technique to a real case: “Las Ramblas” area in Santa Cruz de Tenerife. Evolutionary Computation, IEEE Transactions on, 12(1):25–40, 2008.
[10] A. Wegener, H. Hellbru¨ck, C. Wewetzer, and A. Lubke. VANET Simulation Environment with Feedback Loop and its Application to Traﬃc Light Assistance. In GLOBECOM Workshops, 2008 IEEE, pages 1–7. IEEE, 2008.
[11] A. Wegener, M. Pio´rkowski, M. Raya, H. Hellbru¨ck, S. Fischer, and J. Hubaux. TraCI: an interface for coupling road traﬃc and network simulators. In Proceedings of the 11th communications and networking simulation symposium, pages 155–163. ACM, 2008.

The author has requested enhancement of the downloaded file. All in-text references underlined in blue are linked to publications on ResearchGate.

