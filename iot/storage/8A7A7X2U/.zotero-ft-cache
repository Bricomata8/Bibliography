Stateless Approach to End-to-End Security for the Internet of Things
(OSCAR – Object Security Architecture for the IoT)
Mališa Vučinić v★, Bernard Tourancheau v, Franck Rousseau v, Andrzej Duda v, Laurent Damon ★, and Roberto Guizzetti ★.

v Grenoble Informatics Laboratory, France ★ STMicroelectronics
Montbonnot, November 6th 2014

GreenNet Presentation

January 2014

Security in the traditional Internet (1/2) 2

Alice
(D)TLS client
Bob RSA and AES Key: 0x9c6d3

Bidirectional Information Flow

Authenticated Secure Channel established once handshake completes

Bob
(D)TLS server

Alice RSA and AES Key: 0x9c6d3

Alice Erin Carol Wendy

Security in the traditional Internet (2/2) 3

Alice RSA and AES Key: 0x9c6d3

Erin ECC and AES Key: 0xdf71e

Bob

Carol ECC and AES Key: 0x1e8c2

Wendy RSA and AES Key: 0x1f61a

Alice Erin Carol Wendy

Security in the Internet of Things 4
z z
Proxy Server Bob

Alice Erin Carol Wendy

Security in the Internet of Things 5
z z
Proxy Server Bob
What happens to the End-to-End Security ?

Motivation 6

•  Features of the Constrained Application Protocol (CoAP) when secured by DTLS:

✕ •  Group communication i.e. multicast support

•  Asynchronous message exchanges

±

•  Proxy and caching capabilities

✕

•  Low overhead

✕

•  Header mapping to HTTP

✕

OSCAR – concepts behind (1/2)
Object Security Architecture for the Internet of Things [1] 7

•  Idea 1: A stateless security architecture
•  Allows caching, eases group communication and asynchronous exchanges •  Solution: Object security – Application data encapsulated within “secured objects”

Object Type: Signed Origin: Temperature sensor in
room D326 Key ID: 0xf61c Signature: 0xc2779b20ea27a
Temperature reading: 25.5 °C Timestamp: 10:42 AM

Object Type: Encrypted Key ID: 0xfa1c
Signed Object

•  Protect from communication-related attacks by binding object-security encryption keys with the underlying CoAP header

FCS

MAC

IPv6

UDP

CoAP

Encrypted Object

Signed Object

[1] M. Vučinić, B. Tourancheau, F. Rousseau, A. Duda, L. Damon, R. Guizzetti, OSCAR: Object Security Architecture for the Internet of Things, in: WoWMoM, IEEE, 2014, pp. 1–10.

OSCAR – concepts behind (2/2)
Object Security Architecture for the Internet of Things [1] 8
•  Idea 2: Move the burden of security handshake away from sensors
•  Introduce a semi-trusted, non-constrained third party that will do the hard work •  Sensors respond with secured objects (resource representations) regardless of the
identity of the client
[1] M. Vučinić, B. Tourancheau, F. Rousseau, A. Duda, L. Damon, R. Guizzetti, OSCAR: Object Security Architecture for the Internet of Things, in: WoWMoM, IEEE, 2014, pp. 1–10.

OSCAR – concepts behind (2/2)
Object Security Architecture for the Internet of Things [1] 9
•  Idea 2: Move the burden of security handshake away from sensors
•  Introduce a semi-trusted, non-constrained third party that will do the hard work •  Sensors respond with secured objects (resource representations) regardless of the
identity of the client
•  Idea 3: Jointly approach problems of End-to-End security and Authorization
•  Split confidentiality and authenticity trust domains •  Confidentiality used to provide access-control for group members •  Authenticity strongly tied to the originator of the information (individual sensor)
[1] M. Vučinić, B. Tourancheau, F. Rousseau, A. Duda, L. Damon, R. Guizzetti, OSCAR: Object Security Architecture for the Internet of Things, in: WoWMoM, IEEE, 2014, pp. 1–10.

OSCAR – dive deep (1/2) 10

OSCAR – dive deep (2/2) 11

Client

GET /Temp Temp

Accesssecret A

Authorization Server

Accesssecret A

Resource representation pre-signed with P's private key
On-the-ﬂy symmetric encryption with key derived from access-secret

Temp Humidity
CO

Accesssecret A
Accesssecret B

... ...

Location .well-known/core

Accesssecret N
Producer P

CoAP + OSCAR 12

•  CoAP + OSCAR features:

✓ •  Group communication i.e. multicast support

•  Asynchronous message exchanges

✓

•  Proxy and caching capabilities

✓

•  Low overhead

±

•  Header mapping to HTTP

✓

•  End-to-End Security

✓

•  Authorization and Access Control

✓

Sensor-side Total Energy Consumption 13

Server Total Energy Consumption (⇥104 mJ) Server Total Energy Consumption (⇥104 mJ)

WiSMote

(MSP430)

Lower is better

9.0 8.0

OOOSSSCCCADAARTRRLS=-==L1i362th000ssse

ST GreenNet

(ARM Cortex M3)

2.1

Lower is better

DTLS-Lithe

2.0 1.9

OOOSSSCCCAAARRR

= 30s = 60s = 120s

7.0

1.8

1.7

6.0

1.6

5.0

1.5

4.0

3.0

12 4

8

16

33 3

3

3

Clients/Session Slots

1.4

1.3

12 4

8

16

33 3

3

3

Clients/Session Slots

OSCAR performs better asa client # >> slot #

Conclusions & Future Work 14
•  E2E security and authorization framework that supports application requirements
•  E2E security even in presence of application-level gateways •  Particularly useful for use-cases where high number of clients
per sensor is expected
•  Smart city a very good example
•  Future extensions
•  Use-cases that require streaming where constant digital signing is unfeasible •  Key management and authorization policies

15
Hvala!* Questions?
*Thanks!

