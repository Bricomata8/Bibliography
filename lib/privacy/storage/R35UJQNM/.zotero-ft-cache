TrustWalker: A Random Walk Model for Combining Trust-based and Item-based Recommendation

Mohsen Jamali

Martin Ester

School of Computing Science School of Computing Science

Simon Fraser University

Simon Fraser University

Burnaby, BC, Canada

Burnaby, BC, Canada

mohsen_jamali@cs.sfu.ca

ester@cs.sfu.ca

ABSTRACT
Collaborative ﬁltering is the most popular approach to build recommender systems and has been successfully employed in many applications. However, it cannot make recommendations for so-called cold start users that have rated only a very small number of items. In addition, these methods do not know how conﬁdent they are in their recommendations. Trust-based recommendation methods assume the additional knowledge of a trust network among users and can better deal with cold start users, since users only need to be simply connected to the trust network. On the other hand, the sparsity of the user item ratings forces the trustbased approach to consider ratings of indirect neighbors that are only weakly trusted, which may decrease its precision. In order to ﬁnd a good trade-oﬀ, we propose a random walk model combining the trust-based and the collaborative ﬁltering approach for recommendation. The random walk model allows us to deﬁne and to measure the conﬁdence of a recommendation. We performed an evaluation on the Epinions dataset and compared our model with existing trust-based and collaborative ﬁltering methods.
Categories and Subject Descriptors
H.2.8.d [Information Technology and Systems]: Database Applications - Data Mining
General Terms
Algorithms, Design, Experimentation, Measurement
Keywords
Trust, Recommendation, Random Walk
1. INTRODUCTION
With the rapidly growing amount of information available on the WWW, it becomes necessary to have tools to help users to select the relevant part of online information. To
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee. KDD’09, June 28–July 1, 2009, Paris, France. Copyright 2009 ACM 978-1-60558-495-9/09/06 ...$5.00.

satisfy this need, recommender systems have emerged, e.g. there are popular recommenders for movies1, books2, music3, etc.
Typically in a recommender system, we have a set of users and a set of items. Each user u rates a set of items by some values. The recommender has the task to predict the rating for user u on a non-rated item i or to generally recommend some items for the given user u based on the ratings that already exist. Collaborative Filtering [6] methods make recommendations based on the ratings of item i by a set of users whose rating proﬁles are most similar to that of user u. With the advent of online social networks, the trust-based approach to recommendation has emerged. This approach assumes a trust network among users and makes recommendations based on the ratings of the users that are directly or indirectly trusted by u.
Collaborative Filtering is most eﬀective when users have expressed enough ratings to have common ratings with other users, but it performs poorly for so-called cold start user. Cold start users are new users who have expressed only a few ratings. Using similarity based approaches, it is unlikely to ﬁnd similar users since the cold start users only have a few ratings. Trust-based recommenders, however, can make recommendations as long as a new user is connected to a large enough component of the trust network.
Using a trust network therefore improves the coverage of recommendations. However, when we go far from the source user u in the trust network, the trust between these users and the source user will become fairly weak and their ratings will be noisy and unreliable. Therefore, we have to use the ratings expressed by users in the neighborhood close to the user u. But, in this case the probability of ﬁnding a rating expressed on the item will be very low and we will not be able to compute a prediction.
In order to consider enough ratings without suﬀering from noisy data, we propose a random walk method (TrustWalker) which combines trust-based and item-based recommendation. TrustWalker considers not only ratings of the target item, but also those of similar items. The probability of using the rating of a similar item instead of a rating for the target item increases with increasing length of the walk. Our framework contains both trust-based and item-based collaborative ﬁltering recommendations as special cases. Most traditional recommender systems do not provide conﬁdence in their predictions. The random walk model allows us to com-
1http://www.netﬂix.com 2http://www.amazon.com 3http://www.last.fm

pute the conﬁdence in our predictions. Also our system is able to explain and justify its results.
The rest of the paper is organized as follows: Section 2 describes the problem deﬁnition. Related works are discussed in section 3. We discuss the details of our proposed model in section 4. In section 5 we introduce some desirable properties of our model. The experimental results and comparison with existing methods are discussed in section 6. Finally we conclude the paper in section 7 and introduce some directions for future research.
2. PROBLEM DEFINITION
In recommender systems we have a set of users U = {u1, ... uN } and a set of items I = {i1, ... iM }. Each user u rates a set of items RIu = {iu1 , ... iuk }. The rating of user u on item i is denoted by ru,i. ru,i can be any real number, but often ratings are integers in the range [1, 5]. In a trust-based system, we also have a trust network among users. If u trusts v, then tu,v denotes the value of this trust as a real number in [0, 1]. Zero means no trust and one means full trust. Binary trust networks are the most common trust networks (Amazon4, eBay5, ...). We deﬁne T Uu = {v ∈ U | tu,v = 1} where T Uu denotes the set of users directly trusted by u.
The trust network can now be deﬁned as a graph G =< U, T U > where T U = {(u, v)| u ∈ U, v ∈ T Uu}. There is a node corresponding to each user, and an edge corresponding to each trust statement.
The task of a recommender is as follows: Given a user u ∈ U and an item i ∈ I for which ru,i is unknown, predict the rating for u on item i. We call u the source user and i the target item. The predicted rating is denoted by ru,i. Normally, users rate only a very small percentage of the items, and ru,i is unknown for most pairs of (u,i).
Traditional recommenders[6] estimate ru,i based on ratings expressed by similar users. Basically, they ﬁnd a neighborhood of raters (users who have rated target item i) who have a rating proﬁle similar to the source user, and aggregate their ratings. In trust-based recommenders, the trust network will be used instead of rating similarities to deﬁne the neighborhood. To predict a rating we ask our directly trusted neighbors whether they know the rating for the item. If so, they return it, otherwise they recursively ask their direct neighbors. The neighborhood in a trust based recommendation is deﬁned as the set of raters trusted (directly or indirectly) by the source user. The ratings from these rates are aggregated to produce a recommendation.
Trust-based recommendation works because of the eﬀects of selection and social inﬂuence that have been postulated by sociologists for a long time. Selection means that people tend to relate to people with similar attributes, and due to social inﬂuence related people in a social network inﬂuence each other to become more similar[16]. The increasing availability of online social network data has ﬁnally allowed a veriﬁcation of these sociological models. [4] experimentally veriﬁed that people are similar to their neighbors in a social network for these reasons. They had a network of people having social interactions and a similarity network in which users are connected to their most similar users. It was shown that the social interaction and similarity graphs have little overlap, sharing fewer than 15% of their edges. The re-
4www.amazon.com 5www.ebay.com

sults of [4] and of similar work conﬁrm that a social network provides an independent source of information which can be exploited to improve the quality of recommendations.
Exploiting the trust network in recommenders does not necessarily enhance the precision of system, but it allows to compute the recommendation for more pairs of (u, i) which leads to better coverage. Coverage is the percentage of < user, item > pairs in the test set for which we can compute a recommendation. This information can in particular help to produce recommendations for cold start users. Moreover, using a trust network will protect the recommender system against attacks like fake proﬁles. As faked proﬁles are not being trusted, they can not aﬀect the recommender. Figure 1 illustrates the trust-based recommendation prob-
Figure 1: Illustration of a social network including ratings expressed by users. The ratings are shown below the item icon beside the user.
lem. As shown in this ﬁgure, we have a social (trust) network of users. Each user has rated some items. The source user u wants a prediction on the target item i (the green diamond). Normally just a few users have rated the target item. Other users have ratings on other items which may include items already rated by u or items similar to the target item i. The goal of the recommender is to predict unknown ratings based on the ratings expressed by trusted friends.
3. RELATED WORKS
In this section, we review related work on trust-based recommendations. We can distinguish two types of trust: Explicit trust and Implicit trust. Explicit trust denotes the trust values explicitly indicated by users, while implicit trust is the trust value inferred from some evidence such as feature similarity of users or email exchange among two persons. In this paper we deal with the explicit trust indicated by users. In the case of explicit trust, we have direct trust and indirect trust. Direct trust is the trust value explicitly indicated by users, but indirect trust is the trust inferred from direct trust using transitivity of trust. how to compute indirect trust is one of the main issues of trust models. Two different approaches can be distinguished for trust computation: Model-based[13][9] and Memory-based[10][5][18][8]. In Model-based approaches, a model with its parameters will be learnt to compute indirect trust. But, in Memory-based approaches, no model is being learnt and normally exploration and heuristics are being used.
TidalTrust[5] performs a modiﬁed breadth ﬁrst search in the trust network to compute a prediction. Basically, it ﬁnds all raters with the shortest path distance from the source user and aggregates their ratings weighted by the trust be-

tween the source user and these raters. To compute the trust value between user u and v who are not directly connected, TidalTrust aggregates the trust value between u’s direct neighbors and v weighted by the direct trust values of u and its direct neighbors. Since TidalTrust only uses information from raters at the nearest distance, it may loose a lot of valuable ratings from users a little further apart in the network.
[10] introduces MoleTrust. The ideas used in MoleTrust and TidalTrust are similar. But MoleTrust considers all raters up to a maximum-depth given as an input. maximumdepth is independent of any speciﬁc user and item. Also, to compute the trust value between u and v in MoleTrust, we perform a backward exploration. It means that the trust value from u to v is the aggregation of trust values between u and users directly trusting v weighted by the direct trust values.
The Advogato[8] maximum ﬂow trust metric has been proposed in order to discover which users are trusted by members of an online community. The input for Advogato is given by an integer number n, the number of members to trust. To assign capacities to the edges of the network, they need to transform the network, so it needs to know the whole structure of the network. Moreover, it only computes the nodes to trust and does not compute diﬀerent degrees of trust. Since the number of users to trust is independent of users and items and there is no distinction between the trusted users, this approach is not appropriate for trustbased recommendation.
AppleSeed has been proposed in [18]. The basic intuition of AppleSeed is motivated by spreading activation models. Source node u is activated through an injection of energy e, which is then fully propagated to other nodes along edges proportional to the weight of the edge. AppleSeed considers the trust to be additive. If there are many weakly trusted paths between two users, this pair of users will obtain a high trust value, which is not intuitive.
[1] presents a set of axioms for trust-based recommender systems and analyzes which combination of these axioms can be satisﬁed simultaneously. In the context of this discussion, a simple random walk method for binary (+1,-1) ratings is presented, which can be formulated as a special case of our model. [1] does not perform any experimental evaluation or comparison to other methods.
Trust has been deﬁned and used in a diﬀerent way by [12]. They extract the social network from the similarity of users’ proﬁles, which is not providing additional information as is provided by trust network. They have two deﬁnitions for trust: proﬁle level trust, which is a global reputation metric; and item level trust, which measures the trustworthiness of a user according to his recommendations for an item rather than a user-user local trust metric. They use the trust values to ﬁlter raters, and they aggregate the ratings weighted by a combination of trust and similarity values. Moreover, they do not use the transitivity of trust, but only directly trusted users. This method is not a trust-based recommendation method in the sense in which we use this term in this paper.
4. TRUSTWALKER MODEL
The main challenge in trust-based recommendation is to decide how far to go in exploring the network. There is a trade-oﬀ between precision and coverage: the further you go, the more likely to ﬁnd raters, but the less trust-worthy

their ratings become. Our approach to ﬁnd a good trade-oﬀ is based on the following observation. Ratings expressed by strongly trusted friends on similar items are more reliable than ratings expressed by weakly trusted far neighbors on the exact target item. This motivates us to combine the trust-based and item-based approach.
We propose a random walk model, called TrustWalker, which considers not only ratings of the target item, but also those of similar items. The probability of using the rating of a similar item instead of a rating for the target item increases with increasing length of the walk. Basically, our model consists of two major components: the random walk on the trust network and the probabilistic item selection. The random walk performs the search in the trust network, and the item selection part considers ratings on similar items to avoid going too deep in the network. So our model improves the precision by preferring raters at a nearer distance and improves the coverage by considering similar items as well as the exact target item.
To recommend a rating for a source user u0 on target item i, we perform random walks on the trust network, each starting at u0 to ﬁnd a user having expressed rating for i or items similar to i. The details of the random walks will be discussed later in this section. Each random walk returns a rating. We perform several random walks, and the aggregation of all ratings returned by diﬀerent random walks are considered as the predicted rating ru0,i.
In the following subsections, we will discuss the details of our random walk model. In our notations, we use symbols u, v, w, ... for users, i, j, ... for items, and k for the step of a random walk. Table 1 lists all notations used in our model.

Notation φu,i,k
Xu,i,k
Xu,i
Su
Yu,i
X Yu,i
ru,i rˆu,i tu,v

Description
probability of stopping the random walk at node u in step k. RV for being at node v in k steps starting from u RV for being at node v at some steps starting from node u RV for selecting a user v out of members of set T Uu. RV for selecting item j amongst items rated by u RV for stopping at node v and selecting item j rated by v, while starting from u. The rating expressed by u on item i The predicted rating of user u on i The trust value among users u and v

Table 1: Notations used in TrustWalker. RV stands for Random Variable. All the notations have index i denoting target item i.

4.1 A Single Random Walk
Starting from source user u0, we perform our random walk. At each step k of a random walk, we are at a certain node u. If u already has the rating on target item i, then we stop our random walk and return ru,i as the result of random walk. If u does not have a rating on i, then we have two options:
• With probability φu,i,k, we don’t continue the random walk. We stay at node u and randomly select one of the items (j) similar to i rated by u and return ru,j.
• With probability 1 − φu,i,k, we continue our random

walk and walk to another user v who is one of u’s direct trusted neighbors (v ∈ T Uu).

If we decide to continue the random walk at node u, we have to select one of directly trusted neighbors of u to continue the random walk to that user. We deﬁne Su as the random variable for selecting a user v from T Uu:

P (Su = v) =

tu,v

=1

w∈T Uu tu,w |T Uu|

(1)

Now, we have:

P (Xu0,i,k+1 = v|Xu0,i,k = u, Ru,i) =

(1 − φu,i,k) ×

P (Su

=

v))

=

(1 − φu,i) ×

1 |T Uu|

(2)

Here, Xu0,i,k denotes the random variable for being at node v in step k while looking for a prediction on target item i for source user u0. Details of computing P (Xu,i,k = v) are discussed later. Also we have a condition that the user
u in step k-1 does not have the rating for item i (denoted
by Ru,i). The probability of walking from user u to v is independent of previous steps. But, since φu,i,k depends on the step k, it is not independent of the step of the random
walk.
With probability φu,i,k, if we decide to stay at a user u, we select one of the items rated by u which is similar to the target item i. The idea is that we deﬁne a similarity measure between items, and for each item j ∈ RIu, we assign a probability of selecting proportional to the similarity of i
andj. We’ll discuss the details of the similarity metric later.

P (Yu,i = j) =

sim(i, j) l∈RIu sim(i, l)

(3)

In this equation Yu,i denotes the random variable for selecting item j amongst items rated by u while looking for an item similar to target item i. We return ru,j as the result of this random walk.
To deﬁne the whole probability distribution, we deﬁne the probabilities for conditions where Ru,i is true, or for items not rated by u as follows:

∀v = u P (Xu0,i,k+1 = v|Xu0,i,k = u, Ru,i) = 0

(4)

∀j.j ∈/ RIu P (Yu,i = j) = 0

(5)

4.1.1 Item Similarities
In content-based recommendation, the similarity of items can be computed using their features. However in collaborative ﬁltering, the only information available about items is their ratings. Hence, to compute the similarity of two items, we use the Pearson Correlation of ratings expressed for both items, as used in [15]. Values of the Pearson correlation are in the range [-1,1]. Negative correlations mean that the ratings expressed for two items are in opposite directions, so these items are not useful for our purpose. Therefore, we only consider items with positive correlation.

corr(i, j) =

u∈UCi,j (ru,i − ru)(ru,j − ru)

(6)

u∈U Ci,j (ru,i − ru)2

u∈U (ru,i − ru)2

UCi,j is the set of common users who have rated both items i and j, and ru denotes the average of ratings expressed by u. corr(i, j) denotes the correlation of items i,j.
The size of the set of common users is also important. For
example, if corr(i, j) = corr(i, l), but |UCi,j| > |UCi,l|, then, since i and j have been rated by more common users, so the
correlation between them is stronger and sim(i, j) should be
greater than sim(i, l). We consider |U Ci,j| in the similarity measure as follows:

sim(i, j) =

1

1

+

e−

|U Ci,j 2

|

× corr(i, j)

(7)

We used the sigmoid function to avoid favoring the size of U Ci,j too much and to keep the similarity value in the range [0,1]. If the size of the set of common users is big enough, then the ﬁrst part of equation 7 would converge to 1, but for small sets of common users, the factor would be 0.6. The number 2 in the denominator of the exponent is because we wanted to have a factor of greater than .9 if the size is greater than 5.

4.1.2 Termination of a Single Random Walk

At each user u, we have a probability φu,i,k of staying at u to select one of his items at step k of the random walk, while we are looking for a prediction on target item i. This probability should be related to the similarities of items rated by u and the target item i. similarity values are real numbers in [0, 1], so they can also be considered as probabilities. We consider the maximum similarity of items rated by u with target item i as the probability of staying at node u.
Furthermore, ratings on target item i from users far away from source user u0 are noisy, but ratings expressed by trusted users nearby in the network are more reliable. So, the deeper we go into the network, the probability of continuing our random walk should decrease and so φu,i,k should increase.
To inject the factor k in φu,i,k, we should use a function f (k) which gives value 1 for big values of k, and a small value for small values of k. Since the sigmoid function satisﬁes our constraints for f (k), we consider a sigmoid function of the k as another factor aﬀecting φu,i,k.

φu,i,k

=

max
j∈RIu

sim(i, j)

×

1

1

+

e−

k 2

(8)

Each random walk has three alternatives to stop:

1. Reaching a node which has expressed a rating on the target item i.

2. At some user node u, we decide to stay at the node and select one of the items rated by u and return the rating for that item as the result of random walk.

3. There is chance for a single random walk to continue for ever. To avoid such a case in our implementation of random walk, we terminate the random walk when we go very far from the source user (k > max-depth). Based on the idea of ”six-degrees of separation”[11], we set max-depth = 6.
4.2 Recommendation
In TrustWalker, we have the probability of selecting items rated by diﬀerent users and returning that rating as the result of a random walk. These items could be either the

exact target item i, or another item. The estimated rating for source user u on target item i would be the expected value of ratings returned by diﬀerent random walks.

ru,i =

P (XYu,i = (v, j)) rv,j

(9)

{(v,j)|Rv,j }

In the above equation, XYu,i is the random variable for stopping the random walk at node v and selecting item j rated by v, while we start the random walk from source user u looking for target item i. Notice that the value for XY are ordered pairs. As used before, Rv,j is a boolean variable denoting whether v has a rating on item j. Now we have:

P (XYu,i = (v, j)) =

 

P (Xu,i = v)φu,iP (Yv,i = j)



P (Xu,i = v) φv,i,1P (Yv,i = j),

v = u;i = j v = u;i = j v = u;i = j

(10)

In this equation, Xu,i is the random variable for being at node v at some step in a random walk starting from source user u looking for item i. Notice that in above formula, we used φu,i instead of φu,i,k for the ﬁrst case. Since we don’t know the number of steps needed to reach v, we don’t consider the factor k (Actually φu,i = φu,i,∞). It should be noted that if we actually perform random walks, we can consider the step k in the ﬁrst case. But to have a closed form formula, we ignore the factor k at the last user v which gives us a pretty good approximation of the probability. Also, we should note that the case v = u and i = j is trivial since the user himself has the rating on the target item.
A random walk starting from u can reach v using diﬀerent number of steps. As mentioned before, we use random variable Xu,i,k for being at node v in k steps

P (Xu,i,k = v) =

P (Xu,i,k−1 = w)(1 − φw,i,k)P (Sw = v)

w∈U

(11)

Also we have P (Xu,i,0 = u) = 1 as the base for the above equation. Since the random walks have a probability of
stopping at each step, v∈U P (Xu,i,k = v) = 1. To make P (Xu,i,k = v) a probability distribution, we deﬁne a dead state ⊥ to which all users go after deciding to terminate that
random walk. So, we have

P (Xu,i,k = ⊥) = 1 −

P (Xu,i,k = v)

v∈U

This state ⊥ will be added to U for convenience in formalization of our method, but we don’t consider this state in any actual random walk. Now, we can compute P (Xu,i = v) as follows:

P (Xu,i = v) =

∞ k=1

P (Xu,i,k

=

v)

w∈U

∞ k=1

P (Xu,i,k

=

w)

(12)

4.3 Matrix Notation of TrustWalker

Similar to any random walk model, we can represent Trust-

Walker using matrix notations. We consider a probability

matrix

P

in

which

Pu,v

=

P (Su

=

v)

=

1 |Nu |

for

all

users

u and v for which tu,v = 1. To formulate the values of

φu,i,k in matrix notation, we deﬁne a diagonal matrix Φk,i

for each item i and step k. Φk,i is a |U| × |U| matrix containing 1 − φu,i,k in its diagonal elements. In other words, Φk,iu,u = 1 − φu,i,k.
It is easy to check that the elements of Φ1,iP are the probabilities of reaching from u to v in step 1. We can also
deﬁne a closure on the Φk,iP as follows:

∞K

P∗i =

Φk,i P

K=1 k=1

= Φ1,iP + Φ1,iPΦ2,iP + Φ1,iPΦ2,iPΦ3,iP + ...

= Φ1,iP(I + Φ2,iP(I + Φ3,iP(...)))

(13)

K k=1

Φd,i P

is

the

matrix

containing

P (Xu,i,K )

=

v

in

its

cells. In the above equation, k denotes the current step of

each single random walk and K denotes then number of

steps each random walk has. Now, we can compute Pi (corresponding to equation 12) which is the probability matrix

containing P (Xu,i = v) in its elements as follows:

Pi = CiP∗i

(14)

Here, Ci is an N × N diagonal matrix used for normaliza-

tion. The values of the diagonal are Ciu,u =

. 1
w∈U P∗i u,w

Now we can use Pi to compute P (Xu,i = v) in equation 12. If, we do not consider step k as a factor in φu,i, it can be
proved that P∗i has a closed formula solution, and this closed formula is (I − ΦiP)−1ΦiP. In this formula, Φi is the same as Φk,i ignoring the factor k. The proof of convergence of
equation 13 is a straightforward application of the Perron-

Frobenius theorem6, and the lemma that all eigenvalues of

ΦiP are strictly less than one. Since matrices Φk,i are diﬀerent for diﬀerent k values, we
can not ﬁnd a closed formula for P∗i . We propose two alternatives to compute equation 13.

• Performing the random walks. This way, we can see the results in action and the estimated value would be the aggregation of results of diﬀerent random walks.

• Based on the idea of ”six degrees of separation” [11], most nodes would be reachable with a walk of length at most 6. So, we can have a pretty good approximation of P∗i by

6K

P∗i =

Φk,i P

(15)

K=1 k=1

This formula can be easily computed. But, there is a prob-

lem with the second approach. We have to store P∗i associated with each item, which is expensive. For example if we

have 10K items and 40K users, and each cell of the matrix

occupies just one byte, then each matrix P∗i would occupy almost 1.6GB memory. To store all matrices we would need

16T B of memory, which is not feasible. This issue motivates

performing actual random walk and aggregate the results

of diﬀerent random walks. Moreover, computing this ma-

trix needs a global information on the whole network, but

TrustWalker can be computed in in a local manner.

Notice that there are major diﬀerences between our ran-

dom walk model and existing random walk approaches such

as [3] and [17]. In PageRank [3], there is a random walk

on the links among WebPages, which correspond to users.

But there is no item in PageRank and walks do not depend

6http://en.wikipedia.org/wiki/Perron-Frobenius theorem

on the step of the random walk. Moreover, PageRank is a global reputation metric. These diﬀerences make PageRank simpler than TrustWalker to ﬁnd the closed form solution. Nevertheless, they do not compute the closed formula because of the scale of network. In [17], they have an item graph on which they perform the random walk. This graph is independent of users, and hence they do not perform random walks on users. Also, unlike TrustWalker, their walks are independent of step k of the random walk. Having a simpler model, they are able to compute the closed formula for walking on the item graph.

4.4 Termination of the Overall Method

The results of performing actual random walks approximate the results given by equation 13. We perform several random walks to be able to get a more reliable prediction. We need to be able to decide when we have done enough random walks to have a precise estimate of ru,i.
We compute the variance in the results of all the walks as follows:

σ2 =

T i=1

(ri

−

r)2

T

Here, ri is the result of ith random walk, and r denotes the average of the ratings returned by random walks. T is the number of random walks we perform to compute the prediction. We also deﬁne σi2 as the variance in the results of the ﬁrst i random walks. Since the values of ratings are in ﬁnite range of [1,5], it can be proved7 that σ2 converges to a constant value. So we can terminate TrustWalker if |σi2+1 − σi2| ≤ .
It should be noted that we have a constant threshold of 10000 for the maximum number of unsuccessful random walks, and after that we consider the pair <user,item> as non-covered.

5. PROPERTIES OF TRUSTWALKER
Our random walk model has some desirable properties, which include generality of the model, conﬁdence in the result, and explainability of predictions.
5.1 Special Cases of TrustWalker
Our model includes Item-based Collaborative Filtering and pure Trust-based Recommendation as its extreme special cases. If φu,i = 1 for all u ∈ U , then our random walk will never start, and it will return the rating expressed by the source user u0 on one of its rated items. Since the probability of selecting an item is proportional to its similarity to the target item i, the expected value of the recommended rating would be the weighted average of the ratings on items in RIu0 with weights proportional to the similarities of these items to the target item i. This is the same as the result of Item-based collaborative ﬁltering proposed in [15].
On the other hand, if we set φu,i = 0 for all u ∈ U , then all random walks will continue until they have found a rating for the exact target item i. The recommended rating would be the aggregation of ratings expressed by users having the rating on i weighted by the probability of reaching these users from u0. Existing methods [5][10] try to approximate these probabilities by simplifying the problem. So our
7Proof of this claim and convergence of equation 13 are available in www.sfu.ca/˜sja25/trustwalker-proofs.pdf

TrustWalker, in one of its extreme cases, can be considered as an ideal trust-based recommender.

5.2 Conﬁdence in Recommendation
As discussed in the introduction, most existing recommenders do not give users the conﬁdence in their predictions. However, users of a recommender like to know how conﬁdent the predicted ratings are. [2] deﬁnes a conﬁdence score using the error function for its prediction. Basically, they consider the squared error as the conﬁdence. Their experiments show that predictions with better conﬁdence have higher quality. Our random walk model also has the advantage that it can compute the conﬁdence.
We can use the variance σ2 to compute our conﬁdence in the predicted rating. The lower the variance σ2, the more conﬁdent we are in our results. To convert this σ2 into a value representing the degree of conﬁdence, we employ the following formula:

conf idence

=

1

−

σ2 maxσ2

(16)

where maxσ2 is the maximum possible variance for the re-

sults and is used to normalize the variance values. If the

rating values are in a ﬁnite range and the size of this range

is

Range,

then

it

is

easy

to

prove

that

maxσ2

=

Range2 4

.

Two other factors may also potentially aﬀect the conﬁ-

dence: the average number of steps in each random walk k,

and the number of random walks. Including k seems to make

sense, but our experiments showed that it doesn’t make any

diﬀerence in the precision of results. In other words, the

error for predictions with lower k is not much better than

the overall error. Regarding the number of random walks,

more random walks can lead to more information and more

conﬁdence, but can also indicate more noise since it took

longer for the results to converge.

Using equation 16, if the results of the random walks are

the same, then the variance would be zero, and the conﬁ-

dence would be 100%. On the other side, if the variance is

very high, then the conﬁdence will be close to 0%.

5.3 Explainability of Recommendations
Explainability means that the recommender system is able to explain how it predicted the rating. There is now a growing recognition that recommender systems must be able to explain and justify the recommendations in order to help users to understand why particular items have been suggested.
In our model, to predict ru,i, we compute P (Xu,i = v) for all users v. The results of diﬀerent random walks are from diﬀerent user. The most frequent users are user with high probability of P (Xu,i = v). We can output these users as users whose ratings are most inﬂuential on the prediction.
Also considering ratings on some items are more frequently used in the results of diﬀerent random walks. These items are items with high values of P (XYu,i = (v, j)).
Now we can use these most frequent users and items to explain why we predicted the rating with ru,i. We can explain to users that this prediction is based on ratings from these trusted users and these similar items.

6. EXPERIMENTS
This section reports our experimental results on a real life data set comparing various versions of TrustWalker against

state of the art methods for trust based and item based recommendation. We implemented TrustWalker as well as the MoleTrust based recommendation proposed by Massa[10] and TidalTrust proposed by Golbeck[5]. We also implemented standard User based Collaborative Filtering [6] and Item based Collaborative Filtering [15] as two fundamental similarity based recommendation methods.
6.1 Experimental Design
Most data sets for recommendation have no social network among users. To best of our knowledge, Epinions’8 data set is the only data set publicly available which has both trust network and ratings expressed by users.
We used the version of the Epinions’ data set9 published by the authors of [14]. This data set is very sparse. The data set contains 49k users with at least one rating, out of which 24k users are cold start users. We consider users with less than 5 ratings as cold start users (similar to [10]). We also have 104k items with 575k ratings expressed for them. Finally, we have 508k trust statements among pairs of users. As mentioned above, 49% of users are cold start users which is a huge portion of users. So, considering the performance of the recommendation for cold start users is very important. The distribution of the number of ratings per users follows a power law. Notice that there exists another version of the Epinions data set10 prepared and published by Paolo Massa[10]. We also ran experiments on this data set with very similar results. The data set we used in our experiments has additional features which may be helpful for future works.
We implemented TrustWalker and the other methods in Java. We used an Intel Core2 Duo 2.2 GHz CPU with 2GB RAM to run our experiments on an XP system.
In our experiments, we compare the results for diﬀerent methods. Following is the description of labels we use to denote each of these algorithms:
• TidalTrust. This is the trust-based approach of [5].
• MoleTrust. This is the approach used in [10]. It should be noted that we use max − depth = 6 for ModelTrust as well.
• CF Pearson. We implemented the user based collaborative ﬁltering [6], with the Pearson Correlation as similarity measure.
• Item based. We also implemented the item based collaborative ﬁltering [15] using Pearson Correlation as the item similarity metric.
• Random Walk This is one of the special cases of TrustWalker with φu,i,k = 0 for all (u, i, k). Also we set diﬀerent thresholds on the number of steps a random walk. Random Walk 1 represents the case in which we just walk for one step, and in Random Walk 6 each random walk could continue until 6 steps.
• TrustWalker0. This method is the version of our TrustWalker in which φu,i is independent of k. Our item similarity metric considers the size of the set of common users in computing the similarities. We also performed experiments in which we only considered Pear-
8www.epinions.com 9http://alchemy.cs.washington.edu/data/epinions/ 10http://www.trustlet.org/wiki/Epinions dataset

son correlation as similarity metric. The results of this version are denoted by TrustWalker0-pure.
• TrustWalker. This is our full TrustWalker method. We also have TrustWalker-pure.
We set = 0.0001 for our termination condition.
6.2 Evaluation Metrics
Typically, the leave-one-out method is used to evaluate recommendation systems [5][10][15]. In the leave-one-out method, we withhold a rating and try to predict it using the trust network and the remaining ratings.
As used in the most recent research papers [17] [7], we use the Root Mean Squared Error (RMSE) to measure the error in recommendation:

RM SE =

(u,i)|Ru,i (ru,i − ru,i)2 |{(u, i)|Ru,i}|

(17)

In the above equation, Ru,i is a boolean showing whether u has a rating on i in our data set, and ru,i and ru,i denote the actual and recommended rating respectively. The smaller the value of RMSE, the more precise a recommendation. But, as we discussed before, the purpose of using trust is mostly enhancing the coverage without sacriﬁcing the precision. So we deﬁne a coverage metric to measure the percentage of pairs of <user,item> for which we can predict a rating.
To combine RMSE and coverage into a single evaluation metric, we compute the FMeasure (Coverage has been already deﬁned in section 2). For this purpose, we have to convert RMSE into a precision metric in the range [0,1]. So we deﬁne precision as follows:

P recision = 1 − RM SE

(18)

4

In this equation, 4 is the maximum possible error since the

values of ratings are in the range [1, 5].

F M easure = 2 × P recision × Coverage

(19)

P recision + Coverage

If none of the random walks can ﬁnd a prediction on the rating, then we say that the recommender can not cover this pair of <user,item>.
6.3 Experimental Results
In this subsection, we present the results of our experiments, ﬁrst for cold-start users and then for all users.
Table 2 shows the RMSE, Coverage, and F-Measure for all comparison partners for cold start users. Figures 2 and 3 show the charts comparing the results of diﬀerent methods according to each of three evaluation measures separately.
As shown in ﬁgure 2, TrustWalker has lower error than all the other methods except for RandomWalk1. But according to table 2, RandomWalk1 has extremely low coverage (12%). The comparison between TrustWalker and TrustWalker0 shows that considering the step k in φu,i reduces the error. Also comparing the RMSE of TrustWalker and TrustWalker-pure shows that considering the size of the set of common users in the item similarity metric reduces the error.
Figure 3 shows the F-Measure together with precision and coverage for all methods. It shows that all four versions of

Method
Tidal Trust Mole Trust CF Pearson RandomWalk 6 RandomWalk 1 Item based TrustWalker0-pure TrustWalker0 TrustWalker-pure TrustWalker

RMSE
1.216 1.430 1.495 1.206 1.084 1.520 1.293 1.263 1.259 1.192

Coverage(%)
60.92 57.75 17.94 61.74 12.77 23.19 72.08 74.22 72.08 74.22

F-Measure
0.650 0.608 0.279 0.655 0.217 0.338 0.698 0.712 0.703 0.722

Table 2: Results for COLD START users.

Figure 3: Comparison of Coverage and Precision together with F-Measure for diﬀerent methods on COLD START users.

Figure 2: Comparison of RMSE for diﬀerent methods on COLD START users.

TrustWalker outperform all other methods according to the combination of precision and coverage. Notice that TidalTrust[5] outperforms all versions of our model in terms of precision except for the full TrustWalker which has a slightly lower error. However, TrustWalker’s coverage is 13% more than that of TidalTrust, which makes TrustWalker better in terms of F-Measure.
The results for all users are shown in table 3. Figure 4 shows the results of diﬀerent methods according to each of the three evaluation measures on all users. We observe similar relative performance of all methods as for cold start users. It should be noted that all methods perform significantly better over all users since there is less information available for cold start users. TrustWalker outperforms all other methods in terms of F-Measure, although the gain for all users is less than the gain for cold start users. Notice that the errors of both TidalTrust and MoleTrust for All users are very close to TrustWalker, but TrustWalker clearly has a better coverage.

Method
TidalTrust MoleTrust CF Pearson RandomWalk 6 RandomWalk 1 Item based TrustWalker0-pure TrustWalker0 TrustWalker-pure TrustWalker

RMSE
1.096 1.093 1.327 1.089 1.154 1.244 1.158 1.112 1.109 1.077

Coverage(%)
84.87 82.13 71.63 87.19 30.62 70.69 95.29 95.36 95.29 95.36

F-Measure
0.783 0.771 0.691 0.793 0.428 0.698 0.814 0.822 0.822 0.827

Table 3: Experimental results for ALL users.

In summary, TrustWalker substantially improves the coverage of existing trust-based approaches while maintaining the same or even slightly better precision. This improvement is achieved by considering ratings for similar items as well as

Figure 4: Comparison of evaluation measures for diﬀerent methods on ALL users.
the exact target item. TrustWalker also clearly outperforms Collaborative Filtering (both user-based and item-based) in terms of coverage because of exploiting the trust-network in its random walks. Moreover, TrustWalker clearly outperforms Collaborative Filtering methods in terms of precision due to the restriction to ratings from highly trusted users. Since cold start users have only a few ratings, the improvement of coverage using trust-based approaches (specially TrustWalker) compared to Collaborative Filtering is much more for cold start users than for all users.
For example, TrustWalker’s coverage is 74% for cold start users while Collaborative Filtering approaches have coverage of 18% and 23%. But in case of all users, TrustWalker’s coverage is 95% while Collaborative Filtering approaches have coverage of 71%. TidalTrust and MoleTrust have coverage of 84% and 82% respectively for cold start users while their coverage is 61% and 57% in case of all users.
To evaluate the meaningfulness of our deﬁnition of conﬁdence, we compare the error of TrustWalker for diﬀerent percentiles of most conﬁdent predictions (for both Cold Start and All users) in ﬁgure 5. As shown in this ﬁgure, the more conﬁdent the predictions are the more precise the results will be and hence the lower the RMSE. For example, the diﬀerence between the RMSE of the top 50% conﬁdent predictions and all predictions is 0.18 for cold start users. As an evidence for the signiﬁcance of these RMSE reductions, note that in the Netﬂix prize competition11, there is a $1 Million reward for a reduction of the RMSE by 10% (around 0.1).
7. CONCLUSION
Recommender systems are emerging as tools of choice to
11http://www.netﬂixprize.com

Figure 5: The eﬀect of conﬁdence on the precision of recommendations. The horizontal axis shows percentile of most conﬁdent predictions from dataset.
select the online information relevant to a given user. Collaborative ﬁltering is the most popular approach to building recommender systems and has been successfully employed in many applications. However, it cannot make recommendations for so-called cold start users that have rated only a very small number of items. Collaborative ﬁltering methods are rather vulnerable to attacks that insert fraudulent user proﬁles into the database. Finally, these methods do not know how conﬁdent they are in their recommendations. Trust-based recommender systems can better deal with cold start users, since users only need to be simply connected to the trust network. The trust-based approach is also much more robust to fraudulent attacks.
On the other hand, the sparsity of the user item ratings forces the trust-based approach to consider ratings of indirect neighbors that are only weakly trusted, which may decrease its precision. In order to address this problem, we proposed the random walk model TrustWalker to combine the trust-based and the item-based collaborative ﬁltering approach to recommendation. TrustWalker considers not only ratings of the target item, but also those of similar items, with probability increasing with increasing length of the walk. As another contribution, TrustWalker allows us to deﬁne and to measure the conﬁdence of a recommendation. We performed an evaluation on the Epinions dataset, demonstrating that TrustWalker outperforms both collaborative ﬁltering methods and purely trust-based methods specially in terms of coverage. Also TrustWalker has a slightly better precision compared to other Trust-based approaches while clearly outperforming Collaborative Filtering approaches in terms od precision. We also showed that highly conﬁdent recommendations are of even greater quality.
This work suggests several interesting directions for future work. We want to evaluate TrustWalker on other data sets as soon as they become available. Besides the problem of predicting a rating for a given item, recommending a list of items to a user is also a natural task for recommenders. We plan to investigate the extension of the TrustWalker model for this task. In this paper and in the related work, the ratings are assumed to be stored in a centralized repository. However, applications such as mobile phone-based social networks require a distributed recommender, and a random walk model is a promising approach for such scenarios. The trust concept we considered in this paper is context independent. However, people may trust other people in some context while they do not trust those people in other contexts. Investigating context-based trust models for recommendations is also an interesting direction for future work.

8. ACKNOWLEDGEMENT
We are very grateful to Samaneh Moghaddam for her useful comments and for proof reading this paper.
9. REFERENCES
[1] R. Andersen, C. Borgs, J. Chayes, U. Feige, A. Flaxman, A. Kalai, V. Mirrokni, and M. Tennenholtz. Trust-based recommendation systems: an axiomatic approach. In WWW 2008.
[2] R. M. Bell, Y. Koren, and C. Volinsky. Modeling relationships at multiple scales to improve accuracy of large recommender systems. In KDD 2007.
[3] S. Brin and L. Page. The anatomy of a large-scale hypertextual web search engine. Computer Networks and ISDN Systems, 30(1), 1998.
[4] D. Crandall, D. Cosley, D. Huttenlocher, J. Kleinberg, and S. Suri. Feedback eﬀects between similarity and social inﬂuence in online communities. In KDD 2008.
[5] J. Golbeck. Computing and Applying Trust in Web-based Social Networks. PhD thesis, University of Maryland College Park, 2005.
[6] D. Goldberg, D. Nichols, B. M. Oki, and D. Terry. Using collaborative ﬁltering to weave an information tapestry. Communications of the ACM, 35(12), 1992.
[7] Y. Koren. Factorization meets the neighborhood a multifaceted collaborative ﬁltering model. In KDD 2008.
[8] Levien and Aiken. Advogato’s trust metric. online at http://advogato.org/trust-metric.html, 2002.
[9] H. Ma, H. Yang, M. R. Lyu, and I. King. Sorec: social recommendation using probabilistic matrix factorization. In CIKM ’08, 2008.
[10] P. Massa and P. Avesani. Trust-aware recommender systems. In ACM Recommender Systems Conference (RecSys), USA, 2007.
[11] S. Milgram. The small world problem. Psychology Today, 2, 1967.
[12] J. O’Donovan and B. Smyth. Trust in recommender systems. In 10th international conference on Intelligent user interfaces, USA, 2005.
[13] A. Rettinger, M. Nickles, and V. Tresp. A statistical relational model for trust learning. In AAMAS ’08: 7th international joint conference on Autonomous agents and multiagent systems, 2008.
[14] M. Richardson and P. Domingos. Mining knowledge-sharing sites for viral marketing. In KDD 2002.
[15] B. Sarwar, G. Karypis, J. Konstan, and J. Riedl. Item-based collaborative ﬁltering recommendation algorithms. In WWW 2001.
[16] S. Wasserman and K. Faust. Social Network Analysis. Cambridge Univ. Press, 1994.
[17] H. Yildirim and M. S. Krishnamoorthy. A random walk method for alleviating the sparsity problem in collaborative ﬁltering. In ACM Conference on Recommender Systems (RecSys), Switzerland, 2008.
[18] C. N. Ziegler. Towards Decentralized Recommender Systems. PhD thesis, University of Freiburg, 2005.

