2019 International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData)
IoT-based Urban Trafﬁc-Light Control: Modelling, Prototyping and Evaluation of MQTT protocol

Raﬁk Zitouni‡, Je´re´my Petit‡, Aghiles Djoudi ‡ and Laurent George ECE Paris‡, LACSC Laboratory, 37 Quai de Grenelle, 75015 Paris, France
LIGM/ESIEE Paris , 5 boulevard Descartes, Cite´ Descartes, Champs-sur-Marne, France
Email: raﬁk.zitouni@ece.fr, jeremy.petit@ece.fr, aghilesdjoudi@gmail.com, laurent.george@esiee.fr

Abstract—Most trafﬁc light’s control systems in smart cities are wired and have a semi-static behavior. They are time-based, with pre-conﬁgured pattern and expensive cameras. Although trafﬁc lights can communicate wirelessly with incoming vehicles, they are less adapted to an urban environment. If we consider light signs as an Internet of Things (IoT) network, one issue is to model thoroughly the change of signs’ states and the Quality of Service (QoS) of this network. In this paper, we propose a new architecture of Urban Trafﬁc Light Control based on an IoT network (IoT-UTLC). The objective is to interconnect both roads’ infrastructures and trafﬁc lights through an IoT platform. We designed our IoT-UTLC by selecting motes and protocols of wireless sensor network (WSN). Message Queuing Telemetry Transport (MQTT) protocol has been integrated to manage QoS. It enables lights to adapt remotely to any situation and smoothly interrupt trafﬁc light’s classic cycles. Our experimental results show that the MQTT protocol is efﬁcient when the packets rate exceeds 35% of trafﬁc ﬂow, it reduces trafﬁc delay up to 0.05s at 90% of congestion. After veriﬁcation and validation of our solution using a UPPAAL model checker, our system has been prototyped. Motes’ functions have been implemented on Contiki OS and connected via a 6LoWPAN/IEEE 802.15.4 network. Timestamping messages have been performed throughout the system to evaluate the MQTT protocol with different QoS levels. In our experiments, we measured the Round-trip delay time (RTT) of messages exchanged between the WSN and IoT Cloud. The results show that MQTT decreases the RTT when the Cumulative Distributed Function (CDF) of generated messages exceeds 35%.
Keywords—IoT, WSN, Smart Cities, Trafﬁc Lights Control, Cloud, Edge and Fog Computing, 6LoWPAN, Contiki OS, QoS, MQTT, UPPAAL
I. INTRODUCTION
According to the French agency of statistics on roads’ accidents, 12% of them happen in intersections caused by the non-compliance to trafﬁc rules. 23% of them led to hospitalization in which 14% are fatal [1]. Urban Trafﬁc Light Control (UTLC) are one possible solution to regulate vehicle ﬂows at intersections. However, a static cycle of trafﬁc lights (or lights signs) has a direct impact on trafﬁc jams, particularly when an emergency vehicle must cross through as quickly as possible. This work is addressing how to decrease the waiting time of this vehicle and ﬂuidity of its trajectory. The Internet of Things (IoT) and Everything (IoE) can be a solution to adapt trafﬁc light control to trafﬁc density. It allows heterogeneous connected objects,

e.g. Zigbee, LoRa, SigFox, ITS-G5, to interact and exchange sensed data on roads, vehicles, pedestrians presence, time of leaving house, etc [2]. Therefore, connecting heterogeneous infrastructures following a Device-to-Device approach is possible via upper layers or an intermediate Cloud platform. However, reduce the latency of data exchange is challenging at the application level.
Wireless Sensor Networks (WSNs) are the source of these data, and the Cloud is the remote entity that collects them. Fog and Edge computing have been proposed to address the low latency of IoT applications by efﬁcient resource distribution and a local processing. Fog computing leverages Edge devices and remote and private Cloud resources with distributed data processing. It provides the advantage to process data closer to the source and thus mitigate latency issues and reduce network congestion. However, constructing a real IoT Fog Computing is costly for evaluation while the environment has to be controllable for experiments [3]. Our main contribution is the design of a new architecture of UTLC based on an IoT network ((IoTUTLC). It is a prototyping of Edge computing with a remote Cloud data gathering dealing with a latency problem of WSN and Quality of Service (QoS) protocol. Though, our aim is to model, prototype and evaluate the QoS of an IoT solution for UTLC system.
Modeling of trafﬁc light states control is essential to avoid incoherent situations. Number of models based on Petri Nets (PN) have been proposed in [4] and [5]. Their main drawbacks are the limitation to the structural analysis of state transitions and the lack of veriﬁcation. However, our design is based on UPPAAL (UPPsala and AALborg Universities) [6] timed automata for design and veriﬁcation of coherent state of cross road’s trafﬁc light. It speciﬁes a graph of states with clocks and data variables. To implement our Urban Trafﬁc Light Control based on an IoT network architecture (IoT-UTLC), we setup a real IEEE 802.15.4 WSN with devices that can act as actuators and sensors. Small trafﬁc light signs are driven by a Border Router (BR) device to a sink node which is a gateway to the Internet. This BR is connected to a host computer (or sink) also connected to an IoT Cloud platform. WSN devices forward their data to the IoT Cloud through this sink which deﬁnes required levels of QoS based on Message Queuing Telemetry Transport (MQTT) protocol [7]. The collected data can be transmitted to different devices such as sink, BR or

978-1-7281-2980-8/19/$31.00 ©2019 IEEE

182

DOI 10.1109/iThings/GreenCom/CPSCom/SmartData.2019.00051

wireless sensor/actuator devices. When WSN devices detect the arrival of high priority vehicles, sensed data are routed to the IoT Cloud. Then, the sink node takes a decision to change the light’s state and forward generated messages to actuator devices via BR with a high level of QoS. Thanks to IPv6 over Low power Wireless Personal Area Network (6LoWPAN) [8], our WSN is energy-efﬁcient and IPv6 compatible.
This paper is organized as follows. In Section II, we review related work. Section III reports the design of our prototyping solution. We describe the use case deﬁned with the design model. Section IV deﬁnes our prototype (IoT Testbed), giving our speciﬁcations and discussing on our choices of technologies and protocols. Finally, Section V presents the obtained results that show the usefulness and the best practice for MQTT.
II. RELATED WORK
Petri nets (PNs) are widely used for trafﬁc light modelling and control [5]. In [4], deterministic-timed Petri Nets have been used to describe signalized intersections. Undesirable deadlock states might appear when the nets are tested for some use cases. The authors in [9] have modiﬁed PNs models including stochastic-time for one single signalized intersection. Dotoli and Fanti [10] have built a colored timed PN with a deterministic modular framework, in which parts of the system, and even parts of the subsystems, can be speciﬁed and analyzed separately. Examples using modularity are given in Soares and Vrancken [11], in which a p-timed PN is used for the control of a trafﬁc signal in both main road and side streets. But formal characteristics of PNs (e.g., deadlock and liveliness) haven’t been discussed. The PNs suffer from a lack of analysis and veriﬁcation tools. To overcome these limits of PNs, we propose UPPAAL timed automata for design and veriﬁcation of coherent state of cross road’s trafﬁc light. UPPAAL is a timed-based modelling software with a graphical user interface. It is the result of the research works of two universities UPPsala University in Sweden (UPP) and AALborg University in Denmark (AAL) [6].
In [12], thermal cameras and on-street wired sensors detect vehicles and pedestrians in order to adapt the cycle of trafﬁc light control systems. However, such a solution can be expensive. In addition, the system uses only its local view of the environment to detect the arrival of a vehicle. Other solutions use recent technologies such as wireless sensors devices to limit the cost of thermal cameras and reduce the time needed to deploy sensors. In [13] and [14], the authors propose an adaptive system based on local wireless communication between lights and vehicles. But such a solution requires a global interconnection between all road’s users and infrastructure. This problem comes from the rigid deﬁnition of technologies’ standards. Our work is not only limited to establish WSN, but it is scalable to interconnect heterogeneous wireless technologies through the Internet. The obtained WSN intends to meet multiple QoS requirements of IoT applying the MQTT protocol. In [15], the latency of MQTT has been evaluated by calculating the average round-trip delay between two clients located

in two different continents. The limit of this work is the evaluation of only the impact of messages’ size. In our work, we consider the period of generated messages, and we calculate the RTT delays from WSN to Cloud IoT platform.
In [5] [4] [9] [11], the authors focus only on the structural analysis of their models and the transitions between colors of trafﬁc lights. However, the implementation of their models as a service in the Internet of smart cities has not been discussed. Moreover, their methodology is not tested with any real trafﬁc lights’ Testbed.
III. USE CASE AND MODEL DESIGN Our objective is to build a robust Testbed that behaves like a real urban trafﬁc light control system. As presented in section II, a crossroad trafﬁc light design has been proposed based on PNs [5]. Authors demonstrated the necessity to monitor checkpoints like trafﬁc light transitions from red to green and deﬁne critical control points to ensure that the transition model is correct. Authors have identiﬁed which signal indication sequence optimizes the overall system performance. We were inspired from this work by adding the vulnerability of wireless network i.e. packet loss. Indeed, this model is theoretical and static, and would not model entirely trafﬁc light control system. Thus, we propose a UPPAAL timed automata for modelling and veriﬁcation of the system.
A. Use case We consider the use case of trafﬁc lights at an intersec-
tion crossed by high priority vehicle like ambulances, ﬁreﬁghters or public transportation systems. Crossing delays are important in such use cases, when the goal is to travel in the city from two locations without experiencing trafﬁc jams. We consider the case of a high priority vehicle approaching a trafﬁc light sign on red state. The detection of priority vehicles using (RFID or touch sensor) triggers the transmission of notiﬁcation to road signs’ network asking for a switch of trafﬁc light to green. In that situation, it should be possible to interrupt the usual cycle of a crossroad.


Fig. 1. Use case illustration
In order to design a characteristic urban trafﬁc light, we prototyped our Testbed based on the existing crossroads

183

in Paris. In general, the number of lights is three and the timers’ cycles are between 50 and 90 seconds. They could be adjustable from supervision room of function of the period of a day. We took an actual crossing point with its dimension and static timers. Fig. 1 shows IoT interconnection of four trafﬁc lights, high priority vehicles and roads. Our system is described by one intersection (or crossing) of two roads A and B, with two trafﬁc lights by road. The signs and roads can use heterogeneous technologies as presented with different colors.
The roads are connected to the Internet through sensor nodes, which are able to detect the arrival of high priority vehicles. The detection is performed by Touch sensors driven by WSN nodes. Note that signals on each road should always have different colors (or states). Of course, when the road A trafﬁc light is on green, the state of the trafﬁc light on the opposite road, must be on red and vice versa. To access the Internet, all messages sent by those objects will go through a Border Router (BR) device and a Middleware or Edge computer. The Middleware is connected to the Internet and forwards all packets to a Cloud. Therefore, the collected data in the Cloud allow a Middleware to decide for the future state of lights. Then, BR disseminates this decision through the network to the actuators.
B. Design Model
Our design is based on UPPAAL model checker software. It speciﬁes a graph of states with clocks and data variables. It allows us to model how our system works and simulates all possible trafﬁc lights states. The modelling allows us to cover all possible cases of lights change of our IoT-UTLC. It is also a tool for verifying formally the consistancy of trafﬁc light changes: GREEN to YELLOW states, YELLOW to RED states and RED to GREEN states. We simulated our system by three automata shown in Fig. 3, Fig. 2 and Fig. 4 and available at (https://github.com/IoTUTLC/Resources). We proved that our model worked without deadlock and starvation by performing all possible combinations and running the UPPALL models. It means that in our system, there is always a transition to go to the next state. It proves that the system will not stop functioning over time. Incoherent situations, like four signals on GREEN, must not happen.
Fig. 2 highlights the model of trafﬁc lights and describes their behavior. The change of light’s state is based on requests and conﬁrmation exchange between lights and the Middleware. We deﬁned two roles for the trafﬁc lights: one is set to master mode and the second one is set to slave mode. Masters send requests every 60 seconds to change their states while considering the current ones. This period was chosen after measuring the cycle of real lights in Paris. Line 6 of Algorithm 1 shows the condition when a light should change its state. CLK state represents clock or time progress. reqAG and reqAR are respectively the requests to ask for GREEN and RED states on road A. The same is speciﬁed for the road B. When it receives a conﬁrmation from the Middleware, a cycle is started to send the signal with the desired state. Every 30 seconds, the trafﬁc lights can change their states, starting with GREEN light and then

to YELLOW light for 3 seconds after that switching to RED. They can also start from RED and then change to GREEN state after additional 3 seconds. We add this extra delay to avoid a dangerous situation when a GREEN state is on the two roads A and B at the same time. Even if we have messages lost due to the wireless nature of the network, our UPPAAL models ensure that this situation doesn’t arise. It has been introduced after experiencing a latency between the WSN and the Cloud platform (see section V). When GREEN or RED states are actuated, conﬁrmation messages are sent to the Middleware. The pseudo Algorithm 1 summarizes this mechanism.

Algorithm 1: Trafﬁc light

1 init 60s timer(); while true do

2 if end timer() then

3

send request new state();

4

reset timer();

5 end

6 if msg received red() and my state is green

then

7

change state(yellow);

8

wait();

9

change state(red);

10

send conﬁrmation to middleware();

11 end

12 if msg received green() and my state is red

then

13

change state(green);

14

send conﬁrmation to middleware();

15 end

16 end

The model in Fig. 3 deﬁnes the different possibilities in terms of internal cycles depending on the request made by trafﬁc lights (reqAG, reqBG, reqAR reqBR). Mainly, the Middleware sends the message to the Cloud and waits for its response. Then, it sends messages to trafﬁc lights master and slave to change their state following this order: every light go to RED before setting GREEN signals. It also uses acknowledgments from the trafﬁc lights to ensure that the new state has been set. In order to ensure these two features, we used a system to retain messages if the IoT Cloud Platform send GREEN states before RED states (see line 3 of Algorithm. 2 ). Algorithm 2 shows a simple description showing how the Middleware conﬁrms the order of trafﬁc lights changes.
We introduced the IoT Cloud Platform model shown in Fig. 4. It simulates the subscription mechanism according to messages sent by the Middleware to update collected data. We deﬁned two states RED and GREEN without a transition state like YELLOW state deﬁned for the trafﬁc lights. The condition touchA indicates if the road A detects the high priority vehicle. The name touch is related to the type of sensor integrated in our prototype (see next section). The Cloud conﬁrms to the Middleware that the state is changed by sending a message conﬁrmA.
Exchanged messages within our WSN are based on IEEE

184

[! DQGOLJKW  EORFNLQJ6WDWH IDOVH
UHT%* [ EORFNLQJ6WDWH WUXH
[  VLJQDO%*"

VWDUW [

[!  OLJKW  EORFNLQJ6WDWH IDOVH

UHT%5 [ EORFNLQJ6WDWH WUXH

[ VLJQDO%5"

&/. FRQILUP%W

VODYH%*

OLJKW 

*5((1

[ EORFNLQJ6WDWH IDOVHLQ&\FOH IDOVH

WHVW 

5('

<(//2:

[ EORFNLQJ6WDWH IDOVHOLJKW 

Fig. 2. Model of our Trafﬁc Lights in UPPAAL

OLJKW$FWO OLJKW$OLJKW%FWO OLJKW%LQ&\FOH WUXH

FRQILUP%"

F5HT%*

OLJKW$FWO OLJKW$OLJKW%FWO OLJKW%LQ&\FOH WUXH

F5HT$*

FRQILUP$"

VLJQDO$5 VODYH%*
FRQILUP%W"

FRQILUP$W"

UHT%*"

UHT$*"

FRQILUP%W"

VLJQDO%*

F5HT%5

UHT%5"

VWDUW"

VLJQDO$* UHT$5"

F5HT$5

VLJQDO%5 VODYH$*
FRQILUP$"

VLJQDO%5 VODYH%5

FRQILUP%"

VLJQDO$* VLJQDO%*

FRQILUP$W"

VLJQDO$5 VODYH$5

OLJKW$FWO OLJKW$OLJKW%FWO OLJKW%LQ&\FOH WUXH
Fig. 3. Model of our Middleware in UPPAAL

OLJKW$FWO OLJKW$OLJKW%FWO OLJKW%LQ&\FOH WUXH

Algorithm 2: Middleware conﬁrmation

1 if message received() then

2 if is green() then

3

retain msg(); //green then red

4 end

5 else

6

if retained msg exist() then

7

update to red(); //green then red

8

end

9

else

10

update to red(); //red then green

11

end

12 end

13 end

14 while true do

15 conﬁrmation red lights();

16 update to green();

17 conﬁrmation green lights();

18 end

802.15.4 stack. And our Middleware deﬁnes QoS levels of exchanged messages via MQTT protocol.

WRXFK$" OLJKW$ 

F5HT%5" OLJKW$ 

5('
F5HT$*" OLJKW$ 

XQWRXFK"

FRQILUP$

FRQILUP$

F5HT$5" OLJKW$ 

*5((1
F5HT%*" OLJKW$ 

Fig. 4. Model of our Cloud variables in UPPAAL
IV. PROTOTYPING We have prototyped the wireless sensors and actuator’s network of trafﬁc lights and roads on a mockup 1 of real intersection in Paris with a scale of 1:68. Our speciﬁcations have been deﬁned considering the low-cost and energy
1https://github.com/IoT-UTLC/Resources/wiki

185

efﬁciency of the solution. This Testbed is a proof of concept of not limited to our use case as it is scalable for other applications. For example, additional sensors of ﬁne particules could be implanted bringing correlation between trafﬁc jam and pollution.
Fig. 5 shows the architecture of our IoT-UTLC with three layers. From left to right, we have the WSN layer with connected trafﬁc lights’ actuators, sensors and IEEE 802.15.4 transceivers. The second part is the gateway of the WSN ensured by the BR and the Middleware i.e. Python script launched by host computer. The last layer is the Ubidots IoT Cloud Platform. It is an open source solution used to collect and analyze WSN data.
A. 6LoWPAN, Contiki OS, Re-Mote and Border Router
Our WSN is an IPv6 LowPower Wireless Personal Area Network (6LoWPAN) based on IEEE 802.15.4 stack. It is well adapted to embedded wireless devices with energy aware constraint and for its capabilities to deﬁne a mesh topology. Contiki Os2 has been used to implement networks’ functions such as send, receive and data processing. It is an embedded operating system with large open source community. It supports Zolertia’s Re-Motes 3 and implements recent IEEE 802.15.4 standard speciﬁcations. It also includes protocols such as RPL, CoAP and MQTT. Furthermore, developer community is active and makes available source codes examples in order to help developing quickly new applications.
Re-motes are compatible with our WSN speciﬁcations and our design model. They are wireless devices with ultralow power operation mode. This choice has been motivated by long radio range of its IEEE 802.15.4 CC1200 transceiver, which transmits in the frequency band of 868915 MHz. In addition, each Re-Mote has analog and digital ports with a possibility to connect several analog sensors and actuators. A Re-mote can be driven by a computer and become a sink and/or BR as well as a gateway between the 6LoWPAN network and the computer.
To implement the previous model described in Section III, we used six Re-motes: one for the BR, four to control the trafﬁc lights and one Re-Mote to detect the arrival of a high priority vehicle near a crossing point. For simplicity, we choose a touch sensor as a detecting device of priority vehicle. We have developed four types of programs running on a Re-mote: trafﬁc lights signs, sensors, high priority vehicle detecting device and BR function. Sensors send periodically information to the IoT Cloud Platform with temperature, pressure or any relevant information that can be sensed. As mentioned in the previous section, trafﬁc lights are sub-divided into two modes: slaves and masters. Masters nodes are the only ones to request the Middleware to change its light’s state and slaves simply change its state depending on received packets. These roles are deﬁned to reduce the overhead of network, redundancy and collisions, for instance. Masters send periodically packets to request a
2http://www.contiki-os.org/ 3https://github.com/Zolertia/Resources/wiki/RE-Mote

change of state to the Middleware which forwards them to a Cloud platform.
BR node behaves differently compared to the other Remotes. The entries of its routing table are the list of Remotes that pass through it. It reroutes all received packets sent by its neighboring to host computer (or sink), which creates a connection to the IoT Cloud platform. Two options are possible to create our BR: i) separate the BR and sink and ii) combine both on the same device. In our development, we worked on how to implement the sink and the BR nodes on the same Re-Mote board. Fig. 6 shows a prototype of the combined BR and sink, both connected to an ethernet interface. Indeed, if the border router becomes an Ethernet router, there will no longer be any connection between the host/sink machine and the IoT Cloud platform. Every Re-mote is able to connect independently to the IoT Cloud platform. This approach has some advantages, such as the autonomy of the devices, but it generates an overhead requiring extra synchronization packets’ exchange. Therefore, we separate the sink and BR, since this solution is more ﬂexible and resilient for our Testbed.
B. MQTT and UBIDOTS
Fig. 7 presents the layers of our UTLC network. From bottom to up, the WSN network sense and/or detect, process and actuates trafﬁc lights. The second layer manages the 6 LowPan addressing and routing of packets throughout an IEEE 802.15.4 network. The Edge Computing is the Middleware between the WSN and the Cloud platform. For the setup of our UTLC, we start by establishing the access network of WSN. The next step is to connect this network to Core network. MQTT protocol controls three levels of QoS of exchanged packets from the WSN to the chosen Ubidots 4 Cloud platform. It adopts IntServ approach for supporting quality of service in the network, it tags incoming packets in the border routers with different levels of priority. Core routers read incoming packets headers and queue them according to their priority, packets with a high priority are sent faster compared to low priority ones.
MQTT ensures the QoS and publish/subscribe mechanisms through a broker. The broker behaves as a server by ﬁltering messages and organizing them in topics, which are strings used to ﬁlter messages and deﬁne the hierarchy of our data structure. They allow us to organize how to receive multiple data from sensors such as temperature, up time, battery status and how to display them and obtain a real-time glance of our system. It gets its messages from publishers and sends any modiﬁcations to entities, which that subscribed to the updated topics. We used this mechanism with the Middleware in order to publish messages to the broker and get from the main topic the new values of the subscriber.
The QoS feature of MQTT protocol manages network resources by handling retransmissions and guarantees the delivery of messages. It allows more control on messages by deﬁning the level of guarantee. By default, the QoS is deﬁned by three levels. The ﬁrst one, level 0, is ‘At most one‘.
4https://ubidots.com/

186

 









 




Fig. 5. Architecture of Iot-UTLC

Fig. 6. BR and sink combined on one board
Level 1 is ‘At least one‘ where there is an acknowledgment to let the sender know that its packet has been received. Finally, level 2 ‘Exactly once‘ is the highest veriﬁcation level with a request/response ﬂows to ensure that only one message will be delivered and processed by the receiver. In our case, we applied levels 1 and 2 using paho.mqtt.client Python library. For example, publisher of high priority data such as touch sensor has to indicate the highest level of QoS by the code shown bellow. We shared our implementation and its source codes at https://github.com/IoT-UTLC/contiki.
p a y l o a d = j s o n . dumps ({” RoadA ” : data , ”RoadB ” : 0}) r e s , mid = conn . p u b l i s h (MQTT URL PUB, p a y l o a d ,
qos = i n t ( QoS ) ) # QoS i s QoS l e v e l t o u s e
We experienced signiﬁcant latency of high priority messages when we tested our IoT-UTLC mockup. Therefore, assessments of the MQTT protocol in our case provided signiﬁcant information about its efﬁciency.
V. RESULTS
In this section, we report experimental results of urban trafﬁc-light control system based on MQTT protocol. We report the limitations of our solution. To test the efﬁciency of MQTT protocol, we made 2 scenarios, in the ﬁrst scenario, the rate of generated packets is 1 packet per 10s. In the second scenario, this rate is 1 packet per 1s. The measured delays have been taken into account between the Middleware (Edge) to the Cloud platform (Ubidots) throughout the Internet. Note that we don’t know the routes and the routers that our packets will go through. We measured the Round Trip Time (RRT) for the packets exchanged between the two sides. In each scenario, more than 100 values have been

  ,-.

  + 


 !"#  $%&'()'*

 










Fig. 7. UTLC network layers

taken. Tests have been reproduced for two different hours and days. Since the measurements take long time, we were limited to two days.
Fig. 8 shows the measured Cumulative Distribution Function (CDF) of RTT delays for the two levels of QoS, levels 1 and 2. We consider three probabilistic distribution functions (Normal, Gamma and Logistic) in the experimental results in order to characterize MQTT performance. The obtained correlation allows us to deﬁne a representative empirical model. Table I details the results of a correlation matrix between distributions and experimental results. We can see that logistic distribution [16] ﬁts better with our measured RTT values for the two scenarios. The standard logistic law is of parameters 0 and 1. Its distribution function of a random variable x is the sigmoid following the expression:

F (x)

=

1

1 + e−x ,where

x

∈

[−∞, +∞]

(1)

Fig. 9 highlights the empirical model of CDF featuring the RTT of MQTT protocol. As can be seen, RTT protocol is more efﬁcient when the number of packets is greater than 35% of the total number of packets sent. This can be explained by the fact that priority queues are useful when queues of QoS are full. In that case, the packets

187







Pkt sent each 1s & QoS level 0

Pkt sent each 1s & QoS level 1

CDF (%) 0.0 0.4 0.8

CDF (%) 0.0 0.4 0.8

norm gamma logis

200

300

400

500

Delay (ms)

norm gamma logis

200

300

400

500

Delay (ms)

Pkt sent each 10s & QoS level 0

Pkt sent each 10s & QoS level 1

CDF (%) 0.0 0.4 0.8

CDF (%) 0.0 0.4 0.8

norm gamma logis

200

300

400

500

Delay (ms)

norm gamma logis

200

300

400

500

Delay (ms)

Fig. 8. Normal, Gamma and Logistic distribution

TABLE I.

CORRELATION BETWEEN DISTRIBUTIONS AND
EMPIRICAL RESULTS

1s with QoS level 1 1s with QoS level 2 10s with QoS level 1 10s with QoS level 2

norm 172.12074 159.59630 146.85668 176.28502

gamma 175.2950 172.8193 161.2369 192.6108

logis 185.4433 189.7002 175.3682 204.3235

offers the same efﬁciency with suitable delays. The found latency of up to 400 ms would be problematic for real world safety applications which require at most 100 ms [17].
Although our Mockup is innovative by combining IEEE 802.15.4, 6LowPAN, MQTT protocol and Edge Computing, the performances of our solution depend on external parameters. These parameters are related to Internet Service Provider and all packet’s routes throughout Internet network from the Middleware to Ubidots. Thus, real implementation of such a system should be done by introducing a private Cloud near data sources.
VI. CONCLUSION
In this paper, we proposed a Urban Trafﬁc Light Control (IoT-UTLC), considering its architecture’s elements and tools used to build an IoT mockup. We reported three main contributions in this work: i) Modelling through UPPAAL of crossing’s trafﬁc lights ii) Prototyping of IoT Edge Computing iii) Performance assessment of MQTT protocol. Trafﬁc lights control has been taken as an IoT network. WSN has been deployed on motes running Contiki Os and exchanging IEEE802.15.4/6LowPAN packets. MQTT was the QoS protocol between our WSN and Ubidots Cloud platform. UPPAAL model checker design ensured that lights’ colors change is adaptive to the arriving of a priority vehicle.
Our experiments have investigated the relationship between the MQTT protocol and the trafﬁc ﬂow congestion. Our results showed that the MQTT is efﬁcient when the number of packets sent exceeds 35% of the total number. The packets with highest level of QoS has low latency than other packets. The protocol remains efﬁcient since the delay of priority packets decreases when the network overhead increases. However, found latencies of up to 400ms is higher than the expected one for vehicular safety application. Thus, the proposed IoT architecture and protocols must be improved to consider the safety requirements. While we are still developing our prototyping, we plane to integrate other use cases such as smart buildings and industrial IoT. As a near future work, we plane to extend our experiments with private Cloud towards a real Fog Computing.





3NWVHQWHDFKV 4R6OHYHO 3NWVHQWHDFKV 4R6OHYHO 3NWVHQWHDFKV 4R6OHYHO 3NWVHQWHDFKV 4R6OHYHO

















Fig. 9. Cumulative distribution function of RTT delay for two QoS levels
with a highest priority level will reach their destination with low latency. Furthermore, when we increase the number of packets sent to Ubidots at one per second, the MQTT still

ACKNOWLEDGEMENT
We would like to thank our colleague Sebti Mouelhi, associate professor at ECE Paris, who provided us insight and expertise on UPPAAL.
REFERENCES
[1] O. national interministe´riel de la se´curite´ Routie`re, “La se´curite´ routie`re en France: Bilan de l’accidentalite´ de l’anne´e 2015,” France, Tech. Rep., 2015.
[2] C. Perera, A. Zaslavsky, P. Christen, and D. Georgakopoulos, “Context Aware Computing for The Internet of Things: A Survey,” IEEE Communications Surveys & Tutorials, vol. 16, no. 1, pp. 414–454, 2014.
[3] A. V. Dastjerdi and R. Buyya, “Fog Computing: Helping the Internet of Things Realize Its Potential,” Computer, vol. 49, no. 8, pp. 112– 116, aug 2016.

188

[4] A. Di Febbraro and D. Giglio, “Trafﬁc-responsive signalling control through a modular/switching model represented via DTPN,” in 2006 IEEE Intelligent Transportation Systems Conference. IEEE, 2006, pp. 1430–1435.
[5] Yi-Sheng Huang, Yi-Shun Weng, and MengChu Zhou, “Modular Design of Urban Trafﬁc-Light Control Systems Based on Synchronized Timed Petri Nets,” IEEE Transactions on Intelligent Transportation Systems, vol. 15, no. 2, pp. 530–539, apr 2014.
[6] A. David, K. G. Larsen, A. Legay, M. Miku˘cionis, and D. B. Poulsen, “UPPAAL SMC tutorial,” International Journal on Software Tools for Technology Transfer, 2015.
[7] A. Al-Fuqaha, A. Khreishah, M. Guizani, A. Rayes, and M. Mohammadi, “Toward better horizontal integration among IoT services,” IEEE Communications Magazine, vol. 53, no. 9, pp. 72–79, 2015.
[8] A. Chalappuram, P. Sreesh, and J. M. George, “Development of 6LoWPAN in Embedded Wireless System,” Procedia Technology, vol. 25, pp. 513–519, jan 2016.
[9] A. D. Febbraro, N. Sacco, and D. Giglio, “On using Petri nets for representing and controlling signalized urban areas: New model and results,” in IEEE Conference on Intelligent Transportation Systems, Proceedings, ITSC, 2009.
[10] M. Dotoli and M. P. Fanti, “An urban trafﬁc network model via coloured timed Petri nets,” Control Engineering Practice, vol. 14, no. 10, pp. 1213–1229, oct 2006.
[11] M. dos Santos Soares and J. Vrancken, “A modular Petri net to modeling and scenario analysis of a network of road trafﬁc signals,” Control Engineering Practice, 2012.
[12] “macq.” [Online]. Available: https://www.macq.eu/page/smartmobility-projects
[13] M. Tlig, O. Buffet, and O. Simonin, “Decentralized trafﬁc management: A synchronization-based intersection control,” in 2014 International Conference on Advanced Logistics and Transport, ICALT 2014, 2014.
[14] K. Rose, S. Eldridge, and L. Chapin, “The Internet of Things: An Overview - Understanding the Issues and Challenges of a More Connected World,” Tech. Rep., 2015.
[15] D. R. C. Silva, G. M. B. Oliveira, I. Silva, P. Ferrari, and E. Sisinni, “Latency evaluation for MQTT and WebSocket Protocols: an Industry 4.0 perspective,” in 2018 IEEE Symposium on Computers and Communications (ISCC). IEEE, jun 2018, pp. 01 233–01 238.
[16] M. A. STEPHENS, “Tests of ﬁt for the logistic distribution based on the empirical distribution function,” Biometrika, vol. 66, no. 3, pp. 591–595, 12 1979.
[17] S. Chen, J. Hu, Y. Shi, Y. Peng, J. Fang, R. Zhao, and L. Zhao, “Vehicle-to-Everything (v2x) Services Supported by LTE-Based Systems and 5G,” IEEE Communications Standards Magazine, vol. 1, no. 2, pp. 70–76, 2017.
189

